{
  "version": 3,
  "sources": ["../../tseep/lib/types.js", "../../tseep/src/task-collection/bake-collection.ts", "../../tseep/src/task-collection/task-collection.ts", "../../tseep/src/task-collection/index.ts", "../../tseep/src/utils.ts", "../../tseep/src/ee.ts", "../../tseep/src/index.ts", "../../ms/index.js", "../../debug/src/common.js", "../../debug/src/browser.js", "../../typescript-lru-cache/src/LRUCacheNode.ts", "../../typescript-lru-cache/src/LRUCache.ts", "../../typescript-lru-cache/src/index.ts", "../../light-bolt11-decoder/node_modules/@scure/base/lib/index.js", "../../light-bolt11-decoder/bolt11.js", "../../nostr-tools/node_modules/@noble/hashes/src/_assert.ts", "../../nostr-tools/node_modules/@noble/hashes/src/crypto.ts", "../../nostr-tools/node_modules/@noble/hashes/src/utils.ts", "../../nostr-tools/node_modules/@noble/hashes/src/_sha2.ts", "../../nostr-tools/node_modules/@noble/hashes/src/sha256.ts", "../../nostr-tools/node_modules/@noble/curves/src/abstract/utils.ts", "../../nostr-tools/node_modules/@noble/curves/src/abstract/modular.ts", "../../nostr-tools/node_modules/@noble/curves/src/abstract/curve.ts", "../../nostr-tools/node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../nostr-tools/node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../nostr-tools/node_modules/@noble/hashes/src/hmac.ts", "../../nostr-tools/node_modules/@noble/curves/src/_shortw_utils.ts", "../../nostr-tools/node_modules/@noble/curves/src/secp256k1.ts", "../../nostr-tools/node_modules/@scure/base/lib/esm/index.js", "../../@scure/bip39/src/wordlists/english.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/_assert.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/crypto.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/utils.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/hmac.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/pbkdf2.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/_sha2.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/sha256.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/_u64.ts", "../../@scure/bip39/node_modules/@noble/hashes/src/sha512.ts", "../../@scure/base/lib/esm/index.js", "../../@scure/bip39/src/index.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/_assert.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/crypto.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/utils.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/hmac.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/_sha2.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/ripemd160.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/sha256.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/_u64.ts", "../../@scure/bip32/node_modules/@noble/hashes/src/sha512.ts", "../../@scure/bip32/node_modules/@noble/curves/node_modules/@noble/hashes/src/_assert.ts", "../../@scure/bip32/node_modules/@noble/curves/node_modules/@noble/hashes/src/crypto.ts", "../../@scure/bip32/node_modules/@noble/curves/node_modules/@noble/hashes/src/utils.ts", "../../@scure/bip32/node_modules/@noble/curves/node_modules/@noble/hashes/src/_sha2.ts", "../../@scure/bip32/node_modules/@noble/curves/node_modules/@noble/hashes/src/sha256.ts", "../../@scure/bip32/node_modules/@noble/curves/src/abstract/utils.ts", "../../@scure/bip32/node_modules/@noble/curves/src/abstract/modular.ts", "../../@scure/bip32/node_modules/@noble/curves/src/abstract/curve.ts", "../../@scure/bip32/node_modules/@noble/curves/src/abstract/weierstrass.ts", "../../@scure/bip32/node_modules/@noble/curves/src/abstract/hash-to-curve.ts", "../../@scure/bip32/node_modules/@noble/curves/node_modules/@noble/hashes/src/hmac.ts", "../../@scure/bip32/node_modules/@noble/curves/src/_shortw_utils.ts", "../../@scure/bip32/node_modules/@noble/curves/src/secp256k1.ts", "../../@scure/bip32/index.ts", "../../@noble/ciphers/src/utils.ts", "../../@noble/ciphers/src/_assert.ts", "../../@noble/ciphers/src/_poly1305.ts", "../../@noble/ciphers/src/_salsa.ts", "../../@noble/ciphers/src/chacha.ts", "../../nostr-tools/node_modules/@noble/hashes/src/hkdf.ts", "../../nostr-tools/lib/esm/index.js", "../../@nostr-dev-kit/ndk/dist/index.mjs", "../../@noble/hashes/src/_assert.ts", "../../@noble/hashes/src/crypto.ts", "../../@noble/hashes/src/utils.ts", "../../@noble/hashes/src/_md.ts", "../../@noble/hashes/src/sha256.ts", "../../@noble/curves/src/abstract/utils.ts", "../../@noble/curves/src/abstract/modular.ts", "../../@noble/curves/src/abstract/curve.ts", "../../@noble/curves/src/abstract/weierstrass.ts", "../../@noble/curves/src/abstract/hash-to-curve.ts", "../../@noble/hashes/src/hmac.ts", "../../@noble/curves/src/_shortw_utils.ts", "../../@noble/curves/src/secp256k1.ts"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//# sourceMappingURL=types.js.map", null, null, null, null, null, null, "/**\r\n * Helpers.\r\n */\r\n\r\nvar s = 1000;\r\nvar m = s * 60;\r\nvar h = m * 60;\r\nvar d = h * 24;\r\nvar w = d * 7;\r\nvar y = d * 365.25;\r\n\r\n/**\r\n * Parse or format the given `val`.\r\n *\r\n * Options:\r\n *\r\n *  - `long` verbose formatting [false]\r\n *\r\n * @param {String|Number} val\r\n * @param {Object} [options]\r\n * @throws {Error} throw an error if val is not a non-empty string or a number\r\n * @return {String|Number}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function(val, options) {\r\n  options = options || {};\r\n  var type = typeof val;\r\n  if (type === 'string' && val.length > 0) {\r\n    return parse(val);\r\n  } else if (type === 'number' && isFinite(val)) {\r\n    return options.long ? fmtLong(val) : fmtShort(val);\r\n  }\r\n  throw new Error(\r\n    'val is not a non-empty string or a valid number. val=' +\r\n      JSON.stringify(val)\r\n  );\r\n};\r\n\r\n/**\r\n * Parse the given `str` and return milliseconds.\r\n *\r\n * @param {String} str\r\n * @return {Number}\r\n * @api private\r\n */\r\n\r\nfunction parse(str) {\r\n  str = String(str);\r\n  if (str.length > 100) {\r\n    return;\r\n  }\r\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\r\n    str\r\n  );\r\n  if (!match) {\r\n    return;\r\n  }\r\n  var n = parseFloat(match[1]);\r\n  var type = (match[2] || 'ms').toLowerCase();\r\n  switch (type) {\r\n    case 'years':\r\n    case 'year':\r\n    case 'yrs':\r\n    case 'yr':\r\n    case 'y':\r\n      return n * y;\r\n    case 'weeks':\r\n    case 'week':\r\n    case 'w':\r\n      return n * w;\r\n    case 'days':\r\n    case 'day':\r\n    case 'd':\r\n      return n * d;\r\n    case 'hours':\r\n    case 'hour':\r\n    case 'hrs':\r\n    case 'hr':\r\n    case 'h':\r\n      return n * h;\r\n    case 'minutes':\r\n    case 'minute':\r\n    case 'mins':\r\n    case 'min':\r\n    case 'm':\r\n      return n * m;\r\n    case 'seconds':\r\n    case 'second':\r\n    case 'secs':\r\n    case 'sec':\r\n    case 's':\r\n      return n * s;\r\n    case 'milliseconds':\r\n    case 'millisecond':\r\n    case 'msecs':\r\n    case 'msec':\r\n    case 'ms':\r\n      return n;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Short format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtShort(ms) {\r\n  var msAbs = Math.abs(ms);\r\n  if (msAbs >= d) {\r\n    return Math.round(ms / d) + 'd';\r\n  }\r\n  if (msAbs >= h) {\r\n    return Math.round(ms / h) + 'h';\r\n  }\r\n  if (msAbs >= m) {\r\n    return Math.round(ms / m) + 'm';\r\n  }\r\n  if (msAbs >= s) {\r\n    return Math.round(ms / s) + 's';\r\n  }\r\n  return ms + 'ms';\r\n}\r\n\r\n/**\r\n * Long format for `ms`.\r\n *\r\n * @param {Number} ms\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nfunction fmtLong(ms) {\r\n  var msAbs = Math.abs(ms);\r\n  if (msAbs >= d) {\r\n    return plural(ms, msAbs, d, 'day');\r\n  }\r\n  if (msAbs >= h) {\r\n    return plural(ms, msAbs, h, 'hour');\r\n  }\r\n  if (msAbs >= m) {\r\n    return plural(ms, msAbs, m, 'minute');\r\n  }\r\n  if (msAbs >= s) {\r\n    return plural(ms, msAbs, s, 'second');\r\n  }\r\n  return ms + ' ms';\r\n}\r\n\r\n/**\r\n * Pluralization helper.\r\n */\r\n\r\nfunction plural(ms, msAbs, n, name) {\r\n  var isPlural = msAbs >= n * 1.5;\r\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\r\n}\r\n", "\r\n/**\r\n * This is the common logic for both the Node.js and web browser\r\n * implementations of `debug()`.\r\n */\r\n\r\nfunction setup(env) {\r\n\tcreateDebug.debug = createDebug;\r\n\tcreateDebug.default = createDebug;\r\n\tcreateDebug.coerce = coerce;\r\n\tcreateDebug.disable = disable;\r\n\tcreateDebug.enable = enable;\r\n\tcreateDebug.enabled = enabled;\r\n\tcreateDebug.humanize = require('ms');\r\n\tcreateDebug.destroy = destroy;\r\n\r\n\tObject.keys(env).forEach(key => {\r\n\t\tcreateDebug[key] = env[key];\r\n\t});\r\n\r\n\t/**\r\n\t* The currently active debug mode names, and names to skip.\r\n\t*/\r\n\r\n\tcreateDebug.names = [];\r\n\tcreateDebug.skips = [];\r\n\r\n\t/**\r\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\r\n\t*\r\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\r\n\t*/\r\n\tcreateDebug.formatters = {};\r\n\r\n\t/**\r\n\t* Selects a color for a debug namespace\r\n\t* @param {String} namespace The namespace string for the debug instance to be colored\r\n\t* @return {Number|String} An ANSI color code for the given namespace\r\n\t* @api private\r\n\t*/\r\n\tfunction selectColor(namespace) {\r\n\t\tlet hash = 0;\r\n\r\n\t\tfor (let i = 0; i < namespace.length; i++) {\r\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\r\n\t\t\thash |= 0; // Convert to 32bit integer\r\n\t\t}\r\n\r\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\r\n\t}\r\n\tcreateDebug.selectColor = selectColor;\r\n\r\n\t/**\r\n\t* Create a debugger with the given `namespace`.\r\n\t*\r\n\t* @param {String} namespace\r\n\t* @return {Function}\r\n\t* @api public\r\n\t*/\r\n\tfunction createDebug(namespace) {\r\n\t\tlet prevTime;\r\n\t\tlet enableOverride = null;\r\n\t\tlet namespacesCache;\r\n\t\tlet enabledCache;\r\n\r\n\t\tfunction debug(...args) {\r\n\t\t\t// Disabled?\r\n\t\t\tif (!debug.enabled) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst self = debug;\r\n\r\n\t\t\t// Set `diff` timestamp\r\n\t\t\tconst curr = Number(new Date());\r\n\t\t\tconst ms = curr - (prevTime || curr);\r\n\t\t\tself.diff = ms;\r\n\t\t\tself.prev = prevTime;\r\n\t\t\tself.curr = curr;\r\n\t\t\tprevTime = curr;\r\n\r\n\t\t\targs[0] = createDebug.coerce(args[0]);\r\n\r\n\t\t\tif (typeof args[0] !== 'string') {\r\n\t\t\t\t// Anything else let's inspect with %O\r\n\t\t\t\targs.unshift('%O');\r\n\t\t\t}\r\n\r\n\t\t\t// Apply any `formatters` transformations\r\n\t\t\tlet index = 0;\r\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\r\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\r\n\t\t\t\tif (match === '%%') {\r\n\t\t\t\t\treturn '%';\r\n\t\t\t\t}\r\n\t\t\t\tindex++;\r\n\t\t\t\tconst formatter = createDebug.formatters[format];\r\n\t\t\t\tif (typeof formatter === 'function') {\r\n\t\t\t\t\tconst val = args[index];\r\n\t\t\t\t\tmatch = formatter.call(self, val);\r\n\r\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\r\n\t\t\t\t\targs.splice(index, 1);\r\n\t\t\t\t\tindex--;\r\n\t\t\t\t}\r\n\t\t\t\treturn match;\r\n\t\t\t});\r\n\r\n\t\t\t// Apply env-specific formatting (colors, etc.)\r\n\t\t\tcreateDebug.formatArgs.call(self, args);\r\n\r\n\t\t\tconst logFn = self.log || createDebug.log;\r\n\t\t\tlogFn.apply(self, args);\r\n\t\t}\r\n\r\n\t\tdebug.namespace = namespace;\r\n\t\tdebug.useColors = createDebug.useColors();\r\n\t\tdebug.color = createDebug.selectColor(namespace);\r\n\t\tdebug.extend = extend;\r\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\r\n\r\n\t\tObject.defineProperty(debug, 'enabled', {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: () => {\r\n\t\t\t\tif (enableOverride !== null) {\r\n\t\t\t\t\treturn enableOverride;\r\n\t\t\t\t}\r\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\r\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\r\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn enabledCache;\r\n\t\t\t},\r\n\t\t\tset: v => {\r\n\t\t\t\tenableOverride = v;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Env-specific initialization logic for debug instances\r\n\t\tif (typeof createDebug.init === 'function') {\r\n\t\t\tcreateDebug.init(debug);\r\n\t\t}\r\n\r\n\t\treturn debug;\r\n\t}\r\n\r\n\tfunction extend(namespace, delimiter) {\r\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\r\n\t\tnewDebug.log = this.log;\r\n\t\treturn newDebug;\r\n\t}\r\n\r\n\t/**\r\n\t* Enables a debug mode by namespaces. This can include modes\r\n\t* separated by a colon and wildcards.\r\n\t*\r\n\t* @param {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction enable(namespaces) {\r\n\t\tcreateDebug.save(namespaces);\r\n\t\tcreateDebug.namespaces = namespaces;\r\n\r\n\t\tcreateDebug.names = [];\r\n\t\tcreateDebug.skips = [];\r\n\r\n\t\tlet i;\r\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\r\n\t\tconst len = split.length;\r\n\r\n\t\tfor (i = 0; i < len; i++) {\r\n\t\t\tif (!split[i]) {\r\n\t\t\t\t// ignore empty strings\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\r\n\r\n\t\t\tif (namespaces[0] === '-') {\r\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\r\n\t\t\t} else {\r\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* Disable debug output.\r\n\t*\r\n\t* @return {String} namespaces\r\n\t* @api public\r\n\t*/\r\n\tfunction disable() {\r\n\t\tconst namespaces = [\r\n\t\t\t...createDebug.names.map(toNamespace),\r\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\r\n\t\t].join(',');\r\n\t\tcreateDebug.enable('');\r\n\t\treturn namespaces;\r\n\t}\r\n\r\n\t/**\r\n\t* Returns true if the given mode name is enabled, false otherwise.\r\n\t*\r\n\t* @param {String} name\r\n\t* @return {Boolean}\r\n\t* @api public\r\n\t*/\r\n\tfunction enabled(name) {\r\n\t\tif (name[name.length - 1] === '*') {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tlet i;\r\n\t\tlet len;\r\n\r\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\r\n\t\t\tif (createDebug.skips[i].test(name)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\r\n\t\t\tif (createDebug.names[i].test(name)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t* Convert regexp to namespace\r\n\t*\r\n\t* @param {RegExp} regxep\r\n\t* @return {String} namespace\r\n\t* @api private\r\n\t*/\r\n\tfunction toNamespace(regexp) {\r\n\t\treturn regexp.toString()\r\n\t\t\t.substring(2, regexp.toString().length - 2)\r\n\t\t\t.replace(/\\.\\*\\?$/, '*');\r\n\t}\r\n\r\n\t/**\r\n\t* Coerce `val`.\r\n\t*\r\n\t* @param {Mixed} val\r\n\t* @return {Mixed}\r\n\t* @api private\r\n\t*/\r\n\tfunction coerce(val) {\r\n\t\tif (val instanceof Error) {\r\n\t\t\treturn val.stack || val.message;\r\n\t\t}\r\n\t\treturn val;\r\n\t}\r\n\r\n\t/**\r\n\t* XXX DO NOT USE. This is a temporary stub function.\r\n\t* XXX It WILL be removed in the next major release.\r\n\t*/\r\n\tfunction destroy() {\r\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t}\r\n\r\n\tcreateDebug.enable(createDebug.load());\r\n\r\n\treturn createDebug;\r\n}\r\n\r\nmodule.exports = setup;\r\n", "/* eslint-env browser */\r\n\r\n/**\r\n * This is the web browser implementation of `debug()`.\r\n */\r\n\r\nexports.formatArgs = formatArgs;\r\nexports.save = save;\r\nexports.load = load;\r\nexports.useColors = useColors;\r\nexports.storage = localstorage();\r\nexports.destroy = (() => {\r\n\tlet warned = false;\r\n\r\n\treturn () => {\r\n\t\tif (!warned) {\r\n\t\t\twarned = true;\r\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\r\n\t\t}\r\n\t};\r\n})();\r\n\r\n/**\r\n * Colors.\r\n */\r\n\r\nexports.colors = [\r\n\t'#0000CC',\r\n\t'#0000FF',\r\n\t'#0033CC',\r\n\t'#0033FF',\r\n\t'#0066CC',\r\n\t'#0066FF',\r\n\t'#0099CC',\r\n\t'#0099FF',\r\n\t'#00CC00',\r\n\t'#00CC33',\r\n\t'#00CC66',\r\n\t'#00CC99',\r\n\t'#00CCCC',\r\n\t'#00CCFF',\r\n\t'#3300CC',\r\n\t'#3300FF',\r\n\t'#3333CC',\r\n\t'#3333FF',\r\n\t'#3366CC',\r\n\t'#3366FF',\r\n\t'#3399CC',\r\n\t'#3399FF',\r\n\t'#33CC00',\r\n\t'#33CC33',\r\n\t'#33CC66',\r\n\t'#33CC99',\r\n\t'#33CCCC',\r\n\t'#33CCFF',\r\n\t'#6600CC',\r\n\t'#6600FF',\r\n\t'#6633CC',\r\n\t'#6633FF',\r\n\t'#66CC00',\r\n\t'#66CC33',\r\n\t'#9900CC',\r\n\t'#9900FF',\r\n\t'#9933CC',\r\n\t'#9933FF',\r\n\t'#99CC00',\r\n\t'#99CC33',\r\n\t'#CC0000',\r\n\t'#CC0033',\r\n\t'#CC0066',\r\n\t'#CC0099',\r\n\t'#CC00CC',\r\n\t'#CC00FF',\r\n\t'#CC3300',\r\n\t'#CC3333',\r\n\t'#CC3366',\r\n\t'#CC3399',\r\n\t'#CC33CC',\r\n\t'#CC33FF',\r\n\t'#CC6600',\r\n\t'#CC6633',\r\n\t'#CC9900',\r\n\t'#CC9933',\r\n\t'#CCCC00',\r\n\t'#CCCC33',\r\n\t'#FF0000',\r\n\t'#FF0033',\r\n\t'#FF0066',\r\n\t'#FF0099',\r\n\t'#FF00CC',\r\n\t'#FF00FF',\r\n\t'#FF3300',\r\n\t'#FF3333',\r\n\t'#FF3366',\r\n\t'#FF3399',\r\n\t'#FF33CC',\r\n\t'#FF33FF',\r\n\t'#FF6600',\r\n\t'#FF6633',\r\n\t'#FF9900',\r\n\t'#FF9933',\r\n\t'#FFCC00',\r\n\t'#FFCC33'\r\n];\r\n\r\n/**\r\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\r\n * and the Firebug extension (any Firefox version) are known\r\n * to support \"%c\" CSS customizations.\r\n *\r\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\r\n */\r\n\r\n// eslint-disable-next-line complexity\r\nfunction useColors() {\r\n\t// NB: In an Electron preload script, document will be defined but not fully\r\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\r\n\t// explicitly\r\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// Internet Explorer and Edge do not support colors.\r\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\r\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\r\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\r\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\r\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\r\n\t\t// Is firefox >= v31?\r\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\r\n\t\t// Double check webkit in userAgent just in case we are in a worker\r\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\r\n}\r\n\r\n/**\r\n * Colorize log arguments if enabled.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction formatArgs(args) {\r\n\targs[0] = (this.useColors ? '%c' : '') +\r\n\t\tthis.namespace +\r\n\t\t(this.useColors ? ' %c' : ' ') +\r\n\t\targs[0] +\r\n\t\t(this.useColors ? '%c ' : ' ') +\r\n\t\t'+' + module.exports.humanize(this.diff);\r\n\r\n\tif (!this.useColors) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst c = 'color: ' + this.color;\r\n\targs.splice(1, 0, c, 'color: inherit');\r\n\r\n\t// The final \"%c\" is somewhat tricky, because there could be other\r\n\t// arguments passed either before or after the %c, so we need to\r\n\t// figure out the correct index to insert the CSS into\r\n\tlet index = 0;\r\n\tlet lastC = 0;\r\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\r\n\t\tif (match === '%%') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tindex++;\r\n\t\tif (match === '%c') {\r\n\t\t\t// We only are interested in the *last* %c\r\n\t\t\t// (the user may have provided their own)\r\n\t\t\tlastC = index;\r\n\t\t}\r\n\t});\r\n\r\n\targs.splice(lastC, 0, c);\r\n}\r\n\r\n/**\r\n * Invokes `console.debug()` when available.\r\n * No-op when `console.debug` is not a \"function\".\r\n * If `console.debug` is not available, falls back\r\n * to `console.log`.\r\n *\r\n * @api public\r\n */\r\nexports.log = console.debug || console.log || (() => {});\r\n\r\n/**\r\n * Save `namespaces`.\r\n *\r\n * @param {String} namespaces\r\n * @api private\r\n */\r\nfunction save(namespaces) {\r\n\ttry {\r\n\t\tif (namespaces) {\r\n\t\t\texports.storage.setItem('debug', namespaces);\r\n\t\t} else {\r\n\t\t\texports.storage.removeItem('debug');\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\n/**\r\n * Load `namespaces`.\r\n *\r\n * @return {String} returns the previously persisted debug modes\r\n * @api private\r\n */\r\nfunction load() {\r\n\tlet r;\r\n\ttry {\r\n\t\tr = exports.storage.getItem('debug');\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n\r\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\r\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\r\n\t\tr = process.env.DEBUG;\r\n\t}\r\n\r\n\treturn r;\r\n}\r\n\r\n/**\r\n * Localstorage attempts to return the localstorage.\r\n *\r\n * This is necessary because safari throws\r\n * when a user disables cookies/localstorage\r\n * and you attempt to access it.\r\n *\r\n * @return {LocalStorage}\r\n * @api private\r\n */\r\n\r\nfunction localstorage() {\r\n\ttry {\r\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\r\n\t\t// The Browser also has localStorage in the global context.\r\n\t\treturn localStorage;\r\n\t} catch (error) {\r\n\t\t// Swallow\r\n\t\t// XXX (@Qix-) should we be logging these?\r\n\t}\r\n}\r\n\r\nmodule.exports = require('./common')(exports);\r\n\r\nconst {formatters} = module.exports;\r\n\r\n/**\r\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\r\n */\r\n\r\nformatters.j = function (v) {\r\n\ttry {\r\n\t\treturn JSON.stringify(v);\r\n\t} catch (error) {\r\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\r\n\t}\r\n};\r\n", "export interface LRUCacheNodeOptions<TKey, TValue> {\r\n  next?: LRUCacheNode<TKey, TValue> | null;\r\n  prev?: LRUCacheNode<TKey, TValue> | null;\r\n  entryExpirationTimeInMS?: number | null;\r\n  onEntryEvicted?: (evictedEntry: { key: TKey; value: TValue; isExpired: boolean }) => void;\r\n  onEntryMarkedAsMostRecentlyUsed?: (entry: { key: TKey; value: TValue }) => void;\r\n  clone?: boolean;\r\n  cloneFn?: (value: TValue) => TValue;\r\n}\r\n\r\nexport class LRUCacheNode<TKey, TValue> {\r\n  public readonly key: TKey;\r\n\r\n  public readonly created: number;\r\n\r\n  public readonly entryExpirationTimeInMS: number | null;\r\n\r\n  public next: LRUCacheNode<TKey, TValue> | null;\r\n\r\n  public prev: LRUCacheNode<TKey, TValue> | null;\r\n\r\n  private readonly internalValue: TValue;\r\n\r\n  private readonly onEntryEvicted?: (evictedEntry: { key: TKey; value: TValue; isExpired: boolean }) => void;\r\n\r\n  private readonly onEntryMarkedAsMostRecentlyUsed?: (entry: { key: TKey; value: TValue }) => void;\r\n\r\n  private readonly cloneFn: (value: TValue) => TValue;\r\n\r\n  private readonly clone: boolean;\r\n\r\n  public constructor(key: TKey, value: TValue, options?: LRUCacheNodeOptions<TKey, TValue>) {\r\n    const {\r\n      entryExpirationTimeInMS = null,\r\n      next = null,\r\n      prev = null,\r\n      onEntryEvicted,\r\n      onEntryMarkedAsMostRecentlyUsed,\r\n      clone,\r\n      cloneFn\r\n    } = options ?? {};\r\n\r\n    if (\r\n      typeof entryExpirationTimeInMS === 'number' &&\r\n      (entryExpirationTimeInMS <= 0 || Number.isNaN(entryExpirationTimeInMS))\r\n    ) {\r\n      throw new Error('entryExpirationTimeInMS must either be null (no expiry) or greater than 0');\r\n    }\r\n\r\n    this.clone = clone ?? false;\r\n    this.cloneFn = cloneFn ?? this.defaultClone;\r\n\r\n    this.key = key;\r\n    this.internalValue = this.clone ? this.cloneFn(value) : value;\r\n    this.created = Date.now();\r\n    this.entryExpirationTimeInMS = entryExpirationTimeInMS;\r\n    this.next = next;\r\n    this.prev = prev;\r\n    this.onEntryEvicted = onEntryEvicted;\r\n    this.onEntryMarkedAsMostRecentlyUsed = onEntryMarkedAsMostRecentlyUsed;\r\n  }\r\n\r\n  public get value(): TValue {\r\n    return this.clone ? this.cloneFn(this.internalValue) : this.internalValue;\r\n  }\r\n\r\n  public get isExpired(): boolean {\r\n    return typeof this.entryExpirationTimeInMS === 'number' && Date.now() - this.created > this.entryExpirationTimeInMS;\r\n  }\r\n\r\n  public invokeOnEvicted(): void {\r\n    if (this.onEntryEvicted) {\r\n      const { key, value, isExpired } = this;\r\n      this.onEntryEvicted({ key, value, isExpired });\r\n    }\r\n  }\r\n\r\n  public invokeOnEntryMarkedAsMostRecentlyUsed(): void {\r\n    if (this.onEntryMarkedAsMostRecentlyUsed) {\r\n      const { key, value } = this;\r\n      this.onEntryMarkedAsMostRecentlyUsed({ key, value });\r\n    }\r\n  }\r\n\r\n  private defaultClone(value: TValue): TValue {\r\n    if (typeof value === 'boolean' || typeof value === 'string' || typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    return JSON.parse(JSON.stringify(value));\r\n  }\r\n}\r\n", "import { LRUCacheNode } from './LRUCacheNode';\r\n\r\nexport interface LRUCacheOptions<TKey, TValue> {\r\n  /**\r\n   * The max number of items the cache can hold. Once the cache reaches this number, the least recently used entries will start to be evicted to make room for new entries. Defaults to 25.\r\n   */\r\n  maxSize?: number;\r\n\r\n  /**\r\n   * The time to live for cache entries. Setting this to `null` will make entries never expire. Default value is `null`.\r\n   */\r\n  entryExpirationTimeInMS?: number | null;\r\n\r\n  /**\r\n   * Function to be called whenever an entry is evicted from the cache (when evicted due to needing to make room, is expired, or deleted using delete()). Passed argument is an object:\r\n   * ```typescript\r\n   * {\r\n   *   key: TKey;\r\n   *   value: TValue;\r\n   *   isExpired: boolean;\r\n   * }\r\n   * ```\r\n   */\r\n  onEntryEvicted?: (evictedEntry: { key: TKey; value: TValue; isExpired: boolean }) => void;\r\n\r\n  /**\r\n   * Function to be called whenever an entry is marked as recently used (on set, get, find, etc). Passed argument is an object:\r\n   * ```typescript\r\n   * {\r\n   *   key: TKey;\r\n   *   value: TValue;\r\n   * }\r\n   * ```\r\n   */\r\n  onEntryMarkedAsMostRecentlyUsed?: (entry: { key: TKey; value: TValue }) => void;\r\n\r\n  /**\r\n   * Clone values being set and fetched from the cache (clones on set and any retrievals). Useful to maintain immutability.\r\n   * NOTE! This does come with performance overhead (almost twice as slow). Defaults to false.\r\n   */\r\n  clone?: boolean;\r\n\r\n  /**\r\n   * Custom function to be used with the `clone` option. If not passed, `JSON.parse(JSON.stringify(value))` is used for cloning objects.\r\n   */\r\n  cloneFn?: (value: TValue) => TValue;\r\n}\r\n\r\nexport interface LRUCacheSetEntryOptions<TKey, TValue> {\r\n  /**\r\n   * The time to live for this cache entry. Setting this to `null` will make entry never expire. Default value is `null`.\r\n   */\r\n  entryExpirationTimeInMS?: number | null;\r\n\r\n  /**\r\n   * Function to be called whenever _this_ entry is evicted from the cache (when evicted due to needing to make room, is expired, or deleted using delete()). Passed argument is an object:\r\n   * ```typescript\r\n   *  {\r\n   *    key: TKey;\r\n   *    value: TValue;\r\n   *    isExpired: boolean;\r\n   *  }\r\n   * ```\r\n   */\r\n  onEntryEvicted?: (evictedEntry: { key: TKey; value: TValue; isExpired: boolean }) => void;\r\n\r\n  /**\r\n   * Function to be called whenever _this_ entry is marked as recently used (on set, get, find, etc). Passed argument is an object:\r\n   * ```typescript\r\n   *  {\r\n   *    key: TKey;\r\n   *    value: TValue;\r\n   *  }\r\n   * ```\r\n   */\r\n  onEntryMarkedAsMostRecentlyUsed?: (entry: { key: TKey; value: TValue }) => void;\r\n\r\n  /**\r\n   * Clone values being set and fetched from the cache (clones on set and any retrievals). Useful to maintain immutability.\r\n   * NOTE! This does come with performance overhead (almost twice as slow). Defaults to false.\r\n   */\r\n  clone?: boolean;\r\n\r\n  /**\r\n   * Custom function to be used with the `clone` option. If not passed, `JSON.parse(JSON.stringify(value))` is used for cloning objects.\r\n   */\r\n  cloneFn?: (value: TValue) => TValue;\r\n}\r\n\r\nexport interface LRUCacheEntry<TKey, TValue> {\r\n  key: TKey;\r\n  value: TValue;\r\n}\r\n\r\n/**\r\n * A key value cache that implements the LRU policy.\r\n *\r\n * @typeparam TKey The type of the keys in the cache. Defaults to `string`.\r\n * @typeparam TValue The type of the values in the cache. Defaults to `any`.\r\n *\r\n * @see {@link https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)}\r\n */\r\nexport class LRUCache<TKey = string, TValue = any> implements Iterable<LRUCacheEntry<TKey, TValue>> {\r\n  private readonly lookupTable: Map<TKey, LRUCacheNode<TKey, TValue>> = new Map();\r\n\r\n  private readonly entryExpirationTimeInMS: number | null;\r\n\r\n  private readonly onEntryEvicted?: (evictedEntry: { key: TKey; value: TValue; isExpired: boolean }) => void;\r\n\r\n  private readonly onEntryMarkedAsMostRecentlyUsed?: (entry: { key: TKey; value: TValue }) => void;\r\n\r\n  private readonly cloneFn?: (value: TValue) => TValue;\r\n\r\n  private readonly clone?: boolean;\r\n\r\n  private maxSizeInternal: number;\r\n\r\n  private head: LRUCacheNode<TKey, TValue> | null = null;\r\n\r\n  private tail: LRUCacheNode<TKey, TValue> | null = null;\r\n\r\n  /**\r\n   * Creates a new instance of the LRUCache.\r\n   *\r\n   * @param options Additional configuration options for the LRUCache.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * // No options.\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // With options.\r\n   * const cache = new LRUCache({\r\n   *  entryExpirationTimeInMS: 10000\r\n   * });\r\n   * ```\r\n   */\r\n  public constructor(options?: LRUCacheOptions<TKey, TValue>) {\r\n    const {\r\n      maxSize = 25,\r\n      entryExpirationTimeInMS = null,\r\n      onEntryEvicted,\r\n      onEntryMarkedAsMostRecentlyUsed,\r\n      cloneFn,\r\n      clone\r\n    } = options ?? {};\r\n\r\n    if (Number.isNaN(maxSize) || maxSize <= 0) {\r\n      throw new Error('maxSize must be greater than 0.');\r\n    }\r\n\r\n    if (\r\n      typeof entryExpirationTimeInMS === 'number' &&\r\n      (entryExpirationTimeInMS <= 0 || Number.isNaN(entryExpirationTimeInMS))\r\n    ) {\r\n      throw new Error('entryExpirationTimeInMS must either be null (no expiry) or greater than 0');\r\n    }\r\n\r\n    this.maxSizeInternal = maxSize;\r\n    this.entryExpirationTimeInMS = entryExpirationTimeInMS;\r\n    this.onEntryEvicted = onEntryEvicted;\r\n    this.onEntryMarkedAsMostRecentlyUsed = onEntryMarkedAsMostRecentlyUsed;\r\n    this.clone = clone;\r\n    this.cloneFn = cloneFn;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of entries in the LRUCache object.\r\n   * If the cache has entryExpirationTimeInMS set, expired entries will be removed before the size is returned.\r\n   *\r\n   * @returns The number of entries in the cache.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * const size = cache.size;\r\n   *\r\n   * // Will log 1\r\n   * console.log(size);\r\n   * ```\r\n   */\r\n  public get size(): number {\r\n    this.cleanCache();\r\n    return this.lookupTable.size;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of entries that can still be added to the LRUCache without evicting existing entries.\r\n   *\r\n   * @returns The number of entries that can still be added without evicting existing entries.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache({ maxSize: 10 });\r\n   *\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * const remainingSize = cache.remainingSize;\r\n   *\r\n   * // Will log 9 due to 9 spots remaining before reaching maxSize of 10.\r\n   * console.log(remainingSize);\r\n   * ```\r\n   */\r\n  public get remainingSize(): number {\r\n    return this.maxSizeInternal - this.size;\r\n  }\r\n\r\n  /**\r\n   * Returns the most recently used (newest) entry in the cache.\r\n   * This will not mark the entry as recently used.\r\n   * If the newest node is expired, it will be removed.\r\n   *\r\n   * @returns The most recently used (newest) entry in the cache.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache({ maxSize: 10 });\r\n   *\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * const newest = cache.newest;\r\n   *\r\n   * // Will log testValue\r\n   * console.log(newest.value);\r\n   *\r\n   * // Will log testKey\r\n   * console.log(newest.key);\r\n   * ```\r\n   */\r\n  public get newest(): LRUCacheEntry<TKey, TValue> | null {\r\n    if (!this.head) {\r\n      return null;\r\n    }\r\n\r\n    if (this.head.isExpired) {\r\n      this.removeNodeFromListAndLookupTable(this.head);\r\n      return this.newest;\r\n    }\r\n\r\n    return this.mapNodeToEntry(this.head);\r\n  }\r\n\r\n  /**\r\n   * Returns the least recently used (oldest) entry in the cache.\r\n   * This will not mark the entry as recently used.\r\n   * If the oldest node is expired, it will be removed.\r\n   *\r\n   * @returns The least recently used (oldest) entry in the cache.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache({ maxSize: 10 });\r\n   *\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * const oldest = cache.oldest;\r\n   *\r\n   * // Will log testValue\r\n   * console.log(oldest.value);\r\n   *\r\n   * // Will log testKey\r\n   * console.log(oldest.key);\r\n   * ```\r\n   */\r\n  public get oldest(): LRUCacheEntry<TKey, TValue> | null {\r\n    if (!this.tail) {\r\n      return null;\r\n    }\r\n\r\n    if (this.tail.isExpired) {\r\n      this.removeNodeFromListAndLookupTable(this.tail);\r\n      return this.oldest;\r\n    }\r\n\r\n    return this.mapNodeToEntry(this.tail);\r\n  }\r\n\r\n  /**\r\n   * Gets or sets the maxSize of the cache.\r\n   * This will evict the least recently used entries if needed to reach new maxSize.\r\n   *\r\n   * @param value The new value for maxSize. Must be greater than 0.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache({ maxSize: 10 });\r\n   *\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Will be 10\r\n   * const maxSize = cache.maxSize;\r\n   *\r\n   * // Set new maxSize to 5. If there are more than 5 items in the cache, the least recently used entries will be removed until cache size is 5.\r\n   * cache.maxSize = 5;\r\n   * ```\r\n   */\r\n  public get maxSize(): number {\r\n    return this.maxSizeInternal;\r\n  }\r\n\r\n  public set maxSize(value: number) {\r\n    if (Number.isNaN(value) || value <= 0) {\r\n      throw new Error('maxSize must be greater than 0.');\r\n    }\r\n\r\n    this.maxSizeInternal = value;\r\n\r\n    this.enforceSizeLimit();\r\n  }\r\n\r\n  /**\r\n   * Sets the value for the key in the LRUCache object. Returns the LRUCache object.\r\n   * This marks the newly added entry as the most recently used entry.\r\n   * If adding the new entry makes the cache size go above maxSize,\r\n   * this will evict the least recently used entries until size is equal to maxSize.\r\n   *\r\n   * @param key The key of the entry.\r\n   * @param value The value to set for the key.\r\n   * @param entryOptions Additional configuration options for the cache entry.\r\n   *\r\n   * @returns The LRUCache instance.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Set the key key2 to value value2. Pass in optional options.\r\n   * cache.set('key2', 'value2', { entryExpirationTimeInMS: 10 });\r\n   * ```\r\n   */\r\n  public set(key: TKey, value: TValue, entryOptions?: LRUCacheSetEntryOptions<TKey, TValue>): LRUCache<TKey, TValue> {\r\n    const currentNodeForKey = this.lookupTable.get(key);\r\n\r\n    if (currentNodeForKey) {\r\n      this.removeNodeFromListAndLookupTable(currentNodeForKey);\r\n    }\r\n\r\n    const node = new LRUCacheNode(key, value, {\r\n      entryExpirationTimeInMS: this.entryExpirationTimeInMS,\r\n      onEntryEvicted: this.onEntryEvicted,\r\n      onEntryMarkedAsMostRecentlyUsed: this.onEntryMarkedAsMostRecentlyUsed,\r\n      clone: this.clone,\r\n      cloneFn: this.cloneFn,\r\n      ...entryOptions\r\n    });\r\n    this.setNodeAsHead(node);\r\n    this.lookupTable.set(key, node);\r\n\r\n    this.enforceSizeLimit();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns the value associated to the key, or null if there is none or if the entry is expired.\r\n   * If an entry is returned, this marks the returned entry as the most recently used entry.\r\n   *\r\n   * @param key The key of the entry to get.\r\n   *\r\n   * @returns The cached value or null.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Will be 'testValue'. Entry will now be most recently used.\r\n   * const item1 = cache.get('testKey');\r\n   *\r\n   * // Will be null\r\n   * const item2 = cache.get('keyNotInCache');\r\n   * ```\r\n   */\r\n  public get(key: TKey): TValue | null {\r\n    const node = this.lookupTable.get(key);\r\n\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    if (node.isExpired) {\r\n      this.removeNodeFromListAndLookupTable(node);\r\n      return null;\r\n    }\r\n\r\n    this.setNodeAsHead(node);\r\n\r\n    return node.value;\r\n  }\r\n\r\n  /**\r\n   * Returns the value associated to the key, or null if there is none or if the entry is expired.\r\n   * If an entry is returned, this will not mark the entry as most recently accessed.\r\n   * Useful if a value is needed but the order of the cache should not be changed.\r\n   *\r\n   * @param key The key of the entry to get.\r\n   *\r\n   * @returns The cached value or null.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Will be 'testValue'\r\n   * const item1 = cache.peek('testKey');\r\n   *\r\n   * // Will be null\r\n   * const item2 = cache.peek('keyNotInCache');\r\n   * ```\r\n   */\r\n  public peek(key: TKey): TValue | null {\r\n    const node = this.lookupTable.get(key);\r\n\r\n    if (!node) {\r\n      return null;\r\n    }\r\n\r\n    if (node.isExpired) {\r\n      this.removeNodeFromListAndLookupTable(node);\r\n      return null;\r\n    }\r\n\r\n    return node.value;\r\n  }\r\n\r\n  /**\r\n   * Deletes the entry for the passed in key.\r\n   *\r\n   * @param key The key of the entry to delete\r\n   *\r\n   * @returns True if an element in the LRUCache object existed and has been removed,\r\n   * or false if the element does not exist.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Will be true\r\n   * const wasDeleted = cache.delete('testKey');\r\n   *\r\n   * // Will be false\r\n   * const wasDeleted2 = cache.delete('keyNotInCache');\r\n   * ```\r\n   */\r\n  public delete(key: TKey): boolean {\r\n    const node = this.lookupTable.get(key);\r\n\r\n    if (!node) {\r\n      return false;\r\n    }\r\n\r\n    return this.removeNodeFromListAndLookupTable(node);\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean asserting whether a value has been associated to the key in the LRUCache object or not.\r\n   * This does not mark the entry as recently used.\r\n   * If the cache has a key but the entry is expired, it will be removed and false will be returned.\r\n   *\r\n   * @param key The key of the entry to check if exists\r\n   *\r\n   * @returns true if the cache contains the supplied key. False if not.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Will be true\r\n   * const wasDeleted = cache.has('testKey');\r\n   *\r\n   * // Will be false\r\n   * const wasDeleted2 = cache.has('keyNotInCache');\r\n   * ```\r\n   */\r\n  public has(key: TKey): boolean {\r\n    const node = this.lookupTable.get(key);\r\n\r\n    if (!node) {\r\n      return false;\r\n    }\r\n\r\n    if (node.isExpired) {\r\n      this.removeNodeFromListAndLookupTable(node);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Removes all entries in the cache.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // Clear cache.\r\n   * cache.clear();\r\n   * ```\r\n   */\r\n  public clear(): void {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.lookupTable.clear();\r\n  }\r\n\r\n  /**\r\n   * Searches the cache for an entry matching the passed in condition.\r\n   * Expired entries will be skipped (and removed).\r\n   * If multiply entries in the cache match the condition, the most recently used entry will be returned.\r\n   * If an entry is returned, this marks the returned entry as the most recently used entry.\r\n   *\r\n   * @param condition The condition to apply to each entry in the\r\n   *\r\n   * @returns The first cache entry to match the condition. Null if none match.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * // item will be { key: 'testKey', value: 'testValue }\r\n   * const item = cache.find(entry => {\r\n   *   const { key, value } = entry;\r\n   *\r\n   *   if (key === 'testKey' || value === 'something') {\r\n   *     return true;\r\n   *   }\r\n   *\r\n   *   return false;\r\n   * });\r\n   *\r\n   * // item2 will be null\r\n   * const item2 = cache.find(entry => entry.key === 'notInCache');\r\n   * ```\r\n   */\r\n  public find(condition: (entry: LRUCacheEntry<TKey, TValue>) => boolean): LRUCacheEntry<TKey, TValue> | null {\r\n    let node = this.head;\r\n\r\n    while (node) {\r\n      if (node.isExpired) {\r\n        const next = node.next;\r\n        this.removeNodeFromListAndLookupTable(node);\r\n        node = next;\r\n        continue;\r\n      }\r\n\r\n      const entry = this.mapNodeToEntry(node);\r\n\r\n      if (condition(entry)) {\r\n        this.setNodeAsHead(node);\r\n\r\n        return entry;\r\n      }\r\n\r\n      node = node.next;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Iterates over and applies the callback function to each entry in the cache.\r\n   * Iterates in order from most recently accessed entry to least recently.\r\n   * Expired entries will be skipped (and removed).\r\n   * No entry will be marked as recently used.\r\n   *\r\n   * @param callback the callback function to apply to the entry\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * cache.forEach((key, value, index) => {\r\n   *   // do something with key, value, and/or index\r\n   * });\r\n   * ```\r\n   */\r\n  public forEach(callback: (value: TValue, key: TKey, index: number) => void): void {\r\n    let node = this.head;\r\n    let index = 0;\r\n\r\n    while (node) {\r\n      if (node.isExpired) {\r\n        const next = node.next;\r\n        this.removeNodeFromListAndLookupTable(node);\r\n        node = next;\r\n        continue;\r\n      }\r\n\r\n      callback(node.value, node.key, index);\r\n      node = node.next;\r\n      index++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a Generator which can be used with for ... of ... to iterate over the cache values.\r\n   * Iterates in order from most recently accessed entry to least recently.\r\n   * Expired entries will be skipped (and removed).\r\n   * No entry will be marked as accessed.\r\n   *\r\n   * @returns A Generator for the cache values.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * for (const value of cache.values()) {\r\n   *   // do something with the value\r\n   * }\r\n   * ```\r\n   */\r\n  public *values(): Generator<TValue> {\r\n    let node = this.head;\r\n\r\n    while (node) {\r\n      if (node.isExpired) {\r\n        const next = node.next;\r\n        this.removeNodeFromListAndLookupTable(node);\r\n        node = next;\r\n        continue;\r\n      }\r\n\r\n      yield node.value;\r\n      node = node.next;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a Generator which can be used with for ... of ... to iterate over the cache keys.\r\n   * Iterates in order from most recently accessed entry to least recently.\r\n   * Expired entries will be skipped (and removed).\r\n   * No entry will be marked as accessed.\r\n   *\r\n   * @returns A Generator for the cache keys.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * for (const key of cache.keys()) {\r\n   *   // do something with the key\r\n   * }\r\n   * ```\r\n   */\r\n  public *keys(): Generator<TKey> {\r\n    let node = this.head;\r\n\r\n    while (node) {\r\n      if (node.isExpired) {\r\n        const next = node.next;\r\n        this.removeNodeFromListAndLookupTable(node);\r\n        node = next;\r\n        continue;\r\n      }\r\n\r\n      yield node.key;\r\n      node = node.next;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.\r\n   * Iterates in order from most recently accessed entry to least recently.\r\n   * Expired entries will be skipped (and removed).\r\n   * No entry will be marked as accessed.\r\n   *\r\n   * @returns A Generator for the cache entries.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * for (const entry of cache.entries()) {\r\n   *   const { key, value } = entry;\r\n   *   // do something with the entry\r\n   * }\r\n   * ```\r\n   */\r\n  public *entries(): Generator<LRUCacheEntry<TKey, TValue>> {\r\n    let node = this.head;\r\n\r\n    while (node) {\r\n      if (node.isExpired) {\r\n        const next = node.next;\r\n        this.removeNodeFromListAndLookupTable(node);\r\n        node = next;\r\n        continue;\r\n      }\r\n\r\n      yield this.mapNodeToEntry(node);\r\n      node = node.next;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates a Generator which can be used with for ... of ... to iterate over the cache entries.\r\n   * Iterates in order from most recently accessed entry to least recently.\r\n   * Expired entries will be skipped (and removed).\r\n   * No entry will be marked as accessed.\r\n   *\r\n   * @returns A Generator for the cache entries.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const cache = new LRUCache();\r\n   *\r\n   * // Set the key testKey to value testValue\r\n   * cache.set('testKey', 'testValue');\r\n   *\r\n   * for (const entry of cache) {\r\n   *   const { key, value } = entry;\r\n   *   // do something with the entry\r\n   * }\r\n   * ```\r\n   */\r\n  public *[Symbol.iterator](): Generator<LRUCacheEntry<TKey, TValue>> {\r\n    let node = this.head;\r\n\r\n    while (node) {\r\n      if (node.isExpired) {\r\n        const next = node.next;\r\n        this.removeNodeFromListAndLookupTable(node);\r\n        node = next;\r\n        continue;\r\n      }\r\n\r\n      yield this.mapNodeToEntry(node);\r\n      node = node.next;\r\n    }\r\n  }\r\n\r\n  private enforceSizeLimit(): void {\r\n    let node = this.tail;\r\n\r\n    while (node !== null && this.size > this.maxSizeInternal) {\r\n      const prev = node.prev;\r\n      this.removeNodeFromListAndLookupTable(node);\r\n      node = prev;\r\n    }\r\n  }\r\n\r\n  private mapNodeToEntry({ key, value }: LRUCacheNode<TKey, TValue>): LRUCacheEntry<TKey, TValue> {\r\n    return {\r\n      key,\r\n      value\r\n    };\r\n  }\r\n\r\n  private setNodeAsHead(node: LRUCacheNode<TKey, TValue>): void {\r\n    this.removeNodeFromList(node);\r\n\r\n    if (!this.head) {\r\n      this.head = node;\r\n      this.tail = node;\r\n    } else {\r\n      node.next = this.head;\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    node.invokeOnEntryMarkedAsMostRecentlyUsed();\r\n  }\r\n\r\n  private removeNodeFromList(node: LRUCacheNode<TKey, TValue>): void {\r\n    if (node.prev !== null) {\r\n      node.prev.next = node.next;\r\n    }\r\n\r\n    if (node.next !== null) {\r\n      node.next.prev = node.prev;\r\n    }\r\n\r\n    if (this.head === node) {\r\n      this.head = node.next;\r\n    }\r\n\r\n    if (this.tail === node) {\r\n      this.tail = node.prev;\r\n    }\r\n\r\n    node.next = null;\r\n    node.prev = null;\r\n  }\r\n\r\n  private removeNodeFromListAndLookupTable(node: LRUCacheNode<TKey, TValue>): boolean {\r\n    node.invokeOnEvicted();\r\n    this.removeNodeFromList(node);\r\n\r\n    return this.lookupTable.delete(node.key);\r\n  }\r\n\r\n  private cleanCache(): void {\r\n    // Don't spend time cleaning if entries don't expire.\r\n    if (!this.entryExpirationTimeInMS) {\r\n      return;\r\n    }\r\n\r\n    const expiredNodes: LRUCacheNode<TKey, TValue>[] = [];\r\n\r\n    for (const node of this.lookupTable.values()) {\r\n      if (node.isExpired) {\r\n        expiredNodes.push(node);\r\n      }\r\n    }\r\n\r\n    expiredNodes.forEach(node => this.removeNodeFromListAndLookupTable(node));\r\n  }\r\n}\r\n", "export * from './LRUCache';\r\n", "\"use strict\";\r\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\r\nfunction assertNumber(n) {\r\n    if (!Number.isSafeInteger(n))\r\n        throw new Error(`Wrong integer: ${n}`);\r\n}\r\nexports.assertNumber = assertNumber;\r\nfunction chain(...args) {\r\n    const wrap = (a, b) => (c) => a(b(c));\r\n    const encode = Array.from(args)\r\n        .reverse()\r\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\r\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\r\n    return { encode, decode };\r\n}\r\nfunction alphabet(alphabet) {\r\n    return {\r\n        encode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('alphabet.encode input should be an array of numbers');\r\n            return digits.map((i) => {\r\n                assertNumber(i);\r\n                if (i < 0 || i >= alphabet.length)\r\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\r\n                return alphabet[i];\r\n            });\r\n        },\r\n        decode: (input) => {\r\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\r\n                throw new Error('alphabet.decode input should be array of strings');\r\n            return input.map((letter) => {\r\n                if (typeof letter !== 'string')\r\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\r\n                const index = alphabet.indexOf(letter);\r\n                if (index === -1)\r\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\r\n                return index;\r\n            });\r\n        },\r\n    };\r\n}\r\nfunction join(separator = '') {\r\n    if (typeof separator !== 'string')\r\n        throw new Error('join separator should be string');\r\n    return {\r\n        encode: (from) => {\r\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\r\n                throw new Error('join.encode input should be array of strings');\r\n            for (let i of from)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`join.encode: non-string input=${i}`);\r\n            return from.join(separator);\r\n        },\r\n        decode: (to) => {\r\n            if (typeof to !== 'string')\r\n                throw new Error('join.decode input should be string');\r\n            return to.split(separator);\r\n        },\r\n    };\r\n}\r\nfunction padding(bits, chr = '=') {\r\n    assertNumber(bits);\r\n    if (typeof chr !== 'string')\r\n        throw new Error('padding chr should be string');\r\n    return {\r\n        encode(data) {\r\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\r\n                throw new Error('padding.encode input should be array of strings');\r\n            for (let i of data)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`padding.encode: non-string input=${i}`);\r\n            while ((data.length * bits) % 8)\r\n                data.push(chr);\r\n            return data;\r\n        },\r\n        decode(input) {\r\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\r\n                throw new Error('padding.encode input should be array of strings');\r\n            for (let i of input)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`padding.decode: non-string input=${i}`);\r\n            let end = input.length;\r\n            if ((end * bits) % 8)\r\n                throw new Error('Invalid padding: string should have whole number of bytes');\r\n            for (; end > 0 && input[end - 1] === chr; end--) {\r\n                if (!(((end - 1) * bits) % 8))\r\n                    throw new Error('Invalid padding: string has too much padding');\r\n            }\r\n            return input.slice(0, end);\r\n        },\r\n    };\r\n}\r\nfunction normalize(fn) {\r\n    if (typeof fn !== 'function')\r\n        throw new Error('normalize fn should be function');\r\n    return { encode: (from) => from, decode: (to) => fn(to) };\r\n}\r\nfunction convertRadix(data, from, to) {\r\n    if (from < 2)\r\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\r\n    if (to < 2)\r\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\r\n    if (!Array.isArray(data))\r\n        throw new Error('convertRadix: data should be array');\r\n    if (!data.length)\r\n        return [];\r\n    let pos = 0;\r\n    const res = [];\r\n    const digits = Array.from(data);\r\n    digits.forEach((d) => {\r\n        assertNumber(d);\r\n        if (d < 0 || d >= from)\r\n            throw new Error(`Wrong integer: ${d}`);\r\n    });\r\n    while (true) {\r\n        let carry = 0;\r\n        let done = true;\r\n        for (let i = pos; i < digits.length; i++) {\r\n            const digit = digits[i];\r\n            const digitBase = from * carry + digit;\r\n            if (!Number.isSafeInteger(digitBase) ||\r\n                (from * carry) / from !== carry ||\r\n                digitBase - digit !== from * carry) {\r\n                throw new Error('convertRadix: carry overflow');\r\n            }\r\n            carry = digitBase % to;\r\n            digits[i] = Math.floor(digitBase / to);\r\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\r\n                throw new Error('convertRadix: carry overflow');\r\n            if (!done)\r\n                continue;\r\n            else if (!digits[i])\r\n                pos = i;\r\n            else\r\n                done = false;\r\n        }\r\n        res.push(carry);\r\n        if (done)\r\n            break;\r\n    }\r\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\r\n        res.push(0);\r\n    return res.reverse();\r\n}\r\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\r\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\r\nfunction convertRadix2(data, from, to, padding) {\r\n    if (!Array.isArray(data))\r\n        throw new Error('convertRadix2: data should be array');\r\n    if (from <= 0 || from > 32)\r\n        throw new Error(`convertRadix2: wrong from=${from}`);\r\n    if (to <= 0 || to > 32)\r\n        throw new Error(`convertRadix2: wrong to=${to}`);\r\n    if (radix2carry(from, to) > 32) {\r\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\r\n    }\r\n    let carry = 0;\r\n    let pos = 0;\r\n    const mask = 2 ** to - 1;\r\n    const res = [];\r\n    for (const n of data) {\r\n        assertNumber(n);\r\n        if (n >= 2 ** from)\r\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\r\n        carry = (carry << from) | n;\r\n        if (pos + from > 32)\r\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\r\n        pos += from;\r\n        for (; pos >= to; pos -= to)\r\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\r\n        carry &= 2 ** pos - 1;\r\n    }\r\n    carry = (carry << (to - pos)) & mask;\r\n    if (!padding && pos >= from)\r\n        throw new Error('Excess padding');\r\n    if (!padding && carry)\r\n        throw new Error(`Non-zero padding: ${carry}`);\r\n    if (padding && pos > 0)\r\n        res.push(carry >>> 0);\r\n    return res;\r\n}\r\nfunction radix(num) {\r\n    assertNumber(num);\r\n    return {\r\n        encode: (bytes) => {\r\n            if (!(bytes instanceof Uint8Array))\r\n                throw new Error('radix.encode input should be Uint8Array');\r\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\r\n        },\r\n        decode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('radix.decode input should be array of strings');\r\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\r\n        },\r\n    };\r\n}\r\nfunction radix2(bits, revPadding = false) {\r\n    assertNumber(bits);\r\n    if (bits <= 0 || bits > 32)\r\n        throw new Error('radix2: bits should be in (0..32]');\r\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\r\n        throw new Error('radix2: carry overflow');\r\n    return {\r\n        encode: (bytes) => {\r\n            if (!(bytes instanceof Uint8Array))\r\n                throw new Error('radix2.encode input should be Uint8Array');\r\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\r\n        },\r\n        decode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('radix2.decode input should be array of strings');\r\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\r\n        },\r\n    };\r\n}\r\nfunction unsafeWrapper(fn) {\r\n    if (typeof fn !== 'function')\r\n        throw new Error('unsafeWrapper fn should be function');\r\n    return function (...args) {\r\n        try {\r\n            return fn.apply(null, args);\r\n        }\r\n        catch (e) { }\r\n    };\r\n}\r\nfunction checksum(len, fn) {\r\n    assertNumber(len);\r\n    if (typeof fn !== 'function')\r\n        throw new Error('checksum fn should be function');\r\n    return {\r\n        encode(data) {\r\n            if (!(data instanceof Uint8Array))\r\n                throw new Error('checksum.encode: input should be Uint8Array');\r\n            const checksum = fn(data).slice(0, len);\r\n            const res = new Uint8Array(data.length + len);\r\n            res.set(data);\r\n            res.set(checksum, data.length);\r\n            return res;\r\n        },\r\n        decode(data) {\r\n            if (!(data instanceof Uint8Array))\r\n                throw new Error('checksum.decode: input should be Uint8Array');\r\n            const payload = data.slice(0, -len);\r\n            const newChecksum = fn(payload).slice(0, len);\r\n            const oldChecksum = data.slice(-len);\r\n            for (let i = 0; i < len; i++)\r\n                if (newChecksum[i] !== oldChecksum[i])\r\n                    throw new Error('Invalid checksum');\r\n            return payload;\r\n        },\r\n    };\r\n}\r\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\r\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\r\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\r\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\r\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\r\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\r\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\r\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\r\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\r\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\r\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\r\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\r\nexports.base58xmr = {\r\n    encode(data) {\r\n        let res = '';\r\n        for (let i = 0; i < data.length; i += 8) {\r\n            const block = data.subarray(i, i + 8);\r\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\r\n        }\r\n        return res;\r\n    },\r\n    decode(str) {\r\n        let res = [];\r\n        for (let i = 0; i < str.length; i += 11) {\r\n            const slice = str.slice(i, i + 11);\r\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\r\n            const block = exports.base58.decode(slice);\r\n            for (let j = 0; j < block.length - blockLen; j++) {\r\n                if (block[j] !== 0)\r\n                    throw new Error('base58xmr: wrong padding');\r\n            }\r\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\r\n        }\r\n        return Uint8Array.from(res);\r\n    },\r\n};\r\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\r\nexports.base58check = base58check;\r\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\r\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\r\nfunction bech32Polymod(pre) {\r\n    const b = pre >> 25;\r\n    let chk = (pre & 0x1ffffff) << 5;\r\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\r\n        if (((b >> i) & 1) === 1)\r\n            chk ^= POLYMOD_GENERATORS[i];\r\n    }\r\n    return chk;\r\n}\r\nfunction bechChecksum(prefix, words, encodingConst = 1) {\r\n    const len = prefix.length;\r\n    let chk = 1;\r\n    for (let i = 0; i < len; i++) {\r\n        const c = prefix.charCodeAt(i);\r\n        if (c < 33 || c > 126)\r\n            throw new Error(`Invalid prefix (${prefix})`);\r\n        chk = bech32Polymod(chk) ^ (c >> 5);\r\n    }\r\n    chk = bech32Polymod(chk);\r\n    for (let i = 0; i < len; i++)\r\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\r\n    for (let v of words)\r\n        chk = bech32Polymod(chk) ^ v;\r\n    for (let i = 0; i < 6; i++)\r\n        chk = bech32Polymod(chk);\r\n    chk ^= encodingConst;\r\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\r\n}\r\nfunction genBech32(encoding) {\r\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\r\n    const _words = radix2(5);\r\n    const fromWords = _words.decode;\r\n    const toWords = _words.encode;\r\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\r\n    function encode(prefix, words, limit = 90) {\r\n        if (typeof prefix !== 'string')\r\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\r\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\r\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\r\n        const actualLength = prefix.length + 7 + words.length;\r\n        if (limit !== false && actualLength > limit)\r\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\r\n        prefix = prefix.toLowerCase();\r\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\r\n    }\r\n    function decode(str, limit = 90) {\r\n        if (typeof str !== 'string')\r\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\r\n        if (str.length < 8 || (limit !== false && str.length > limit))\r\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\r\n        const lowered = str.toLowerCase();\r\n        if (str !== lowered && str !== str.toUpperCase())\r\n            throw new Error(`String must be lowercase or uppercase`);\r\n        str = lowered;\r\n        const sepIndex = str.lastIndexOf('1');\r\n        if (sepIndex === 0 || sepIndex === -1)\r\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\r\n        const prefix = str.slice(0, sepIndex);\r\n        const _words = str.slice(sepIndex + 1);\r\n        if (_words.length < 6)\r\n            throw new Error('Data must be at least 6 characters long');\r\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\r\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\r\n        if (!_words.endsWith(sum))\r\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\r\n        return { prefix, words };\r\n    }\r\n    const decodeUnsafe = unsafeWrapper(decode);\r\n    function decodeToBytes(str) {\r\n        const { prefix, words } = decode(str, false);\r\n        return { prefix, words, bytes: fromWords(words) };\r\n    }\r\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\r\n}\r\nexports.bech32 = genBech32('bech32');\r\nexports.bech32m = genBech32('bech32m');\r\nexports.utf8 = {\r\n    encode: (data) => new TextDecoder().decode(data),\r\n    decode: (str) => new TextEncoder().encode(str),\r\n};\r\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\r\n    if (typeof s !== 'string' || s.length % 2)\r\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\r\n    return s.toLowerCase();\r\n}));\r\nconst CODERS = {\r\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\r\n};\r\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\r\nconst bytesToString = (type, bytes) => {\r\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\r\n        throw new TypeError(coderTypeError);\r\n    if (!(bytes instanceof Uint8Array))\r\n        throw new TypeError('bytesToString() expects Uint8Array');\r\n    return CODERS[type].encode(bytes);\r\n};\r\nexports.bytesToString = bytesToString;\r\nexports.str = exports.bytesToString;\r\nconst stringToBytes = (type, str) => {\r\n    if (!CODERS.hasOwnProperty(type))\r\n        throw new TypeError(coderTypeError);\r\n    if (typeof str !== 'string')\r\n        throw new TypeError('stringToBytes() expects string');\r\n    return CODERS[type].decode(str);\r\n};\r\nexports.stringToBytes = stringToBytes;\r\nexports.bytes = exports.stringToBytes;\r\n", "const {bech32, hex, utf8} = require('@scure/base')\r\n\r\n// defaults for encode; default timestamp is current time at call\r\nconst DEFAULTNETWORK = {\r\n  // default network is bitcoin\r\n  bech32: 'bc',\r\n  pubKeyHash: 0x00,\r\n  scriptHash: 0x05,\r\n  validWitnessVersions: [0]\r\n}\r\nconst TESTNETWORK = {\r\n  bech32: 'tb',\r\n  pubKeyHash: 0x6f,\r\n  scriptHash: 0xc4,\r\n  validWitnessVersions: [0]\r\n}\r\nconst SIGNETNETWORK = {\r\n  bech32: 'tbs',\r\n  pubKeyHash: 0x6f,\r\n  scriptHash: 0xc4,\r\n  validWitnessVersions: [0]\r\n}\r\nconst REGTESTNETWORK = {\r\n  bech32: 'bcrt',\r\n  pubKeyHash: 0x6f,\r\n  scriptHash: 0xc4,\r\n  validWitnessVersions: [0]\r\n}\r\nconst SIMNETWORK = {\r\n  bech32: 'sb',\r\n  pubKeyHash: 0x3f,\r\n  scriptHash: 0x7b,\r\n  validWitnessVersions: [0]\r\n}\r\n\r\nconst FEATUREBIT_ORDER = [\r\n  'option_data_loss_protect',\r\n  'initial_routing_sync',\r\n  'option_upfront_shutdown_script',\r\n  'gossip_queries',\r\n  'var_onion_optin',\r\n  'gossip_queries_ex',\r\n  'option_static_remotekey',\r\n  'payment_secret',\r\n  'basic_mpp',\r\n  'option_support_large_channel'\r\n]\r\n\r\nconst DIVISORS = {\r\n  m: BigInt(1e3),\r\n  u: BigInt(1e6),\r\n  n: BigInt(1e9),\r\n  p: BigInt(1e12)\r\n}\r\n\r\nconst MAX_MILLISATS = BigInt('2100000000000000000')\r\n\r\nconst MILLISATS_PER_BTC = BigInt(1e11)\r\n\r\nconst TAGCODES = {\r\n  payment_hash: 1,\r\n  payment_secret: 16,\r\n  description: 13,\r\n  payee: 19,\r\n  description_hash: 23, // commit to longer descriptions (used by lnurl-pay)\r\n  expiry: 6, // default: 3600 (1 hour)\r\n  min_final_cltv_expiry: 24, // default: 9\r\n  fallback_address: 9,\r\n  route_hint: 3, // for extra routing info (private etc.)\r\n  feature_bits: 5,\r\n  metadata: 27\r\n}\r\n\r\n// reverse the keys and values of TAGCODES and insert into TAGNAMES\r\nconst TAGNAMES = {}\r\nfor (let i = 0, keys = Object.keys(TAGCODES); i < keys.length; i++) {\r\n  const currentName = keys[i]\r\n  const currentCode = TAGCODES[keys[i]].toString()\r\n  TAGNAMES[currentCode] = currentName\r\n}\r\n\r\nconst TAGPARSERS = {\r\n  1: words => hex.encode(bech32.fromWordsUnsafe(words)), // 256 bits\r\n  16: words => hex.encode(bech32.fromWordsUnsafe(words)), // 256 bits\r\n  13: words => utf8.encode(bech32.fromWordsUnsafe(words)), // string variable length\r\n  19: words => hex.encode(bech32.fromWordsUnsafe(words)), // 264 bits\r\n  23: words => hex.encode(bech32.fromWordsUnsafe(words)), // 256 bits\r\n  27: words => hex.encode(bech32.fromWordsUnsafe(words)), // variable\r\n  6: wordsToIntBE, // default: 3600 (1 hour)\r\n  24: wordsToIntBE, // default: 9\r\n  3: routingInfoParser, // for extra routing info (private etc.)\r\n  5: featureBitsParser // keep feature bits as array of 5 bit words\r\n}\r\n\r\nfunction getUnknownParser(tagCode) {\r\n  return words => ({\r\n    tagCode: parseInt(tagCode),\r\n    words: bech32.encode('unknown', words, Number.MAX_SAFE_INTEGER)\r\n  })\r\n}\r\n\r\nfunction wordsToIntBE(words) {\r\n  return words.reverse().reduce((total, item, index) => {\r\n    return total + item * Math.pow(32, index)\r\n  }, 0)\r\n}\r\n\r\n// first convert from words to buffer, trimming padding where necessary\r\n// parse in 51 byte chunks. See encoder for details.\r\nfunction routingInfoParser(words) {\r\n  const routes = []\r\n  let pubkey,\r\n    shortChannelId,\r\n    feeBaseMSats,\r\n    feeProportionalMillionths,\r\n    cltvExpiryDelta\r\n  let routesBuffer = bech32.fromWordsUnsafe(words)\r\n  while (routesBuffer.length > 0) {\r\n    pubkey = hex.encode(routesBuffer.slice(0, 33)) // 33 bytes\r\n    shortChannelId = hex.encode(routesBuffer.slice(33, 41)) // 8 bytes\r\n    feeBaseMSats = parseInt(hex.encode(routesBuffer.slice(41, 45)), 16) // 4 bytes\r\n    feeProportionalMillionths = parseInt(\r\n      hex.encode(routesBuffer.slice(45, 49)),\r\n      16\r\n    ) // 4 bytes\r\n    cltvExpiryDelta = parseInt(hex.encode(routesBuffer.slice(49, 51)), 16) // 2 bytes\r\n\r\n    routesBuffer = routesBuffer.slice(51)\r\n\r\n    routes.push({\r\n      pubkey,\r\n      short_channel_id: shortChannelId,\r\n      fee_base_msat: feeBaseMSats,\r\n      fee_proportional_millionths: feeProportionalMillionths,\r\n      cltv_expiry_delta: cltvExpiryDelta\r\n    })\r\n  }\r\n  return routes\r\n}\r\n\r\nfunction featureBitsParser(words) {\r\n  const bools = words\r\n    .slice()\r\n    .reverse()\r\n    .map(word => [\r\n      !!(word & 0b1),\r\n      !!(word & 0b10),\r\n      !!(word & 0b100),\r\n      !!(word & 0b1000),\r\n      !!(word & 0b10000)\r\n    ])\r\n    .reduce((finalArr, itemArr) => finalArr.concat(itemArr), [])\r\n  while (bools.length < FEATUREBIT_ORDER.length * 2) {\r\n    bools.push(false)\r\n  }\r\n\r\n  const featureBits = {}\r\n\r\n  FEATUREBIT_ORDER.forEach((featureName, index) => {\r\n    let status\r\n    if (bools[index * 2]) {\r\n      status = 'required'\r\n    } else if (bools[index * 2 + 1]) {\r\n      status = 'supported'\r\n    } else {\r\n      status = 'unsupported'\r\n    }\r\n    featureBits[featureName] = status\r\n  })\r\n\r\n  const extraBits = bools.slice(FEATUREBIT_ORDER.length * 2)\r\n  featureBits.extra_bits = {\r\n    start_bit: FEATUREBIT_ORDER.length * 2,\r\n    bits: extraBits,\r\n    has_required: extraBits.reduce(\r\n      (result, bit, index) =>\r\n        index % 2 !== 0 ? result || false : result || bit,\r\n      false\r\n    )\r\n  }\r\n\r\n  return featureBits\r\n}\r\n\r\nfunction hrpToMillisat(hrpString, outputString) {\r\n  let divisor, value\r\n  if (hrpString.slice(-1).match(/^[munp]$/)) {\r\n    divisor = hrpString.slice(-1)\r\n    value = hrpString.slice(0, -1)\r\n  } else if (hrpString.slice(-1).match(/^[^munp0-9]$/)) {\r\n    throw new Error('Not a valid multiplier for the amount')\r\n  } else {\r\n    value = hrpString\r\n  }\r\n\r\n  if (!value.match(/^\\d+$/))\r\n    throw new Error('Not a valid human readable amount')\r\n\r\n  const valueBN = BigInt(value)\r\n\r\n  const millisatoshisBN = divisor\r\n    ? (valueBN * MILLISATS_PER_BTC) / DIVISORS[divisor]\r\n    : valueBN * MILLISATS_PER_BTC\r\n\r\n  if (\r\n    (divisor === 'p' && !(valueBN % BigInt(10) === BigInt(0))) ||\r\n    millisatoshisBN > MAX_MILLISATS\r\n  ) {\r\n    throw new Error('Amount is outside of valid range')\r\n  }\r\n\r\n  return outputString ? millisatoshisBN.toString() : millisatoshisBN\r\n}\r\n\r\n// decode will only have extra comments that aren't covered in encode comments.\r\n// also if anything is hard to read I'll comment.\r\nfunction decode(paymentRequest, network) {\r\n  if (typeof paymentRequest !== 'string')\r\n    throw new Error('Lightning Payment Request must be string')\r\n  if (paymentRequest.slice(0, 2).toLowerCase() !== 'ln')\r\n    throw new Error('Not a proper lightning payment request')\r\n\r\n  const sections = []\r\n  const decoded = bech32.decode(paymentRequest, Number.MAX_SAFE_INTEGER)\r\n  paymentRequest = paymentRequest.toLowerCase()\r\n  const prefix = decoded.prefix\r\n  let words = decoded.words\r\n  let letters = paymentRequest.slice(prefix.length + 1)\r\n  let sigWords = words.slice(-104)\r\n  words = words.slice(0, -104)\r\n\r\n  // Without reverse lookups, can't say that the multipier at the end must\r\n  // have a number before it, so instead we parse, and if the second group\r\n  // doesn't have anything, there's a good chance the last letter of the\r\n  // coin type got captured by the third group, so just re-regex without\r\n  // the number.\r\n  let prefixMatches = prefix.match(/^ln(\\S+?)(\\d*)([a-zA-Z]?)$/)\r\n  if (prefixMatches && !prefixMatches[2])\r\n    prefixMatches = prefix.match(/^ln(\\S+)$/)\r\n  if (!prefixMatches) {\r\n    throw new Error('Not a proper lightning payment request')\r\n  }\r\n\r\n  // \"ln\" section\r\n  sections.push({\r\n    name: 'lightning_network',\r\n    letters: 'ln'\r\n  })\r\n\r\n  // \"bc\" section\r\n  const bech32Prefix = prefixMatches[1]\r\n  let coinNetwork\r\n  if (!network) {\r\n    switch (bech32Prefix) {\r\n      case DEFAULTNETWORK.bech32:\r\n        coinNetwork = DEFAULTNETWORK\r\n        break\r\n      case TESTNETWORK.bech32:\r\n        coinNetwork = TESTNETWORK\r\n        break\r\n      case SIGNETNETWORK.bech32:\r\n        coinNetwork = SIGNETNETWORK\r\n        break\r\n      case REGTESTNETWORK.bech32:\r\n        coinNetwork = REGTESTNETWORK\r\n        break\r\n      case SIMNETWORK.bech32:\r\n        coinNetwork = SIMNETWORK\r\n        break\r\n    }\r\n  } else {\r\n    if (\r\n      network.bech32 === undefined ||\r\n      network.pubKeyHash === undefined ||\r\n      network.scriptHash === undefined ||\r\n      !Array.isArray(network.validWitnessVersions)\r\n    )\r\n      throw new Error('Invalid network')\r\n    coinNetwork = network\r\n  }\r\n  if (!coinNetwork || coinNetwork.bech32 !== bech32Prefix) {\r\n    throw new Error('Unknown coin bech32 prefix')\r\n  }\r\n  sections.push({\r\n    name: 'coin_network',\r\n    letters: bech32Prefix,\r\n    value: coinNetwork\r\n  })\r\n\r\n  // amount section\r\n  const value = prefixMatches[2]\r\n  let millisatoshis\r\n  if (value) {\r\n    const divisor = prefixMatches[3]\r\n    millisatoshis = hrpToMillisat(value + divisor, true)\r\n    sections.push({\r\n      name: 'amount',\r\n      letters: prefixMatches[2] + prefixMatches[3],\r\n      value: millisatoshis\r\n    })\r\n  } else {\r\n    millisatoshis = null\r\n  }\r\n\r\n  // \"1\" separator\r\n  sections.push({\r\n    name: 'separator',\r\n    letters: '1'\r\n  })\r\n\r\n  // timestamp\r\n  const timestamp = wordsToIntBE(words.slice(0, 7))\r\n  words = words.slice(7) // trim off the left 7 words\r\n  sections.push({\r\n    name: 'timestamp',\r\n    letters: letters.slice(0, 7),\r\n    value: timestamp\r\n  })\r\n  letters = letters.slice(7)\r\n\r\n  let tagName, parser, tagLength, tagWords\r\n  // we have no tag count to go on, so just keep hacking off words\r\n  // until we have none.\r\n  while (words.length > 0) {\r\n    const tagCode = words[0].toString()\r\n    tagName = TAGNAMES[tagCode] || 'unknown_tag'\r\n    parser = TAGPARSERS[tagCode] || getUnknownParser(tagCode)\r\n    words = words.slice(1)\r\n\r\n    tagLength = wordsToIntBE(words.slice(0, 2))\r\n    words = words.slice(2)\r\n\r\n    tagWords = words.slice(0, tagLength)\r\n    words = words.slice(tagLength)\r\n\r\n    sections.push({\r\n      name: tagName,\r\n      tag: letters[0],\r\n      letters: letters.slice(0, 1 + 2 + tagLength),\r\n      value: parser(tagWords) // see: parsers for more comments\r\n    })\r\n    letters = letters.slice(1 + 2 + tagLength)\r\n  }\r\n\r\n  // signature\r\n  sections.push({\r\n    name: 'signature',\r\n    letters: letters.slice(0, 104),\r\n    value: hex.encode(bech32.fromWordsUnsafe(sigWords))\r\n  })\r\n  letters = letters.slice(104)\r\n\r\n  // checksum\r\n  sections.push({\r\n    name: 'checksum',\r\n    letters: letters\r\n  })\r\n\r\n  let result = {\r\n    paymentRequest,\r\n    sections,\r\n\r\n    get expiry() {\r\n      let exp = sections.find(s => s.name === 'expiry')\r\n      if (exp) return getValue('timestamp') + exp.value\r\n    },\r\n\r\n    get route_hints() {\r\n      return sections.filter(s => s.name === 'route_hint').map(s => s.value)\r\n    }\r\n  }\r\n\r\n  for (let name in TAGCODES) {\r\n    if (name === 'route_hint') {\r\n      // route hints can be multiple, so this won't work for them\r\n      continue\r\n    }\r\n\r\n    Object.defineProperty(result, name, {\r\n      get() {\r\n        return getValue(name)\r\n      }\r\n    })\r\n  }\r\n\r\n  return result\r\n\r\n  function getValue(name) {\r\n    let section = sections.find(s => s.name === name)\r\n    return section ? section.value : undefined\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  decode,\r\n  hrpToMillisat\r\n}\r\n", "export function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\n\r\nexport function bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\r\n}\r\n\r\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nexport function hash(hash: Hash) {\r\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(hash.outputLen);\r\n  number(hash.blockLen);\r\n}\r\n\r\nexport function exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nexport function output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nconst assert = {\r\n  number,\r\n  bool,\r\n  bytes,\r\n  hash,\r\n  exists,\r\n  output,\r\n};\r\n\r\nexport default assert;\r\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated, we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n\r\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\r\n// early-throw an error because we don't support BE yet.\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\r\n\r\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const len = hex.length;\r\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n  const array = new Uint8Array(len / 2);\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = i * 2;\r\n    const hexByte = hex.slice(j, j + 2);\r\n    const byte = Number.parseInt(hexByte, 16);\r\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\r\n    array[i] = byte;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n  let pad = 0; // walk through each item, ensure they have proper type\r\n  arrays.forEach((a) => {\r\n    if (!u8a(a)) throw new Error('Uint8Array expected');\r\n    r.set(a, pad);\r\n    pad += a.length;\r\n  });\r\n  return r;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\n// Check if object doens't have custom constructor (like Uint8Array/Array)\r\nconst isPlainObject = (obj: any) =>\r\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\r\n\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "import assert from './_assert.js';\r\nimport { Hash, createView, Input, toBytes } from './utils.js';\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n// Base SHA2 class (RFC 6234)\r\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(\r\n    readonly blockLen: number,\r\n    public outputLen: number,\r\n    readonly padOffset: number,\r\n    readonly isLE: boolean\r\n  ) {\r\n    super();\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    assert.exists(this);\r\n    const { view, buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assert.exists(this);\r\n    assert.output(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    this.buffer.subarray(pos).fill(0);\r\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest() {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n}\r\n", "import { SHA2 } from './_sha2.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n\r\n// Choice: a ? b : c\r\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\r\n\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = new Uint32Array([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = new Uint32Array([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = new Uint32Array(64);\r\nclass SHA256 extends SHA2<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  A = IV[0] | 0;\r\n  B = IV[1] | 0;\r\n  C = IV[2] | 0;\r\n  D = IV[3] | 0;\r\n  E = IV[4] | 0;\r\n  F = IV[5] | 0;\r\n  G = IV[6] | 0;\r\n  H = IV[7] | 0;\r\n\r\n  constructor() {\r\n    super(64, 32, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ) {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean() {\r\n    SHA256_W.fill(0);\r\n  }\r\n  destroy() {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    this.buffer.fill(0);\r\n  }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n  A = 0xc1059ed8 | 0;\r\n  B = 0x367cd507 | 0;\r\n  C = 0x3070dd17 | 0;\r\n  D = 0xf70e5939 | 0;\r\n  E = 0xffc00b31 | 0;\r\n  F = 0x68581511 | 0;\r\n  G = 0x64f98fa7 | 0;\r\n  H = 0xbefa4fa4 | 0;\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = wrapConstructor(() => new SHA256());\r\nexport const sha224 = wrapConstructor(() => new SHA224());\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\r\n// This is OK: `abstract` directory does not use noble-hashes.\r\n// User may opt-in into using different hashing library. This way, noble-hashes\r\n// won't be included into their bundle.\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\r\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\r\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\r\nexport type CHash = {\r\n  (message: Uint8Array | string): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create(opts?: { dkLen?: number }): any; // For shake\r\n};\r\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\r\n\r\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\nexport function numberToHexUnpadded(num: number | bigint): string {\r\n  const hex = num.toString(16);\r\n  return hex.length & 1 ? `0${hex}` : hex;\r\n}\r\n\r\nexport function hexToNumber(hex: string): bigint {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  // Big Endian\r\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const len = hex.length;\r\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n  const array = new Uint8Array(len / 2);\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = i * 2;\r\n    const hexByte = hex.slice(j, j + 2);\r\n    const byte = Number.parseInt(hexByte, 16);\r\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\r\n    array[i] = byte;\r\n  }\r\n  return array;\r\n}\r\n\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\r\n  return hexToNumber(bytesToHex(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\r\n}\r\n\r\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\r\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\r\n  return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\r\n  return hexToBytes(numberToHexUnpadded(n));\r\n}\r\n\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'private key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\r\n  let res: Uint8Array;\r\n  if (typeof hex === 'string') {\r\n    try {\r\n      res = hexToBytes(hex);\r\n    } catch (e) {\r\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\r\n    }\r\n  } else if (u8a(hex)) {\r\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n    res = Uint8Array.from(hex);\r\n  } else {\r\n    throw new Error(`${title} must be hex string or Uint8Array`);\r\n  }\r\n  const len = res.length;\r\n  if (typeof expectedLength === 'number' && len !== expectedLength)\r\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\r\n  return res;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n  let pad = 0; // walk through each item, ensure they have proper type\r\n  arrays.forEach((a) => {\r\n    if (!u8a(a)) throw new Error('Uint8Array expected');\r\n    r.set(a, pad);\r\n    pad += a.length;\r\n  });\r\n  return r;\r\n}\r\n\r\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\r\n  // We don't care about timing attacks here\r\n  if (b1.length !== b2.length) return false;\r\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\r\n  return true;\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\n// Bit operations\r\n\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n */\r\nexport function bitLen(n: bigint) {\r\n  let len;\r\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\r\n  return len;\r\n}\r\n\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n: bigint, pos: number) {\r\n  return (n >> BigInt(pos)) & _1n;\r\n}\r\n\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\r\n  return n | ((value ? _1n : _0n) << BigInt(pos));\r\n};\r\n\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\r\n\r\n// DRBG\r\n\r\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\r\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\r\ntype Pred<T> = (v: Uint8Array) => T | undefined;\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg<T>(\r\n  hashLen: number,\r\n  qByteLen: number,\r\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\r\n): (seed: Uint8Array, predicate: Pred<T>) => T {\r\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\r\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\r\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\r\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n  let i = 0; // Iterations counter, will throw when over 1000\r\n  const reset = () => {\r\n    v.fill(1);\r\n    k.fill(0);\r\n    i = 0;\r\n  };\r\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n  const reseed = (seed = u8n()) => {\r\n    // HMAC-DRBG reseed() function. Steps D-G\r\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n    if (seed.length === 0) return;\r\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n  };\r\n  const gen = () => {\r\n    // HMAC-DRBG generate() function\r\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\r\n    let len = 0;\r\n    const out: Uint8Array[] = [];\r\n    while (len < qByteLen) {\r\n      v = h();\r\n      const sl = v.slice();\r\n      out.push(sl);\r\n      len += v.length;\r\n    }\r\n    return concatBytes(...out);\r\n  };\r\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\r\n    reset();\r\n    reseed(seed); // Steps D-G\r\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\r\n    while (!(res = pred(gen()))) reseed();\r\n    reset();\r\n    return res;\r\n  };\r\n  return genUntil;\r\n}\r\n\r\n// Validating curves and fields\r\n\r\nconst validatorFns = {\r\n  bigint: (val: any) => typeof val === 'bigint',\r\n  function: (val: any) => typeof val === 'function',\r\n  boolean: (val: any) => typeof val === 'boolean',\r\n  string: (val: any) => typeof val === 'string',\r\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\r\n  array: (val: any) => Array.isArray(val),\r\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\r\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n} as const;\r\ntype Validator = keyof typeof validatorFns;\r\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\n\r\nexport function validateObject<T extends Record<string, any>>(\r\n  object: T,\r\n  validators: ValMap<T>,\r\n  optValidators: ValMap<T> = {}\r\n) {\r\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\r\n    const checkVal = validatorFns[type];\r\n    if (typeof checkVal !== 'function')\r\n      throw new Error(`Invalid validator \"${type}\", expected function`);\r\n\r\n    const val = object[fieldName as keyof typeof object];\r\n    if (isOptional && val === undefined) return;\r\n    if (!checkVal(val, object)) {\r\n      throw new Error(\r\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\r\n      );\r\n    }\r\n  };\r\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\r\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\r\n  return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Utilities for modular arithmetics and finite fields\r\nimport {\r\n  bitMask,\r\n  numberToBytesBE,\r\n  numberToBytesLE,\r\n  bytesToNumberBE,\r\n  bytesToNumberLE,\r\n  ensureBytes,\r\n  validateObject,\r\n} from './utils.js';\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n// prettier-ignore\r\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\r\n// prettier-ignore\r\nconst _9n = BigInt(9), _16n = BigInt(16);\r\n\r\n// Calculates a modulo b\r\nexport function mod(a: bigint, b: bigint): bigint {\r\n  const result = a % b;\r\n  return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\n// TODO: use field version && remove\r\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\r\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\r\n  if (modulo === _1n) return _0n;\r\n  let res = _1n;\r\n  while (power > _0n) {\r\n    if (power & _1n) res = (res * num) % modulo;\r\n    num = (num * num) % modulo;\r\n    power >>= _1n;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\r\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\r\n  let res = x;\r\n  while (power-- > _0n) {\r\n    res *= res;\r\n    res %= modulo;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Inverses number over modulo\r\nexport function invert(number: bigint, modulo: bigint): bigint {\r\n  if (number === _0n || modulo <= _0n) {\r\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\r\n  }\r\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\r\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n  let a = mod(number, modulo);\r\n  let b = modulo;\r\n  // prettier-ignore\r\n  let x = _0n, y = _1n, u = _1n, v = _0n;\r\n  while (a !== _0n) {\r\n    // JIT applies optimization if those two lines follow each other\r\n    const q = b / a;\r\n    const r = b % a;\r\n    const m = x - u * q;\r\n    const n = y - v * q;\r\n    // prettier-ignore\r\n    b = a, a = r, x = u, y = v, u = m, v = n;\r\n  }\r\n  const gcd = b;\r\n  if (gcd !== _1n) throw new Error('invert: does not exist');\r\n  return mod(x, modulo);\r\n}\r\n\r\n// Tonelli-Shanks algorithm\r\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\r\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\r\nexport function tonelliShanks(P: bigint) {\r\n  // Legendre constant: used to calculate Legendre symbol (a | p),\r\n  // which denotes the value of a^((p-1)/2) (mod p).\r\n  // (a | p) ≡ 1    if a is a square (mod p)\r\n  // (a | p) ≡ -1   if a is not a square (mod p)\r\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n  const legendreC = (P - _1n) / _2n;\r\n\r\n  let Q: bigint, S: number, Z: bigint;\r\n  // Step 1: By factoring out powers of 2 from p - 1,\r\n  // find q and s such that p - 1 = q*(2^s) with q odd\r\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\r\n\r\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\r\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\r\n\r\n  // Fast-path\r\n  if (S === 1) {\r\n    const p1div4 = (P + _1n) / _4n;\r\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\r\n      const root = Fp.pow(n, p1div4);\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // Slow-path\r\n  const Q1div2 = (Q + _1n) / _2n;\r\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\r\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\r\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\r\n    let r = S;\r\n    // TODO: will fail at Fp2/etc\r\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\r\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\r\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\r\n\r\n    while (!Fp.eql(b, Fp.ONE)) {\r\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\r\n      // Find m such b^(2^m)==1\r\n      let m = 1;\r\n      for (let t2 = Fp.sqr(b); m < r; m++) {\r\n        if (Fp.eql(t2, Fp.ONE)) break;\r\n        t2 = Fp.sqr(t2); // t2 *= t2\r\n      }\r\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\r\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\r\n      g = Fp.sqr(ge); // g = ge * ge\r\n      x = Fp.mul(x, ge); // x *= ge\r\n      b = Fp.mul(b, g); // b *= g\r\n      r = m;\r\n    }\r\n    return x;\r\n  };\r\n}\r\n\r\nexport function FpSqrt(P: bigint) {\r\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\r\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n\r\n  // P ≡ 3 (mod 4)\r\n  // √n = n^((P+1)/4)\r\n  if (P % _4n === _3n) {\r\n    // Not all roots possible!\r\n    // const ORDER =\r\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\r\n    // const NUM = 72057594037927816n;\r\n    const p1div4 = (P + _1n) / _4n;\r\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\r\n      const root = Fp.pow(n, p1div4);\r\n      // Throw if root**2 != n\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\r\n  if (P % _8n === _5n) {\r\n    const c1 = (P - _5n) / _8n;\r\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\r\n      const n2 = Fp.mul(n, _2n);\r\n      const v = Fp.pow(n2, c1);\r\n      const nv = Fp.mul(n, v);\r\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // P ≡ 9 (mod 16)\r\n  if (P % _16n === _9n) {\r\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\r\n    // Means we cannot use sqrt for constants at all!\r\n    //\r\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n    // sqrt = (x) => {\r\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\r\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\r\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\r\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\r\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\r\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\r\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\r\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\r\n    // }\r\n  }\r\n\r\n  // Other cases: Tonelli-Shanks algorithm\r\n  return tonelliShanks(P);\r\n}\r\n\r\n// Little-endian check for first LE bit (last BE bit);\r\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\r\n\r\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\r\nexport interface IField<T> {\r\n  ORDER: bigint;\r\n  BYTES: number;\r\n  BITS: number;\r\n  MASK: bigint;\r\n  ZERO: T;\r\n  ONE: T;\r\n  // 1-arg\r\n  create: (num: T) => T;\r\n  isValid: (num: T) => boolean;\r\n  is0: (num: T) => boolean;\r\n  neg(num: T): T;\r\n  inv(num: T): T;\r\n  sqrt(num: T): T;\r\n  sqr(num: T): T;\r\n  // 2-args\r\n  eql(lhs: T, rhs: T): boolean;\r\n  add(lhs: T, rhs: T): T;\r\n  sub(lhs: T, rhs: T): T;\r\n  mul(lhs: T, rhs: T | bigint): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  div(lhs: T, rhs: T | bigint): T;\r\n  // N for NonNormalized (for now)\r\n  addN(lhs: T, rhs: T): T;\r\n  subN(lhs: T, rhs: T): T;\r\n  mulN(lhs: T, rhs: T | bigint): T;\r\n  sqrN(num: T): T;\r\n\r\n  // Optional\r\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\r\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\r\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\r\n  // legendre?(num: T): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  invertBatch: (lst: T[]) => T[];\r\n  toBytes(num: T): Uint8Array;\r\n  fromBytes(bytes: Uint8Array): T;\r\n  // If c is False, CMOV returns a, otherwise it returns b.\r\n  cmov(a: T, b: T, c: boolean): T;\r\n}\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n  'addN', 'subN', 'mulN', 'sqrN'\r\n] as const;\r\nexport function validateField<T>(field: IField<T>) {\r\n  const initial = {\r\n    ORDER: 'bigint',\r\n    MASK: 'bigint',\r\n    BYTES: 'isSafeInteger',\r\n    BITS: 'isSafeInteger',\r\n  } as Record<string, string>;\r\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\r\n    map[val] = 'function';\r\n    return map;\r\n  }, initial);\r\n  return validateObject(field, opts);\r\n}\r\n\r\n// Generic field functions\r\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\r\n  // Should have same speed as pow for bigints\r\n  // TODO: benchmark!\r\n  if (power < _0n) throw new Error('Expected power > 0');\r\n  if (power === _0n) return f.ONE;\r\n  if (power === _1n) return num;\r\n  let p = f.ONE;\r\n  let d = num;\r\n  while (power > _0n) {\r\n    if (power & _1n) p = f.mul(p, d);\r\n    d = f.sqr(d);\r\n    power >>= _1n;\r\n  }\r\n  return p;\r\n}\r\n\r\n// 0 is non-invertible: non-batched version will throw on 0\r\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\r\n  const tmp = new Array(nums.length);\r\n  // Walk from first to last, multiply them by each other MOD p\r\n  const lastMultiplied = nums.reduce((acc, num, i) => {\r\n    if (f.is0(num)) return acc;\r\n    tmp[i] = acc;\r\n    return f.mul(acc, num);\r\n  }, f.ONE);\r\n  // Invert last element\r\n  const inverted = f.inv(lastMultiplied);\r\n  // Walk from last to first, multiply them by inverted each other MOD p\r\n  nums.reduceRight((acc, num, i) => {\r\n    if (f.is0(num)) return acc;\r\n    tmp[i] = f.mul(acc, tmp[i]);\r\n    return f.mul(acc, num);\r\n  }, inverted);\r\n  return tmp;\r\n}\r\n\r\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\r\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\r\n}\r\n\r\n// This function returns True whenever the value x is a square in the field F.\r\nexport function FpIsSquare<T>(f: IField<T>) {\r\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\r\n  return (x: T): boolean => {\r\n    const p = f.pow(x, legendreConst);\r\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\r\n  };\r\n}\r\n\r\n// CURVE.n lengths\r\nexport function nLength(n: bigint, nBitLength?: number) {\r\n  // Bit size, byte size of CURVE.n\r\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n  const nByteLength = Math.ceil(_nBitLength / 8);\r\n  return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n\r\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\r\n/**\r\n * Initializes a galois field over prime. Non-primes are not supported for now.\r\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\r\n * Major performance gains:\r\n * a) non-normalized operations like mulN instead of mul\r\n * b) `Object.freeze`\r\n * c) Same object shape: never add or remove keys\r\n * @param ORDER prime positive bigint\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (def: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nexport function Field(\r\n  ORDER: bigint,\r\n  bitLen?: number,\r\n  isLE = false,\r\n  redef: Partial<IField<bigint>> = {}\r\n): Readonly<FpField> {\r\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\r\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\r\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\r\n  const sqrtP = FpSqrt(ORDER);\r\n  const f: Readonly<FpField> = Object.freeze({\r\n    ORDER,\r\n    BITS,\r\n    BYTES,\r\n    MASK: bitMask(BITS),\r\n    ZERO: _0n,\r\n    ONE: _1n,\r\n    create: (num) => mod(num, ORDER),\r\n    isValid: (num) => {\r\n      if (typeof num !== 'bigint')\r\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\r\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n    },\r\n    is0: (num) => num === _0n,\r\n    isOdd: (num) => (num & _1n) === _1n,\r\n    neg: (num) => mod(-num, ORDER),\r\n    eql: (lhs, rhs) => lhs === rhs,\r\n\r\n    sqr: (num) => mod(num * num, ORDER),\r\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n    pow: (num, power) => FpPow(f, num, power),\r\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n\r\n    // Same as above, but doesn't normalize\r\n    sqrN: (num) => num * num,\r\n    addN: (lhs, rhs) => lhs + rhs,\r\n    subN: (lhs, rhs) => lhs - rhs,\r\n    mulN: (lhs, rhs) => lhs * rhs,\r\n\r\n    inv: (num) => invert(num, ORDER),\r\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\r\n    invertBatch: (lst) => FpInvertBatch(f, lst),\r\n    // TODO: do we really need constant cmov?\r\n    // We don't have const-time bigints anyway, so probably will be not very useful\r\n    cmov: (a, b, c) => (c ? b : a),\r\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\r\n    fromBytes: (bytes) => {\r\n      if (bytes.length !== BYTES)\r\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\r\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n    },\r\n  } as FpField);\r\n  return Object.freeze(f);\r\n}\r\n\r\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\r\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\n\r\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\r\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n\r\n/**\r\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\r\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 40 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nexport function hashToPrivateScalar(\r\n  hash: string | Uint8Array,\r\n  groupOrder: bigint,\r\n  isLE = false\r\n): bigint {\r\n  hash = ensureBytes('privateHash', hash);\r\n  const hashLen = hash.length;\r\n  const minLen = nLength(groupOrder).nByteLength + 8;\r\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\r\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\r\n  return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Abelian group utilities\r\nimport { IField, validateField, nLength } from './modular.js';\r\nimport { validateObject } from './utils.js';\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n\r\nexport type AffinePoint<T> = {\r\n  x: T;\r\n  y: T;\r\n} & { z?: never; t?: never };\r\n\r\nexport interface Group<T extends Group<T>> {\r\n  double(): T;\r\n  negate(): T;\r\n  add(other: T): T;\r\n  subtract(other: T): T;\r\n  equals(other: T): boolean;\r\n  multiply(scalar: bigint): T;\r\n}\r\n\r\nexport type GroupConstructor<T> = {\r\n  BASE: T;\r\n  ZERO: T;\r\n};\r\nexport type Mapper<T> = (i: T[]) => T[];\r\n\r\n// Elliptic curve multiplication of Point by scalar. Fragile.\r\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n// Creates precomputation tables for fast multiplication:\r\n// - private scalar is split by fixed size windows of W bits\r\n// - every window point is collected from window's table & added to accumulator\r\n// - since windows are different, same point inside tables won't be accessed more than once per calc\r\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n// - +1 window is neccessary for wNAF\r\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\r\n// windows to be in different memory locations\r\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\r\n  const constTimeNegate = (condition: boolean, item: T): T => {\r\n    const neg = item.negate();\r\n    return condition ? neg : item;\r\n  };\r\n  const opts = (W: number) => {\r\n    const windows = Math.ceil(bits / W) + 1; // +1, because\r\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\r\n    return { windows, windowSize };\r\n  };\r\n  return {\r\n    constTimeNegate,\r\n    // non-const time multiplication ladder\r\n    unsafeLadder(elm: T, n: bigint) {\r\n      let p = c.ZERO;\r\n      let d: T = elm;\r\n      while (n > _0n) {\r\n        if (n & _1n) p = p.add(d);\r\n        d = d.double();\r\n        n >>= _1n;\r\n      }\r\n      return p;\r\n    },\r\n\r\n    /**\r\n     * Creates a wNAF precomputation window. Used for caching.\r\n     * Default window size is set by `utils.precompute()` and is equal to 8.\r\n     * Number of precomputed points depends on the curve size:\r\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n     * - 𝑊 is the window size\r\n     * - 𝑛 is the bitlength of the curve order.\r\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n     * @returns precomputed point tables flattened to a single array\r\n     */\r\n    precomputeWindow(elm: T, W: number): Group<T>[] {\r\n      const { windows, windowSize } = opts(W);\r\n      const points: T[] = [];\r\n      let p: T = elm;\r\n      let base = p;\r\n      for (let window = 0; window < windows; window++) {\r\n        base = p;\r\n        points.push(base);\r\n        // =1, because we skip zero\r\n        for (let i = 1; i < windowSize; i++) {\r\n          base = base.add(p);\r\n          points.push(base);\r\n        }\r\n        p = base.double();\r\n      }\r\n      return points;\r\n    },\r\n\r\n    /**\r\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n     * @param W window size\r\n     * @param precomputes precomputed tables\r\n     * @param n scalar (we don't check here, but should be less than curve order)\r\n     * @returns real and fake (for const-time) points\r\n     */\r\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\r\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\r\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\r\n      const { windows, windowSize } = opts(W);\r\n\r\n      let p = c.ZERO;\r\n      let f = c.BASE;\r\n\r\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\r\n      const maxNumber = 2 ** W;\r\n      const shiftBy = BigInt(W);\r\n\r\n      for (let window = 0; window < windows; window++) {\r\n        const offset = window * windowSize;\r\n        // Extract W bits.\r\n        let wbits = Number(n & mask);\r\n\r\n        // Shift number by W bits.\r\n        n >>= shiftBy;\r\n\r\n        // If the bits are bigger than max size, we'll split those.\r\n        // +224 => 256 - 32\r\n        if (wbits > windowSize) {\r\n          wbits -= maxNumber;\r\n          n += _1n;\r\n        }\r\n\r\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n        // there is negate now: it is possible that negated element from low value\r\n        // would be the same as high element, which will create carry into next window.\r\n        // It's not obvious how this can fail, but still worth investigating later.\r\n\r\n        // Check if we're onto Zero point.\r\n        // Add random point inside current window to f.\r\n        const offset1 = offset;\r\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\r\n        const cond1 = window % 2 !== 0;\r\n        const cond2 = wbits < 0;\r\n        if (wbits === 0) {\r\n          // The most important part for const-time getPublicKey\r\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\r\n        } else {\r\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\r\n        }\r\n      }\r\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\r\n      // Even if the variable is still unused, there are some checks which will\r\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\r\n      // At this point there is a way to F be infinity-point even if p is not,\r\n      // which makes it less const-time: around 1 bigint multiply.\r\n      return { p, f };\r\n    },\r\n\r\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\r\n      // @ts-ignore\r\n      const W: number = P._WINDOW_SIZE || 1;\r\n      // Calculate precomputes on a first run, reuse them after\r\n      let comp = precomputesMap.get(P);\r\n      if (!comp) {\r\n        comp = this.precomputeWindow(P, W) as T[];\r\n        if (W !== 1) {\r\n          precomputesMap.set(P, transform(comp));\r\n        }\r\n      }\r\n      return this.wNAF(W, comp, n);\r\n    },\r\n  };\r\n}\r\n\r\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\r\n// Though generator can be different (Fp2 / Fp6 for BLS).\r\nexport type BasicCurve<T> = {\r\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\r\n  n: bigint; // Curve order, total count of valid points in the field\r\n  nBitLength?: number; // bit length of curve order\r\n  nByteLength?: number; // byte length of curve order\r\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\r\n  hEff?: bigint; // Number to multiply to clear cofactor\r\n  Gx: T; // base point X coordinate\r\n  Gy: T; // base point Y coordinate\r\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\r\n};\r\n\r\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\r\n  validateField(curve.Fp);\r\n  validateObject(\r\n    curve,\r\n    {\r\n      n: 'bigint',\r\n      h: 'bigint',\r\n      Gx: 'field',\r\n      Gy: 'field',\r\n    },\r\n    {\r\n      nBitLength: 'isSafeInteger',\r\n      nByteLength: 'isSafeInteger',\r\n    }\r\n  );\r\n  // Set defaults\r\n  return Object.freeze({\r\n    ...nLength(curve.n, curve.nBitLength),\r\n    ...curve,\r\n    ...{ p: curve.Fp.ORDER },\r\n  } as const);\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\r\nimport * as mod from './modular.js';\r\nimport * as ut from './utils.js';\r\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\r\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\r\n\r\nexport type { AffinePoint };\r\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\r\ntype EndomorphismOpts = {\r\n  beta: bigint;\r\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n};\r\nexport type BasicWCurve<T> = BasicCurve<T> & {\r\n  // Params: a, b\r\n  a: T;\r\n  b: T;\r\n\r\n  // Optional params\r\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\r\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\r\n  // When a cofactor != 1, there can be an effective methods to:\r\n  // 1. Determine whether a point is torsion-free\r\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\r\n  // 2. Clear torsion component\r\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\r\n};\r\n\r\ntype Entropy = Hex | true;\r\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\r\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\r\n\r\n/**\r\n * ### Design rationale for types\r\n *\r\n * * Interaction between classes from different curves should fail:\r\n *   `k256.Point.BASE.add(p256.Point.BASE)`\r\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\r\n * * Different calls of `curve()` would return different classes -\r\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\r\n *   it won't affect others\r\n *\r\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\r\n *\r\n * We can use generic types via some param, like curve opts, but that would:\r\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\r\n *     which is hard to debug.\r\n *     2. Params can be generic and we can't enforce them to be constant value:\r\n *     if somebody creates curve from non-constant params,\r\n *     it would be allowed to interact with other curves with non-constant params\r\n *\r\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\r\n */\r\n\r\n// Instance for 3d XYZ points\r\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\r\n  readonly px: T;\r\n  readonly py: T;\r\n  readonly pz: T;\r\n  get x(): T;\r\n  get y(): T;\r\n  multiply(scalar: bigint): ProjPointType<T>;\r\n  toAffine(iz?: T): AffinePoint<T>;\r\n  isTorsionFree(): boolean;\r\n  clearCofactor(): ProjPointType<T>;\r\n  assertValidity(): void;\r\n  hasEvenY(): boolean;\r\n  toRawBytes(isCompressed?: boolean): Uint8Array;\r\n  toHex(isCompressed?: boolean): string;\r\n\r\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\r\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\r\n  _setWindowSize(windowSize: number): void;\r\n}\r\n// Static methods for 3d XYZ points\r\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\r\n  new (x: T, y: T, z: T): ProjPointType<T>;\r\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\r\n  fromHex(hex: Hex): ProjPointType<T>;\r\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\r\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\r\n}\r\n\r\nexport type CurvePointsType<T> = BasicWCurve<T> & {\r\n  // Bytes\r\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\r\n};\r\n\r\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\r\n  const opts = validateBasic(curve);\r\n  ut.validateObject(\r\n    opts,\r\n    {\r\n      a: 'field',\r\n      b: 'field',\r\n    },\r\n    {\r\n      allowedPrivateKeyLengths: 'array',\r\n      wrapPrivateKey: 'boolean',\r\n      isTorsionFree: 'function',\r\n      clearCofactor: 'function',\r\n      allowInfinityPoint: 'boolean',\r\n      fromBytes: 'function',\r\n      toBytes: 'function',\r\n    }\r\n  );\r\n  const { endo, Fp, a } = opts;\r\n  if (endo) {\r\n    if (!Fp.eql(a, Fp.ZERO)) {\r\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\r\n    }\r\n    if (\r\n      typeof endo !== 'object' ||\r\n      typeof endo.beta !== 'bigint' ||\r\n      typeof endo.splitScalar !== 'function'\r\n    ) {\r\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\r\n    }\r\n  }\r\n  return Object.freeze({ ...opts } as const);\r\n}\r\n\r\nexport type CurvePointsRes<T> = {\r\n  ProjectivePoint: ProjConstructor<T>;\r\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n  weierstrassEquation: (x: T) => T;\r\n  isWithinCurveOrder: (num: bigint) => boolean;\r\n};\r\n\r\n// ASN.1 DER encoding utilities\r\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\r\nexport const DER = {\r\n  // asn.1 DER encoding utils\r\n  Err: class DERErr extends Error {\r\n    constructor(m = '') {\r\n      super(m);\r\n    }\r\n  },\r\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\r\n    const { Err: E } = DER;\r\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\r\n    const len = data[1];\r\n    const res = data.subarray(2, len + 2);\r\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\r\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n    // since we always use positive integers here. It must always be empty:\r\n    // - add zero byte if exists\r\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\r\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\r\n      throw new E('Invalid signature integer: unnecessary leading zero');\r\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\r\n  },\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\r\n    // parse DER signature\r\n    const { Err: E } = DER;\r\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\r\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\r\n    let l = data.length;\r\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\r\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\r\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\r\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\r\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\r\n    return { r, s };\r\n  },\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\r\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\r\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\r\n    const h = (num: number | bigint) => {\r\n      const hex = num.toString(16);\r\n      return hex.length & 1 ? `0${hex}` : hex;\r\n    };\r\n    const s = slice(h(sig.s));\r\n    const r = slice(h(sig.r));\r\n    const shl = s.length / 2;\r\n    const rhl = r.length / 2;\r\n    const sl = h(shl);\r\n    const rl = h(rhl);\r\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\r\n  },\r\n};\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\n\r\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\r\n  const CURVE = validatePointOpts(opts);\r\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\r\n\r\n  const toBytes =\r\n    CURVE.toBytes ||\r\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\r\n      const a = point.toAffine();\r\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\r\n    });\r\n  const fromBytes =\r\n    CURVE.fromBytes ||\r\n    ((bytes: Uint8Array) => {\r\n      // const head = bytes[0];\r\n      const tail = bytes.subarray(1);\r\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\r\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n      return { x, y };\r\n    });\r\n\r\n  /**\r\n   * y² = x³ + ax + b: Short weierstrass curve formula\r\n   * @returns y²\r\n   */\r\n  function weierstrassEquation(x: T): T {\r\n    const { a, b } = CURVE;\r\n    const x2 = Fp.sqr(x); // x * x\r\n    const x3 = Fp.mul(x2, x); // x2 * x\r\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\r\n  }\r\n  // Validate whether the passed curve params are valid.\r\n  // We check if curve equation works for generator point.\r\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\r\n  // ProjectivePoint class has not been initialized yet.\r\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\r\n    throw new Error('bad generator point: equation left != right');\r\n\r\n  // Valid group elements reside in range 1..n-1\r\n  function isWithinCurveOrder(num: bigint): boolean {\r\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\r\n  }\r\n  function assertGE(num: bigint) {\r\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\r\n  }\r\n  // Validates if priv key is valid and converts it to bigint.\r\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\r\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\r\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\r\n    if (lengths && typeof key !== 'bigint') {\r\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\r\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\r\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\r\n      key = key.padStart(nByteLength * 2, '0');\r\n    }\r\n    let num: bigint;\r\n    try {\r\n      num =\r\n        typeof key === 'bigint'\r\n          ? key\r\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\r\n    } catch (error) {\r\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\r\n    }\r\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\r\n    assertGE(num); // num in range [1..N-1]\r\n    return num;\r\n  }\r\n\r\n  const pointPrecomputes = new Map<Point, Point[]>();\r\n  function assertPrjPoint(other: unknown) {\r\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\r\n  }\r\n  /**\r\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\r\n   * Default Point works in 2d / affine coordinates: (x, y)\r\n   * We're doing calculations in projective, because its operations don't require costly inversion.\r\n   */\r\n  class Point implements ProjPointType<T> {\r\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\r\n\r\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\r\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\r\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\r\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\r\n    }\r\n\r\n    // Does not validate if the point is on-curve.\r\n    // Use fromHex instead, or call assertValidity() later.\r\n    static fromAffine(p: AffinePoint<T>): Point {\r\n      const { x, y } = p || {};\r\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\r\n      if (p instanceof Point) throw new Error('projective point not allowed');\r\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\r\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\r\n      if (is0(x) && is0(y)) return Point.ZERO;\r\n      return new Point(x, y, Fp.ONE);\r\n    }\r\n\r\n    get x(): T {\r\n      return this.toAffine().x;\r\n    }\r\n    get y(): T {\r\n      return this.toAffine().y;\r\n    }\r\n\r\n    /**\r\n     * Takes a bunch of Projective Points but executes only one\r\n     * inversion on all of them. Inversion is very slow operation,\r\n     * so this improves performance massively.\r\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n     */\r\n    static normalizeZ(points: Point[]): Point[] {\r\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\r\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n    }\r\n\r\n    /**\r\n     * Converts hash string or Uint8Array to Point.\r\n     * @param hex short/long ECDSA hex\r\n     */\r\n    static fromHex(hex: Hex): Point {\r\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\r\n      P.assertValidity();\r\n      return P;\r\n    }\r\n\r\n    // Multiplies generator point by privateKey.\r\n    static fromPrivateKey(privateKey: PrivKey) {\r\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\r\n    }\r\n\r\n    // We calculate precomputes for elliptic curve point multiplication\r\n    // using windowed method. This specifies window size and\r\n    // stores precomputed values. Usually only base point would be precomputed.\r\n    _WINDOW_SIZE?: number;\r\n\r\n    // \"Private method\", don't use it directly\r\n    _setWindowSize(windowSize: number) {\r\n      this._WINDOW_SIZE = windowSize;\r\n      pointPrecomputes.delete(this);\r\n    }\r\n\r\n    // A point on curve is valid if it conforms to equation.\r\n    assertValidity(): void {\r\n      // Zero is valid point too!\r\n      if (this.is0()) {\r\n        if (CURVE.allowInfinityPoint) return;\r\n        throw new Error('bad point: ZERO');\r\n      }\r\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n      const { x, y } = this.toAffine();\r\n      // Check if x, y are valid field elements\r\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\r\n      const left = Fp.sqr(y); // y²\r\n      const right = weierstrassEquation(x); // x³ + ax + b\r\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\r\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\r\n    }\r\n    hasEvenY(): boolean {\r\n      const { y } = this.toAffine();\r\n      if (Fp.isOdd) return !Fp.isOdd(y);\r\n      throw new Error(\"Field doesn't support isOdd\");\r\n    }\r\n\r\n    /**\r\n     * Compare one point to another.\r\n     */\r\n    equals(other: Point): boolean {\r\n      assertPrjPoint(other);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      const { px: X2, py: Y2, pz: Z2 } = other;\r\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n      return U1 && U2;\r\n    }\r\n\r\n    /**\r\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\r\n     */\r\n    negate(): Point {\r\n      return new Point(this.px, Fp.neg(this.py), this.pz);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free doubling formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 3\r\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n    double() {\r\n      const { a, b } = CURVE;\r\n      const b3 = Fp.mul(b, _3n);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      let t0 = Fp.mul(X1, X1); // step 1\r\n      let t1 = Fp.mul(Y1, Y1);\r\n      let t2 = Fp.mul(Z1, Z1);\r\n      let t3 = Fp.mul(X1, Y1);\r\n      t3 = Fp.add(t3, t3); // step 5\r\n      Z3 = Fp.mul(X1, Z1);\r\n      Z3 = Fp.add(Z3, Z3);\r\n      X3 = Fp.mul(a, Z3);\r\n      Y3 = Fp.mul(b3, t2);\r\n      Y3 = Fp.add(X3, Y3); // step 10\r\n      X3 = Fp.sub(t1, Y3);\r\n      Y3 = Fp.add(t1, Y3);\r\n      Y3 = Fp.mul(X3, Y3);\r\n      X3 = Fp.mul(t3, X3);\r\n      Z3 = Fp.mul(b3, Z3); // step 15\r\n      t2 = Fp.mul(a, t2);\r\n      t3 = Fp.sub(t0, t2);\r\n      t3 = Fp.mul(a, t3);\r\n      t3 = Fp.add(t3, Z3);\r\n      Z3 = Fp.add(t0, t0); // step 20\r\n      t0 = Fp.add(Z3, t0);\r\n      t0 = Fp.add(t0, t2);\r\n      t0 = Fp.mul(t0, t3);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t2 = Fp.mul(Y1, Z1); // step 25\r\n      t2 = Fp.add(t2, t2);\r\n      t0 = Fp.mul(t2, t3);\r\n      X3 = Fp.sub(X3, t0);\r\n      Z3 = Fp.mul(t2, t1);\r\n      Z3 = Fp.add(Z3, Z3); // step 30\r\n      Z3 = Fp.add(Z3, Z3);\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free addition formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 1\r\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n    add(other: Point): Point {\r\n      assertPrjPoint(other);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      const { px: X2, py: Y2, pz: Z2 } = other;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      const a = CURVE.a;\r\n      const b3 = Fp.mul(CURVE.b, _3n);\r\n      let t0 = Fp.mul(X1, X2); // step 1\r\n      let t1 = Fp.mul(Y1, Y2);\r\n      let t2 = Fp.mul(Z1, Z2);\r\n      let t3 = Fp.add(X1, Y1);\r\n      let t4 = Fp.add(X2, Y2); // step 5\r\n      t3 = Fp.mul(t3, t4);\r\n      t4 = Fp.add(t0, t1);\r\n      t3 = Fp.sub(t3, t4);\r\n      t4 = Fp.add(X1, Z1);\r\n      let t5 = Fp.add(X2, Z2); // step 10\r\n      t4 = Fp.mul(t4, t5);\r\n      t5 = Fp.add(t0, t2);\r\n      t4 = Fp.sub(t4, t5);\r\n      t5 = Fp.add(Y1, Z1);\r\n      X3 = Fp.add(Y2, Z2); // step 15\r\n      t5 = Fp.mul(t5, X3);\r\n      X3 = Fp.add(t1, t2);\r\n      t5 = Fp.sub(t5, X3);\r\n      Z3 = Fp.mul(a, t4);\r\n      X3 = Fp.mul(b3, t2); // step 20\r\n      Z3 = Fp.add(X3, Z3);\r\n      X3 = Fp.sub(t1, Z3);\r\n      Z3 = Fp.add(t1, Z3);\r\n      Y3 = Fp.mul(X3, Z3);\r\n      t1 = Fp.add(t0, t0); // step 25\r\n      t1 = Fp.add(t1, t0);\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.mul(b3, t4);\r\n      t1 = Fp.add(t1, t2);\r\n      t2 = Fp.sub(t0, t2); // step 30\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.add(t4, t2);\r\n      t0 = Fp.mul(t1, t4);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t0 = Fp.mul(t5, t4); // step 35\r\n      X3 = Fp.mul(t3, X3);\r\n      X3 = Fp.sub(X3, t0);\r\n      t0 = Fp.mul(t3, t1);\r\n      Z3 = Fp.mul(t5, Z3);\r\n      Z3 = Fp.add(Z3, t0); // step 40\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    subtract(other: Point) {\r\n      return this.add(other.negate());\r\n    }\r\n\r\n    private is0() {\r\n      return this.equals(Point.ZERO);\r\n    }\r\n    private wNAF(n: bigint): { p: Point; f: Point } {\r\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\r\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\r\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n     * It's faster, but should only be used when you don't care about\r\n     * an exposed private key e.g. sig verification, which works over *public* keys.\r\n     */\r\n    multiplyUnsafe(n: bigint): Point {\r\n      const I = Point.ZERO;\r\n      if (n === _0n) return I;\r\n      assertGE(n); // Will throw on 0\r\n      if (n === _1n) return this;\r\n      const { endo } = CURVE;\r\n      if (!endo) return wnaf.unsafeLadder(this, n);\r\n\r\n      // Apply endomorphism\r\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n      let k1p = I;\r\n      let k2p = I;\r\n      let d: Point = this;\r\n      while (k1 > _0n || k2 > _0n) {\r\n        if (k1 & _1n) k1p = k1p.add(d);\r\n        if (k2 & _1n) k2p = k2p.add(d);\r\n        d = d.double();\r\n        k1 >>= _1n;\r\n        k2 >>= _1n;\r\n      }\r\n      if (k1neg) k1p = k1p.negate();\r\n      if (k2neg) k2p = k2p.negate();\r\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n      return k1p.add(k2p);\r\n    }\r\n\r\n    /**\r\n     * Constant time multiplication.\r\n     * Uses wNAF method. Windowed method may be 10% faster,\r\n     * but takes 2x longer to generate and consumes 2x memory.\r\n     * Uses precomputes when available.\r\n     * Uses endomorphism for Koblitz curves.\r\n     * @param scalar by which the point would be multiplied\r\n     * @returns New point\r\n     */\r\n    multiply(scalar: bigint): Point {\r\n      assertGE(scalar);\r\n      let n = scalar;\r\n      let point: Point, fake: Point; // Fake point is used to const-time mult\r\n      const { endo } = CURVE;\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n        let { p: k1p, f: f1p } = this.wNAF(k1);\r\n        let { p: k2p, f: f2p } = this.wNAF(k2);\r\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\r\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\r\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n        point = k1p.add(k2p);\r\n        fake = f1p.add(f2p);\r\n      } else {\r\n        const { p, f } = this.wNAF(n);\r\n        point = p;\r\n        fake = f;\r\n      }\r\n      // Normalize `z` for both points, but return only real one\r\n      return Point.normalizeZ([point, fake])[0];\r\n    }\r\n\r\n    /**\r\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\r\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\r\n     * The trick could be useful if both P and Q are not G (not in our case).\r\n     * @returns non-zero affine point\r\n     */\r\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\r\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\r\n      const mul = (\r\n        P: Point,\r\n        a: bigint // Select faster multiply() method\r\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\r\n      const sum = mul(this, a).add(mul(Q, b));\r\n      return sum.is0() ? undefined : sum;\r\n    }\r\n\r\n    // Converts Projective point to affine (x, y) coordinates.\r\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n    // (x, y, z) ∋ (x=x/z, y=y/z)\r\n    toAffine(iz?: T): AffinePoint<T> {\r\n      const { px: x, py: y, pz: z } = this;\r\n      const is0 = this.is0();\r\n      // If invZ was 0, we return zero point. However we still want to execute\r\n      // all operations, so we replace invZ with a random number, 1.\r\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\r\n      const ax = Fp.mul(x, iz);\r\n      const ay = Fp.mul(y, iz);\r\n      const zz = Fp.mul(z, iz);\r\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\r\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\r\n      return { x: ax, y: ay };\r\n    }\r\n    isTorsionFree(): boolean {\r\n      const { h: cofactor, isTorsionFree } = CURVE;\r\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\r\n      if (isTorsionFree) return isTorsionFree(Point, this);\r\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\r\n    }\r\n    clearCofactor(): Point {\r\n      const { h: cofactor, clearCofactor } = CURVE;\r\n      if (cofactor === _1n) return this; // Fast-path\r\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\r\n      return this.multiplyUnsafe(CURVE.h);\r\n    }\r\n\r\n    toRawBytes(isCompressed = true): Uint8Array {\r\n      this.assertValidity();\r\n      return toBytes(Point, this, isCompressed);\r\n    }\r\n\r\n    toHex(isCompressed = true): string {\r\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\r\n    }\r\n  }\r\n  const _bits = CURVE.nBitLength;\r\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\r\n  // Validate if generator point is on curve\r\n  return {\r\n    CURVE,\r\n    ProjectivePoint: Point as ProjConstructor<T>,\r\n    normPrivateKeyToScalar,\r\n    weierstrassEquation,\r\n    isWithinCurveOrder,\r\n  };\r\n}\r\n\r\n// Instance\r\nexport interface SignatureType {\r\n  readonly r: bigint;\r\n  readonly s: bigint;\r\n  readonly recovery?: number;\r\n  assertValidity(): void;\r\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\r\n  hasHighS(): boolean;\r\n  normalizeS(): SignatureType;\r\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\r\n  toCompactRawBytes(): Uint8Array;\r\n  toCompactHex(): string;\r\n  // DER-encoded\r\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\r\n  toDERHex(isCompressed?: boolean): string;\r\n}\r\nexport type RecoveredSignatureType = SignatureType & {\r\n  readonly recovery: number;\r\n};\r\n// Static methods\r\nexport type SignatureConstructor = {\r\n  new (r: bigint, s: bigint): SignatureType;\r\n  fromCompact(hex: Hex): SignatureType;\r\n  fromDER(hex: Hex): SignatureType;\r\n};\r\ntype SignatureLike = { r: bigint; s: bigint };\r\n\r\nexport type PubKey = Hex | ProjPointType<bigint>;\r\n\r\nexport type CurveType = BasicWCurve<bigint> & {\r\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\r\n  hmac: HmacFnSync;\r\n  randomBytes: (bytesLength?: number) => Uint8Array;\r\n  lowS?: boolean;\r\n  bits2int?: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\r\n};\r\n\r\nfunction validateOpts(curve: CurveType) {\r\n  const opts = validateBasic(curve);\r\n  ut.validateObject(\r\n    opts,\r\n    {\r\n      hash: 'hash',\r\n      hmac: 'function',\r\n      randomBytes: 'function',\r\n    },\r\n    {\r\n      bits2int: 'function',\r\n      bits2int_modN: 'function',\r\n      lowS: 'boolean',\r\n    }\r\n  );\r\n  return Object.freeze({ lowS: true, ...opts } as const);\r\n}\r\n\r\nexport type CurveFn = {\r\n  CURVE: ReturnType<typeof validateOpts>;\r\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\r\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\r\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\r\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\r\n  ProjectivePoint: ProjConstructor<bigint>;\r\n  Signature: SignatureConstructor;\r\n  utils: {\r\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n    isValidPrivateKey(privateKey: PrivKey): boolean;\r\n    randomPrivateKey: () => Uint8Array;\r\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\r\n  };\r\n};\r\n\r\nexport function weierstrass(curveDef: CurveType): CurveFn {\r\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\r\n  const { Fp, n: CURVE_ORDER } = CURVE;\r\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\r\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\r\n\r\n  function isValidFieldElement(num: bigint): boolean {\r\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\r\n  }\r\n  function modN(a: bigint) {\r\n    return mod.mod(a, CURVE_ORDER);\r\n  }\r\n  function invN(a: bigint) {\r\n    return mod.invert(a, CURVE_ORDER);\r\n  }\r\n\r\n  const {\r\n    ProjectivePoint: Point,\r\n    normPrivateKeyToScalar,\r\n    weierstrassEquation,\r\n    isWithinCurveOrder,\r\n  } = weierstrassPoints({\r\n    ...CURVE,\r\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\r\n      const a = point.toAffine();\r\n      const x = Fp.toBytes(a.x);\r\n      const cat = ut.concatBytes;\r\n      if (isCompressed) {\r\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\r\n      } else {\r\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\r\n      }\r\n    },\r\n    fromBytes(bytes: Uint8Array) {\r\n      const len = bytes.length;\r\n      const head = bytes[0];\r\n      const tail = bytes.subarray(1);\r\n      // this.assertValidity() is done inside of fromHex\r\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\r\n        const x = ut.bytesToNumberBE(tail);\r\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\r\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n        const isYOdd = (y & _1n) === _1n;\r\n        // ECDSA\r\n        const isHeadOdd = (head & 1) === 1;\r\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\r\n        return { x, y };\r\n      } else if (len === uncompressedLen && head === 0x04) {\r\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n        return { x, y };\r\n      } else {\r\n        throw new Error(\r\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\r\n        );\r\n      }\r\n    },\r\n  });\r\n  const numToNByteStr = (num: bigint): string =>\r\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\r\n\r\n  function isBiggerThanHalfOrder(number: bigint) {\r\n    const HALF = CURVE_ORDER >> _1n;\r\n    return number > HALF;\r\n  }\r\n\r\n  function normalizeS(s: bigint) {\r\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\r\n  }\r\n  // slice bytes num\r\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\r\n\r\n  /**\r\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\r\n   */\r\n  class Signature implements SignatureType {\r\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\r\n      this.assertValidity();\r\n    }\r\n\r\n    // pair (bytes of r, bytes of s)\r\n    static fromCompact(hex: Hex) {\r\n      const l = CURVE.nByteLength;\r\n      hex = ensureBytes('compactSignature', hex, l * 2);\r\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\r\n    }\r\n\r\n    // DER encoded ECDSA signature\r\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\r\n    static fromDER(hex: Hex) {\r\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\r\n      return new Signature(r, s);\r\n    }\r\n\r\n    assertValidity(): void {\r\n      // can use assertGE here\r\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\r\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\r\n    }\r\n\r\n    addRecoveryBit(recovery: number): RecoveredSignature {\r\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\r\n    }\r\n\r\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\r\n      const { r, s, recovery: rec } = this;\r\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\r\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\r\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\r\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\r\n      const prefix = (rec & 1) === 0 ? '02' : '03';\r\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\r\n      const ir = invN(radj); // r^-1\r\n      const u1 = modN(-h * ir); // -hr^-1\r\n      const u2 = modN(s * ir); // sr^-1\r\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\r\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\r\n      Q.assertValidity();\r\n      return Q;\r\n    }\r\n\r\n    // Signatures should be low-s, to prevent malleability.\r\n    hasHighS(): boolean {\r\n      return isBiggerThanHalfOrder(this.s);\r\n    }\r\n\r\n    normalizeS() {\r\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\r\n    }\r\n\r\n    // DER-encoded\r\n    toDERRawBytes() {\r\n      return ut.hexToBytes(this.toDERHex());\r\n    }\r\n    toDERHex() {\r\n      return DER.hexFromSig({ r: this.r, s: this.s });\r\n    }\r\n\r\n    // padded bytes of r, then padded bytes of s\r\n    toCompactRawBytes() {\r\n      return ut.hexToBytes(this.toCompactHex());\r\n    }\r\n    toCompactHex() {\r\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\r\n    }\r\n  }\r\n  type RecoveredSignature = Signature & { recovery: number };\r\n\r\n  const utils = {\r\n    isValidPrivateKey(privateKey: PrivKey) {\r\n      try {\r\n        normPrivateKeyToScalar(privateKey);\r\n        return true;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    },\r\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\r\n\r\n    /**\r\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\r\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\r\n     */\r\n    randomPrivateKey: (): Uint8Array => {\r\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\r\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\r\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\r\n    },\r\n\r\n    /**\r\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\r\n     * Allows to massively speed-up `point.multiply(scalar)`.\r\n     * @returns cached point\r\n     * @example\r\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\r\n     * fast.multiply(privKey); // much faster ECDH now\r\n     */\r\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\r\n      point._setWindowSize(windowSize);\r\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\r\n      return point;\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Computes public key for a private key. Checks for validity of the private key.\r\n   * @param privateKey private key\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n   */\r\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\r\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\r\n  }\r\n\r\n  /**\r\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n   */\r\n  function isProbPub(item: PrivKey | PubKey): boolean {\r\n    const arr = item instanceof Uint8Array;\r\n    const str = typeof item === 'string';\r\n    const len = (arr || str) && (item as Hex).length;\r\n    if (arr) return len === compressedLen || len === uncompressedLen;\r\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\r\n    if (item instanceof Point) return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * ECDH (Elliptic Curve Diffie Hellman).\r\n   * Computes shared public key from private key and public key.\r\n   * Checks: 1) private key validity 2) shared key is on-curve.\r\n   * Does NOT hash the result.\r\n   * @param privateA private key\r\n   * @param publicB different public key\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns shared public key\r\n   */\r\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\r\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\r\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\r\n    const b = Point.fromHex(publicB); // check for being on-curve\r\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\r\n  }\r\n\r\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n  const bits2int =\r\n    CURVE.bits2int ||\r\n    function (bytes: Uint8Array): bigint {\r\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n      // for some cases, since bytes.length * 8 is not actual bitLength.\r\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\r\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\r\n      return delta > 0 ? num >> BigInt(delta) : num;\r\n    };\r\n  const bits2int_modN =\r\n    CURVE.bits2int_modN ||\r\n    function (bytes: Uint8Array): bigint {\r\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\r\n    };\r\n  // NOTE: pads output with zero as per spec\r\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\r\n  /**\r\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\r\n   */\r\n  function int2octets(num: bigint): Uint8Array {\r\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\r\n    if (!(_0n <= num && num < ORDER_MASK))\r\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\r\n    // works with order, can have different size than numToField!\r\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\r\n  }\r\n\r\n  // Steps A, D of RFC6979 3.2\r\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\r\n  // Used only in sign, not in verify.\r\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\r\n  // Also it can be bigger for P224 + SHA256\r\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\r\n    if (['recovered', 'canonical'].some((k) => k in opts))\r\n      throw new Error('sign() legacy options not supported');\r\n    const { hash, randomBytes } = CURVE;\r\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\r\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\r\n\r\n    // We can't later call bits2octets, since nested bits2int is broken for curves\r\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n    const h1int = bits2int_modN(msgHash);\r\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\r\n    const seedArgs = [int2octets(d), int2octets(h1int)];\r\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n    if (ent != null) {\r\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\r\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\r\n    }\r\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n    // Converts signature params into point w r/s, checks result for validity.\r\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\r\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\r\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\r\n      const ik = invN(k); // k^-1 mod n\r\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\r\n      const r = modN(q.x); // r = q.x mod n\r\n      if (r === _0n) return;\r\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\r\n      if (s === _0n) return;\r\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n      let normS = s;\r\n      if (lowS && isBiggerThanHalfOrder(s)) {\r\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\r\n        recovery ^= 1; // // in the bottom half of N\r\n      }\r\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\r\n    }\r\n    return { seed, k2sig };\r\n  }\r\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\r\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\r\n\r\n  /**\r\n   * Signs message hash with a private key.\r\n   * ```\r\n   * sign(m, d, k) where\r\n   *   (x, y) = G × k\r\n   *   r = x mod n\r\n   *   s = (m + dr)/k mod n\r\n   * ```\r\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\r\n   * @param privKey private key\r\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\r\n   * @returns signature with recovery param\r\n   */\r\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\r\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\r\n    const C = CURVE;\r\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\r\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n  }\r\n\r\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n  Point.BASE._setWindowSize(8);\r\n  // utils.precompute(8, ProjectivePoint.BASE)\r\n\r\n  /**\r\n   * Verifies a signature against message hash and public key.\r\n   * Rejects lowS signatures by default: to override,\r\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n   *\r\n   * ```\r\n   * verify(r, s, h, P) where\r\n   *   U1 = hs^-1 mod n\r\n   *   U2 = rs^-1 mod n\r\n   *   R = U1⋅G - U2⋅P\r\n   *   mod(R.x, n) == r\r\n   * ```\r\n   */\r\n  function verify(\r\n    signature: Hex | SignatureLike,\r\n    msgHash: Hex,\r\n    publicKey: Hex,\r\n    opts = defaultVerOpts\r\n  ): boolean {\r\n    const sg = signature;\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    publicKey = ensureBytes('publicKey', publicKey);\r\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\r\n    const { lowS, prehash } = opts;\r\n\r\n    let _sig: Signature | undefined = undefined;\r\n    let P: ProjPointType<bigint>;\r\n    try {\r\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\r\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\r\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\r\n        try {\r\n          _sig = Signature.fromDER(sg);\r\n        } catch (derError) {\r\n          if (!(derError instanceof DER.Err)) throw derError;\r\n          _sig = Signature.fromCompact(sg);\r\n        }\r\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\r\n        const { r, s } = sg;\r\n        _sig = new Signature(r, s);\r\n      } else {\r\n        throw new Error('PARSE');\r\n      }\r\n      P = Point.fromHex(publicKey);\r\n    } catch (error) {\r\n      if ((error as Error).message === 'PARSE')\r\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\r\n      return false;\r\n    }\r\n    if (lowS && _sig.hasHighS()) return false;\r\n    if (prehash) msgHash = CURVE.hash(msgHash);\r\n    const { r, s } = _sig;\r\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\r\n    const is = invN(s); // s^-1\r\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\r\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\r\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\r\n    if (!R) return false;\r\n    const v = modN(R.x);\r\n    return v === r;\r\n  }\r\n  return {\r\n    CURVE,\r\n    getPublicKey,\r\n    getSharedSecret,\r\n    sign,\r\n    verify,\r\n    ProjectivePoint: Point,\r\n    Signature,\r\n    utils,\r\n  };\r\n}\r\n\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\r\n  // Generic implementation\r\n  const q = Fp.ORDER;\r\n  let l = _0n;\r\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\r\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n  // 2n ** c1 == 2n << (c1-1)\r\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\r\n    let tv1 = c6; // 1. tv1 = c6\r\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n    // 17. for i in (c1, c1 - 1, ..., 2):\r\n    for (let i = c1; i > _1n; i--) {\r\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n    }\r\n    return { isValid: isQR, value: tv3 };\r\n  };\r\n  if (Fp.ORDER % _4n === _3n) {\r\n    // sqrt_ratio_3mod4(u, v)\r\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n    sqrtRatio = (u: T, v: T) => {\r\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n    };\r\n  }\r\n  // No curves uses that\r\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n  return sqrtRatio;\r\n}\r\n/**\r\n * From draft-irtf-cfrg-hash-to-curve-16\r\n */\r\nexport function mapToCurveSimpleSWU<T>(\r\n  Fp: mod.IField<T>,\r\n  opts: {\r\n    A: T;\r\n    B: T;\r\n    Z: T;\r\n  }\r\n) {\r\n  mod.validateField(Fp);\r\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\r\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\r\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\r\n  // Input: u, an element of F.\r\n  // Output: (x, y), a point on E.\r\n  return (u: T): { x: T; y: T } => {\r\n    // prettier-ignore\r\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\r\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\r\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\r\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n    y = Fp.mul(y, value); // 20.   y = y * y1\r\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\r\n    return { x, y };\r\n  };\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\r\nimport { mod, IField } from './modular.js';\r\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\r\n\r\n/**\r\n * * `DST` is a domain separation tag, defined in section 2.2.5\r\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\r\n * * `m` is extension degree (1 for prime fields)\r\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\r\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\r\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\r\n */\r\ntype UnicodeOrBytes = string | Uint8Array;\r\nexport type Opts = {\r\n  DST: UnicodeOrBytes;\r\n  p: bigint;\r\n  m: number;\r\n  k: number;\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n};\r\n\r\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\r\n  if (dst instanceof Uint8Array) return dst;\r\n  if (typeof dst === 'string') return utf8ToBytes(dst);\r\n  throw new Error('DST must be Uint8Array or string');\r\n}\r\n\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = bytesToNumberBE;\r\n\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value: number, length: number): Uint8Array {\r\n  if (value < 0 || value >= 1 << (8 * length)) {\r\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\r\n  }\r\n  const res = Array.from({ length }).fill(0) as number[];\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    res[i] = value & 0xff;\r\n    value >>>= 8;\r\n  }\r\n  return new Uint8Array(res);\r\n}\r\n\r\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const arr = new Uint8Array(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    arr[i] = a[i] ^ b[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction isBytes(item: unknown): void {\r\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\r\n}\r\nfunction isNum(item: unknown): void {\r\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\r\n}\r\n\r\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\r\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\r\nexport function expand_message_xmd(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  isBytes(msg);\r\n  isBytes(DST);\r\n  isNum(lenInBytes);\r\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\r\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\r\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n  if (ell > 255) throw new Error('Invalid xmd length');\r\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\r\n  const Z_pad = i2osp(0, r_in_bytes);\r\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n  const b = new Array<Uint8Array>(ell);\r\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\r\n  for (let i = 1; i <= ell; i++) {\r\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n    b[i] = H(concatBytes(...args));\r\n  }\r\n  const pseudo_random_bytes = concatBytes(...b);\r\n  return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n\r\nexport function expand_message_xof(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  k: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  isBytes(msg);\r\n  isBytes(DST);\r\n  isNum(lenInBytes);\r\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\r\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n  if (DST.length > 255) {\r\n    const dkLen = Math.ceil((2 * k) / 8);\r\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n  }\r\n  if (lenInBytes > 65535 || DST.length > 255)\r\n    throw new Error('expand_message_xof: invalid lenInBytes');\r\n  return (\r\n    H.create({ dkLen: lenInBytes })\r\n      .update(msg)\r\n      .update(i2osp(lenInBytes, 2))\r\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n      .update(DST)\r\n      .update(i2osp(DST.length, 1))\r\n      .digest()\r\n  );\r\n}\r\n\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\r\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\r\n  validateObject(options, {\r\n    DST: 'string',\r\n    p: 'bigint',\r\n    m: 'isSafeInteger',\r\n    k: 'isSafeInteger',\r\n    hash: 'hash',\r\n  });\r\n  const { p, k, m, hash, expand, DST: _DST } = options;\r\n  isBytes(msg);\r\n  isNum(count);\r\n  const DST = validateDST(_DST);\r\n  const log2p = p.toString(2).length;\r\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n  const len_in_bytes = count * m * L;\r\n  let prb; // pseudo_random_bytes\r\n  if (expand === 'xmd') {\r\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n  } else if (expand === 'xof') {\r\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n  } else if (expand === '_internal_pass') {\r\n    // for internal tests only\r\n    prb = msg;\r\n  } else {\r\n    throw new Error('expand must be \"xmd\" or \"xof\"');\r\n  }\r\n  const u = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    const e = new Array(m);\r\n    for (let j = 0; j < m; j++) {\r\n      const elm_offset = L * (j + i * m);\r\n      const tv = prb.subarray(elm_offset, elm_offset + L);\r\n      e[j] = mod(os2ip(tv), p);\r\n    }\r\n    u[i] = e;\r\n  }\r\n  return u;\r\n}\r\n\r\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\r\n  // Make same order as in spec\r\n  const COEFF = map.map((i) => Array.from(i).reverse());\r\n  return (x: T, y: T) => {\r\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\r\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\r\n    );\r\n    x = field.div(xNum, xDen); // xNum / xDen\r\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\r\n    return { x, y };\r\n  };\r\n}\r\n\r\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\r\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\r\n  toAffine(iz?: bigint): AffinePoint<T>;\r\n  clearCofactor(): H2CPoint<T>;\r\n  assertValidity(): void;\r\n}\r\n\r\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\r\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\r\n}\r\n\r\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\r\n\r\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\r\n// (changing DST is ok!)\r\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\r\n\r\nexport function createHasher<T>(\r\n  Point: H2CPointConstructor<T>,\r\n  mapToCurve: MapToCurve<T>,\r\n  def: Opts & { encodeDST?: UnicodeOrBytes }\r\n) {\r\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\r\n  return {\r\n    // Encodes byte string to elliptic curve\r\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\r\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\r\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\r\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\r\n      const P = u0.add(u1).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n\r\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\r\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\r\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n  };\r\n}\r\n", "import assert from './_assert.js';\r\nimport { Hash, CHash, Input, toBytes } from './utils.js';\r\n// HMAC (RFC 2104)\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    assert.hash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    pad.fill(0);\r\n  }\r\n  update(buf: Input) {\r\n    assert.exists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assert.exists(this);\r\n    assert.bytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest() {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\r\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\r\nimport { CHash } from './abstract/utils.js';\r\n\r\n// connects noble-curves to noble-hashes\r\nexport function getHash(hash: CHash) {\r\n  return {\r\n    hash,\r\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\r\n    randomBytes,\r\n  };\r\n}\r\n// Same API as @noble/hashes, with ability to create curve with custom hash\r\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\r\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\r\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\r\n  return Object.freeze({ ...create(defHash), create });\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { randomBytes } from '@noble/hashes/utils';\r\nimport { Field, mod, pow2 } from './abstract/modular.js';\r\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\r\nimport type { Hex, PrivKey } from './abstract/utils.js';\r\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\r\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\r\nimport { createCurve } from './_shortw_utils.js';\r\n\r\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\r\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\r\n\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y: bigint): bigint {\r\n  const P = secp256k1P;\r\n  // prettier-ignore\r\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n  // prettier-ignore\r\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n  const b2 = (y * y * y) % P; // x^3, 11\r\n  const b3 = (b2 * b2 * y) % P; // x^7\r\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\r\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\r\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\r\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\r\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\r\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\r\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\r\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\r\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\r\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\r\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\r\n  const root = pow2(t2, _2n, P);\r\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\r\n  return root;\r\n}\r\n\r\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\r\n\r\nexport const secp256k1 = createCurve(\r\n  {\r\n    a: BigInt(0), // equation params: a, b\r\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\r\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\r\n    n: secp256k1N, // Curve order, total count of valid points in the field\r\n    // Base point (x, y) aka generator point\r\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\r\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\r\n    h: BigInt(1), // Cofactor\r\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\r\n    /**\r\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\r\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\r\n     */\r\n    endo: {\r\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n      splitScalar: (k: bigint) => {\r\n        const n = secp256k1N;\r\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\r\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\r\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\r\n        const b2 = a1;\r\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\r\n\r\n        const c1 = divNearest(b2 * k, n);\r\n        const c2 = divNearest(-b1 * k, n);\r\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\r\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\r\n        const k1neg = k1 > POW_2_128;\r\n        const k2neg = k2 > POW_2_128;\r\n        if (k1neg) k1 = n - k1;\r\n        if (k2neg) k2 = n - k2;\r\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\r\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\r\n        }\r\n        return { k1neg, k1, k2neg, k2 };\r\n      },\r\n    },\r\n  },\r\n  sha256\r\n);\r\n\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\nconst _0n = BigInt(0);\r\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\r\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\r\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\r\n  let tagP = TAGGED_HASH_PREFIXES[tag];\r\n  if (tagP === undefined) {\r\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n    tagP = concatBytes(tagH, tagH);\r\n    TAGGED_HASH_PREFIXES[tag] = tagP;\r\n  }\r\n  return sha256(concatBytes(tagP, ...messages));\r\n}\r\n\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\r\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\r\nconst modP = (x: bigint) => mod(x, secp256k1P);\r\nconst modN = (x: bigint) => mod(x, secp256k1N);\r\nconst Point = secp256k1.ProjectivePoint;\r\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\r\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\r\n\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv: PrivKey) {\r\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\r\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\r\n  return { scalar: scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x: bigint): PointType<bigint> {\r\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\r\n  const xx = modP(x * x);\r\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\r\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\r\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n  p.assertValidity();\r\n  return p;\r\n}\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args: Uint8Array[]): bigint {\r\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\r\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(\r\n  message: Hex,\r\n  privateKey: PrivKey,\r\n  auxRand: Hex = randomBytes(32)\r\n): Uint8Array {\r\n  const m = ensureBytes('message', message);\r\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\r\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\r\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\r\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\r\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n  sig.set(rx, 0);\r\n  sig.set(numTo32b(modN(k + e * d)), 32);\r\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\r\n  return sig;\r\n}\r\n\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\r\n  const sig = ensureBytes('signature', signature, 64);\r\n  const m = ensureBytes('message', message);\r\n  const pub = ensureBytes('publicKey', publicKey, 32);\r\n  try {\r\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\r\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n    if (!fe(r)) return false;\r\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n    if (!ge(s)) return false;\r\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\r\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\r\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\r\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const schnorr = /* @__PURE__ */ (() => ({\r\n  getPublicKey: schnorrGetPublicKey,\r\n  sign: schnorrSign,\r\n  verify: schnorrVerify,\r\n  utils: {\r\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\r\n    lift_x,\r\n    pointToBytes,\r\n    numberToBytesBE,\r\n    bytesToNumberBE,\r\n    taggedHash,\r\n    mod,\r\n  },\r\n}))();\r\n\r\nconst isoMap = /* @__PURE__ */ (() =>\r\n  isogenyMap(\r\n    Fp,\r\n    [\r\n      // xNum\r\n      [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n      ],\r\n      // xDen\r\n      [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n      // yNum\r\n      [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n      ],\r\n      // yDen\r\n      [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\r\n  ))();\r\nconst mapSWU = /* @__PURE__ */ (() =>\r\n  mapToCurveSimpleSWU(Fp, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fp.create(BigInt('-11')),\r\n  }))();\r\nconst htf = /* @__PURE__ */ (() =>\r\n  createHasher(\r\n    secp256k1.ProjectivePoint,\r\n    (scalars: bigint[]) => {\r\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\r\n      return isoMap(x, y);\r\n    },\r\n    {\r\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n      p: Fp.ORDER,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  ))();\r\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\r\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\r\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nexport function assertNumber(n) {\r\n    if (!Number.isSafeInteger(n))\r\n        throw new Error(`Wrong integer: ${n}`);\r\n}\r\nfunction chain(...args) {\r\n    const wrap = (a, b) => (c) => a(b(c));\r\n    const encode = Array.from(args)\r\n        .reverse()\r\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\r\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\r\n    return { encode, decode };\r\n}\r\nfunction alphabet(alphabet) {\r\n    return {\r\n        encode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('alphabet.encode input should be an array of numbers');\r\n            return digits.map((i) => {\r\n                assertNumber(i);\r\n                if (i < 0 || i >= alphabet.length)\r\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\r\n                return alphabet[i];\r\n            });\r\n        },\r\n        decode: (input) => {\r\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\r\n                throw new Error('alphabet.decode input should be array of strings');\r\n            return input.map((letter) => {\r\n                if (typeof letter !== 'string')\r\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\r\n                const index = alphabet.indexOf(letter);\r\n                if (index === -1)\r\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\r\n                return index;\r\n            });\r\n        },\r\n    };\r\n}\r\nfunction join(separator = '') {\r\n    if (typeof separator !== 'string')\r\n        throw new Error('join separator should be string');\r\n    return {\r\n        encode: (from) => {\r\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\r\n                throw new Error('join.encode input should be array of strings');\r\n            for (let i of from)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`join.encode: non-string input=${i}`);\r\n            return from.join(separator);\r\n        },\r\n        decode: (to) => {\r\n            if (typeof to !== 'string')\r\n                throw new Error('join.decode input should be string');\r\n            return to.split(separator);\r\n        },\r\n    };\r\n}\r\nfunction padding(bits, chr = '=') {\r\n    assertNumber(bits);\r\n    if (typeof chr !== 'string')\r\n        throw new Error('padding chr should be string');\r\n    return {\r\n        encode(data) {\r\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\r\n                throw new Error('padding.encode input should be array of strings');\r\n            for (let i of data)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`padding.encode: non-string input=${i}`);\r\n            while ((data.length * bits) % 8)\r\n                data.push(chr);\r\n            return data;\r\n        },\r\n        decode(input) {\r\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\r\n                throw new Error('padding.encode input should be array of strings');\r\n            for (let i of input)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`padding.decode: non-string input=${i}`);\r\n            let end = input.length;\r\n            if ((end * bits) % 8)\r\n                throw new Error('Invalid padding: string should have whole number of bytes');\r\n            for (; end > 0 && input[end - 1] === chr; end--) {\r\n                if (!(((end - 1) * bits) % 8))\r\n                    throw new Error('Invalid padding: string has too much padding');\r\n            }\r\n            return input.slice(0, end);\r\n        },\r\n    };\r\n}\r\nfunction normalize(fn) {\r\n    if (typeof fn !== 'function')\r\n        throw new Error('normalize fn should be function');\r\n    return { encode: (from) => from, decode: (to) => fn(to) };\r\n}\r\nfunction convertRadix(data, from, to) {\r\n    if (from < 2)\r\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\r\n    if (to < 2)\r\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\r\n    if (!Array.isArray(data))\r\n        throw new Error('convertRadix: data should be array');\r\n    if (!data.length)\r\n        return [];\r\n    let pos = 0;\r\n    const res = [];\r\n    const digits = Array.from(data);\r\n    digits.forEach((d) => {\r\n        assertNumber(d);\r\n        if (d < 0 || d >= from)\r\n            throw new Error(`Wrong integer: ${d}`);\r\n    });\r\n    while (true) {\r\n        let carry = 0;\r\n        let done = true;\r\n        for (let i = pos; i < digits.length; i++) {\r\n            const digit = digits[i];\r\n            const digitBase = from * carry + digit;\r\n            if (!Number.isSafeInteger(digitBase) ||\r\n                (from * carry) / from !== carry ||\r\n                digitBase - digit !== from * carry) {\r\n                throw new Error('convertRadix: carry overflow');\r\n            }\r\n            carry = digitBase % to;\r\n            digits[i] = Math.floor(digitBase / to);\r\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\r\n                throw new Error('convertRadix: carry overflow');\r\n            if (!done)\r\n                continue;\r\n            else if (!digits[i])\r\n                pos = i;\r\n            else\r\n                done = false;\r\n        }\r\n        res.push(carry);\r\n        if (done)\r\n            break;\r\n    }\r\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\r\n        res.push(0);\r\n    return res.reverse();\r\n}\r\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\r\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\r\nfunction convertRadix2(data, from, to, padding) {\r\n    if (!Array.isArray(data))\r\n        throw new Error('convertRadix2: data should be array');\r\n    if (from <= 0 || from > 32)\r\n        throw new Error(`convertRadix2: wrong from=${from}`);\r\n    if (to <= 0 || to > 32)\r\n        throw new Error(`convertRadix2: wrong to=${to}`);\r\n    if (radix2carry(from, to) > 32) {\r\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\r\n    }\r\n    let carry = 0;\r\n    let pos = 0;\r\n    const mask = 2 ** to - 1;\r\n    const res = [];\r\n    for (const n of data) {\r\n        assertNumber(n);\r\n        if (n >= 2 ** from)\r\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\r\n        carry = (carry << from) | n;\r\n        if (pos + from > 32)\r\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\r\n        pos += from;\r\n        for (; pos >= to; pos -= to)\r\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\r\n        carry &= 2 ** pos - 1;\r\n    }\r\n    carry = (carry << (to - pos)) & mask;\r\n    if (!padding && pos >= from)\r\n        throw new Error('Excess padding');\r\n    if (!padding && carry)\r\n        throw new Error(`Non-zero padding: ${carry}`);\r\n    if (padding && pos > 0)\r\n        res.push(carry >>> 0);\r\n    return res;\r\n}\r\nfunction radix(num) {\r\n    assertNumber(num);\r\n    return {\r\n        encode: (bytes) => {\r\n            if (!(bytes instanceof Uint8Array))\r\n                throw new Error('radix.encode input should be Uint8Array');\r\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\r\n        },\r\n        decode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('radix.decode input should be array of strings');\r\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\r\n        },\r\n    };\r\n}\r\nfunction radix2(bits, revPadding = false) {\r\n    assertNumber(bits);\r\n    if (bits <= 0 || bits > 32)\r\n        throw new Error('radix2: bits should be in (0..32]');\r\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\r\n        throw new Error('radix2: carry overflow');\r\n    return {\r\n        encode: (bytes) => {\r\n            if (!(bytes instanceof Uint8Array))\r\n                throw new Error('radix2.encode input should be Uint8Array');\r\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\r\n        },\r\n        decode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('radix2.decode input should be array of strings');\r\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\r\n        },\r\n    };\r\n}\r\nfunction unsafeWrapper(fn) {\r\n    if (typeof fn !== 'function')\r\n        throw new Error('unsafeWrapper fn should be function');\r\n    return function (...args) {\r\n        try {\r\n            return fn.apply(null, args);\r\n        }\r\n        catch (e) { }\r\n    };\r\n}\r\nfunction checksum(len, fn) {\r\n    assertNumber(len);\r\n    if (typeof fn !== 'function')\r\n        throw new Error('checksum fn should be function');\r\n    return {\r\n        encode(data) {\r\n            if (!(data instanceof Uint8Array))\r\n                throw new Error('checksum.encode: input should be Uint8Array');\r\n            const checksum = fn(data).slice(0, len);\r\n            const res = new Uint8Array(data.length + len);\r\n            res.set(data);\r\n            res.set(checksum, data.length);\r\n            return res;\r\n        },\r\n        decode(data) {\r\n            if (!(data instanceof Uint8Array))\r\n                throw new Error('checksum.decode: input should be Uint8Array');\r\n            const payload = data.slice(0, -len);\r\n            const newChecksum = fn(payload).slice(0, len);\r\n            const oldChecksum = data.slice(-len);\r\n            for (let i = 0; i < len; i++)\r\n                if (newChecksum[i] !== oldChecksum[i])\r\n                    throw new Error('Invalid checksum');\r\n            return payload;\r\n        },\r\n    };\r\n}\r\nexport const utils = { alphabet, chain, checksum, radix, radix2, join, padding };\r\nexport const base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\r\nexport const base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\r\nexport const base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\r\nexport const base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\r\nexport const base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\r\nexport const base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\r\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\r\nexport const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\r\nexport const base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\r\nexport const base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\r\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\r\nexport const base58xmr = {\r\n    encode(data) {\r\n        let res = '';\r\n        for (let i = 0; i < data.length; i += 8) {\r\n            const block = data.subarray(i, i + 8);\r\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\r\n        }\r\n        return res;\r\n    },\r\n    decode(str) {\r\n        let res = [];\r\n        for (let i = 0; i < str.length; i += 11) {\r\n            const slice = str.slice(i, i + 11);\r\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\r\n            const block = base58.decode(slice);\r\n            for (let j = 0; j < block.length - blockLen; j++) {\r\n                if (block[j] !== 0)\r\n                    throw new Error('base58xmr: wrong padding');\r\n            }\r\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\r\n        }\r\n        return Uint8Array.from(res);\r\n    },\r\n};\r\nexport const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\r\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\r\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\r\nfunction bech32Polymod(pre) {\r\n    const b = pre >> 25;\r\n    let chk = (pre & 0x1ffffff) << 5;\r\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\r\n        if (((b >> i) & 1) === 1)\r\n            chk ^= POLYMOD_GENERATORS[i];\r\n    }\r\n    return chk;\r\n}\r\nfunction bechChecksum(prefix, words, encodingConst = 1) {\r\n    const len = prefix.length;\r\n    let chk = 1;\r\n    for (let i = 0; i < len; i++) {\r\n        const c = prefix.charCodeAt(i);\r\n        if (c < 33 || c > 126)\r\n            throw new Error(`Invalid prefix (${prefix})`);\r\n        chk = bech32Polymod(chk) ^ (c >> 5);\r\n    }\r\n    chk = bech32Polymod(chk);\r\n    for (let i = 0; i < len; i++)\r\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\r\n    for (let v of words)\r\n        chk = bech32Polymod(chk) ^ v;\r\n    for (let i = 0; i < 6; i++)\r\n        chk = bech32Polymod(chk);\r\n    chk ^= encodingConst;\r\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\r\n}\r\nfunction genBech32(encoding) {\r\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\r\n    const _words = radix2(5);\r\n    const fromWords = _words.decode;\r\n    const toWords = _words.encode;\r\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\r\n    function encode(prefix, words, limit = 90) {\r\n        if (typeof prefix !== 'string')\r\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\r\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\r\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\r\n        const actualLength = prefix.length + 7 + words.length;\r\n        if (limit !== false && actualLength > limit)\r\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\r\n        prefix = prefix.toLowerCase();\r\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\r\n    }\r\n    function decode(str, limit = 90) {\r\n        if (typeof str !== 'string')\r\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\r\n        if (str.length < 8 || (limit !== false && str.length > limit))\r\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\r\n        const lowered = str.toLowerCase();\r\n        if (str !== lowered && str !== str.toUpperCase())\r\n            throw new Error(`String must be lowercase or uppercase`);\r\n        str = lowered;\r\n        const sepIndex = str.lastIndexOf('1');\r\n        if (sepIndex === 0 || sepIndex === -1)\r\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\r\n        const prefix = str.slice(0, sepIndex);\r\n        const _words = str.slice(sepIndex + 1);\r\n        if (_words.length < 6)\r\n            throw new Error('Data must be at least 6 characters long');\r\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\r\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\r\n        if (!_words.endsWith(sum))\r\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\r\n        return { prefix, words };\r\n    }\r\n    const decodeUnsafe = unsafeWrapper(decode);\r\n    function decodeToBytes(str) {\r\n        const { prefix, words } = decode(str, false);\r\n        return { prefix, words, bytes: fromWords(words) };\r\n    }\r\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\r\n}\r\nexport const bech32 = genBech32('bech32');\r\nexport const bech32m = genBech32('bech32m');\r\nexport const utf8 = {\r\n    encode: (data) => new TextDecoder().decode(data),\r\n    decode: (str) => new TextEncoder().encode(str),\r\n};\r\nexport const hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\r\n    if (typeof s !== 'string' || s.length % 2)\r\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\r\n    return s.toLowerCase();\r\n}));\r\nconst CODERS = {\r\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\r\n};\r\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\r\nexport const bytesToString = (type, bytes) => {\r\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\r\n        throw new TypeError(coderTypeError);\r\n    if (!(bytes instanceof Uint8Array))\r\n        throw new TypeError('bytesToString() expects Uint8Array');\r\n    return CODERS[type].encode(bytes);\r\n};\r\nexport const str = bytesToString;\r\nexport const stringToBytes = (type, str) => {\r\n    if (!CODERS.hasOwnProperty(type))\r\n        throw new TypeError(coderTypeError);\r\n    if (typeof str !== 'string')\r\n        throw new TypeError('stringToBytes() expects string');\r\n    return CODERS[type].decode(str);\r\n};\r\nexport const bytes = stringToBytes;\r\n", null, "function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\n\r\nfunction bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\r\n}\r\n\r\n// copied from utils\r\nfunction isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!isBytes(b)) throw new Error('Expected Uint8Array');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nfunction hash(hash: Hash) {\r\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(hash.outputLen);\r\n  number(hash.blockLen);\r\n}\r\n\r\nfunction exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nexport { number, bool, bytes, hash, exists, output };\r\n\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\nfunction isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n\r\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\r\n// early-throw an error because we don't support BE yet.\r\n// Other libraries would silently corrupt the data instead of throwing an error,\r\n// when they don't support it.\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\r\nfunction asciiToBase16(char: number): number | undefined {\r\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\r\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\r\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\r\n  return;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  if (!isBytes(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    if (!isBytes(a)) throw new Error('Uint8Array expected');\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\nconst toStr = {}.toString;\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\r\nimport { Hash, CHash, Input, toBytes } from './utils.js';\r\n// HMAC (RFC 2104)\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    assertHash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    pad.fill(0);\r\n  }\r\n  update(buf: Input) {\r\n    assertExists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assertExists(this);\r\n    assertBytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest() {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "import { hash as assertHash, number as assertNumber } from './_assert.js';\r\nimport { hmac } from './hmac.js';\r\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\r\n\r\n// PBKDF (RFC 2898)\r\nexport type Pbkdf2Opt = {\r\n  c: number; // Iterations\r\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\r\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\r\n};\r\n// Common prologue and epilogue for sync/async functions\r\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\r\n  assertHash(hash);\r\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\r\n  const { c, dkLen, asyncTick } = opts;\r\n  assertNumber(c);\r\n  assertNumber(dkLen);\r\n  assertNumber(asyncTick);\r\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\r\n  const password = toBytes(_password);\r\n  const salt = toBytes(_salt);\r\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\r\n  const DK = new Uint8Array(dkLen);\r\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n  const PRF = hmac.create(hash, password);\r\n  const PRFSalt = PRF._cloneInto().update(salt);\r\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\r\n}\r\n\r\nfunction pbkdf2Output<T extends Hash<T>>(\r\n  PRF: Hash<T>,\r\n  PRFSalt: Hash<T>,\r\n  DK: Uint8Array,\r\n  prfW: Hash<T>,\r\n  u: Uint8Array\r\n) {\r\n  PRF.destroy();\r\n  PRFSalt.destroy();\r\n  if (prfW) prfW.destroy();\r\n  u.fill(0);\r\n  return DK;\r\n}\r\n\r\n/**\r\n * PBKDF2-HMAC: RFC 2898 key derivation function\r\n * @param hash - hash function that would be used e.g. sha256\r\n * @param password - password from which a derived key is generated\r\n * @param salt - cryptographic salt\r\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\r\n */\r\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\r\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\r\n  let prfW: any; // Working copy\r\n  const arr = new Uint8Array(4);\r\n  const view = createView(arr);\r\n  const u = new Uint8Array(PRF.outputLen);\r\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\r\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\r\n    // Ti = F(Password, Salt, c, i)\r\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\r\n    view.setInt32(0, ti, false);\r\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\r\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\r\n    Ti.set(u.subarray(0, Ti.length));\r\n    for (let ui = 1; ui < c; ui++) {\r\n      // Uc = PRF(Password, Uc−1)\r\n      PRF._cloneInto(prfW).update(u).digestInto(u);\r\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\r\n    }\r\n  }\r\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\r\n}\r\n\r\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\r\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\r\n  let prfW: any; // Working copy\r\n  const arr = new Uint8Array(4);\r\n  const view = createView(arr);\r\n  const u = new Uint8Array(PRF.outputLen);\r\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\r\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\r\n    // Ti = F(Password, Salt, c, i)\r\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\r\n    view.setInt32(0, ti, false);\r\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\r\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\r\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\r\n    Ti.set(u.subarray(0, Ti.length));\r\n    await asyncLoop(c - 1, asyncTick, () => {\r\n      // Uc = PRF(Password, Uc−1)\r\n      PRF._cloneInto(prfW).update(u).digestInto(u);\r\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\r\n    });\r\n  }\r\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\r\n}\r\n", "import { exists, output } from './_assert.js';\r\nimport { Hash, createView, Input, toBytes } from './utils.js';\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n// Base SHA2 class (RFC 6234)\r\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(\r\n    readonly blockLen: number,\r\n    public outputLen: number,\r\n    readonly padOffset: number,\r\n    readonly isLE: boolean\r\n  ) {\r\n    super();\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    exists(this);\r\n    const { view, buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    exists(this);\r\n    output(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    this.buffer.subarray(pos).fill(0);\r\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest() {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n}\r\n", "import { SHA2 } from './_sha2.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n\r\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\r\n// BTC network is doing 2^67 hashes/sec as per early 2023.\r\n\r\n// Choice: a ? b : c\r\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\r\n\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = /* @__PURE__ */new Uint32Array([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nclass SHA256 extends SHA2<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  A = IV[0] | 0;\r\n  B = IV[1] | 0;\r\n  C = IV[2] | 0;\r\n  D = IV[3] | 0;\r\n  E = IV[4] | 0;\r\n  F = IV[5] | 0;\r\n  G = IV[6] | 0;\r\n  H = IV[7] | 0;\r\n\r\n  constructor() {\r\n    super(64, 32, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ) {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean() {\r\n    SHA256_W.fill(0);\r\n  }\r\n  destroy() {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    this.buffer.fill(0);\r\n  }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n  A = 0xc1059ed8 | 0;\r\n  B = 0x367cd507 | 0;\r\n  C = 0x3070dd17 | 0;\r\n  D = 0xf70e5939 | 0;\r\n  E = 0xffc00b31 | 0;\r\n  F = 0x68581511 | 0;\r\n  G = 0x64f98fa7 | 0;\r\n  H = 0xbefa4fa4 | 0;\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\r\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\r\n", "const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n\r\n// We are not using BigUint64Array, because they are extremely slow as per 2022\r\nfunction fromBig(n: bigint, le = false) {\r\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\n\r\nfunction split(lst: bigint[], le = false) {\r\n  let Ah = new Uint32Array(lst.length);\r\n  let Al = new Uint32Array(lst.length);\r\n  for (let i = 0; i < lst.length; i++) {\r\n    const { h, l } = fromBig(lst[i], le);\r\n    [Ah[i], Al[i]] = [h, l];\r\n  }\r\n  return [Ah, Al];\r\n}\r\n\r\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\r\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h: number, l: number) => l;\r\nconst rotr32L = (h: number, _l: number) => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\r\n\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\r\n  const l = (Al >>> 0) + (Bl >>> 0);\r\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\r\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\r\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\r\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n\r\n// prettier-ignore\r\nexport {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\n// prettier-ignore\r\nconst u64 = {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\nexport default u64;\r\n", "import { SHA2 } from './_sha2.js';\r\nimport u64 from './_u64.js';\r\nimport { wrapConstructor } from './utils.js';\r\n\r\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\r\n// prettier-ignore\r\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\r\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\r\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\r\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\r\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\r\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\r\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\r\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\r\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\r\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\r\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\r\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\r\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\r\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\r\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\r\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\r\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\r\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\r\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\r\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\r\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\r\n].map(n => BigInt(n))))();\r\n\r\n// Temporary buffer, not used to store anything between runs\r\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\r\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\r\nexport class SHA512 extends SHA2<SHA512> {\r\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\r\n  // Also looks cleaner and easier to verify with spec.\r\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0x6a09e667 | 0;\r\n  Al = 0xf3bcc908 | 0;\r\n  Bh = 0xbb67ae85 | 0;\r\n  Bl = 0x84caa73b | 0;\r\n  Ch = 0x3c6ef372 | 0;\r\n  Cl = 0xfe94f82b | 0;\r\n  Dh = 0xa54ff53a | 0;\r\n  Dl = 0x5f1d36f1 | 0;\r\n  Eh = 0x510e527f | 0;\r\n  El = 0xade682d1 | 0;\r\n  Fh = 0x9b05688c | 0;\r\n  Fl = 0x2b3e6c1f | 0;\r\n  Gh = 0x1f83d9ab | 0;\r\n  Gl = 0xfb41bd6b | 0;\r\n  Hh = 0x5be0cd19 | 0;\r\n  Hl = 0x137e2179 | 0;\r\n\r\n  constructor() {\r\n    super(128, 64, 16, false);\r\n  }\r\n  // prettier-ignore\r\n  protected get(): [\r\n    number, number, number, number, number, number, number, number,\r\n    number, number, number, number, number, number, number, number\r\n  ] {\r\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\r\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\r\n  ) {\r\n    this.Ah = Ah | 0;\r\n    this.Al = Al | 0;\r\n    this.Bh = Bh | 0;\r\n    this.Bl = Bl | 0;\r\n    this.Ch = Ch | 0;\r\n    this.Cl = Cl | 0;\r\n    this.Dh = Dh | 0;\r\n    this.Dl = Dl | 0;\r\n    this.Eh = Eh | 0;\r\n    this.El = El | 0;\r\n    this.Fh = Fh | 0;\r\n    this.Fl = Fl | 0;\r\n    this.Gh = Gh | 0;\r\n    this.Gl = Gl | 0;\r\n    this.Hh = Hh | 0;\r\n    this.Hl = Hl | 0;\r\n  }\r\n  protected process(view: DataView, offset: number) {\r\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) {\r\n      SHA512_W_H[i] = view.getUint32(offset);\r\n      SHA512_W_L[i] = view.getUint32((offset += 4));\r\n    }\r\n    for (let i = 16; i < 80; i++) {\r\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\r\n      const W15h = SHA512_W_H[i - 15] | 0;\r\n      const W15l = SHA512_W_L[i - 15] | 0;\r\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\r\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\r\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\r\n      const W2h = SHA512_W_H[i - 2] | 0;\r\n      const W2l = SHA512_W_L[i - 2] | 0;\r\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\r\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\r\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\r\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\r\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\r\n      SHA512_W_H[i] = SUMh | 0;\r\n      SHA512_W_L[i] = SUMl | 0;\r\n    }\r\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    // Compression function main loop, 80 rounds\r\n    for (let i = 0; i < 80; i++) {\r\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\r\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\r\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\r\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\r\n      const CHIl = (El & Fl) ^ (~El & Gl);\r\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\r\n      // prettier-ignore\r\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\r\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\r\n      const T1l = T1ll | 0;\r\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\r\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\r\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\r\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\r\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\r\n      Hh = Gh | 0;\r\n      Hl = Gl | 0;\r\n      Gh = Fh | 0;\r\n      Gl = Fl | 0;\r\n      Fh = Eh | 0;\r\n      Fl = El | 0;\r\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\r\n      Dh = Ch | 0;\r\n      Dl = Cl | 0;\r\n      Ch = Bh | 0;\r\n      Cl = Bl | 0;\r\n      Bh = Ah | 0;\r\n      Bl = Al | 0;\r\n      const All = u64.add3L(T1l, sigma0l, MAJl);\r\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\r\n      Al = All | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\r\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\r\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\r\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\r\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\r\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\r\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\r\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\r\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\r\n  }\r\n  protected roundClean() {\r\n    SHA512_W_H.fill(0);\r\n    SHA512_W_L.fill(0);\r\n  }\r\n  destroy() {\r\n    this.buffer.fill(0);\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\nclass SHA512_224 extends SHA512 {\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0x8c3d37c8 | 0;\r\n  Al = 0x19544da2 | 0;\r\n  Bh = 0x73e19966 | 0;\r\n  Bl = 0x89dcd4d6 | 0;\r\n  Ch = 0x1dfab7ae | 0;\r\n  Cl = 0x32ff9c82 | 0;\r\n  Dh = 0x679dd514 | 0;\r\n  Dl = 0x582f9fcf | 0;\r\n  Eh = 0x0f6d2b69 | 0;\r\n  El = 0x7bd44da8 | 0;\r\n  Fh = 0x77e36f73 | 0;\r\n  Fl = 0x04c48942 | 0;\r\n  Gh = 0x3f9d85a8 | 0;\r\n  Gl = 0x6a1d36c8 | 0;\r\n  Hh = 0x1112e6ad | 0;\r\n  Hl = 0x91d692a1 | 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\nclass SHA512_256 extends SHA512 {\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0x22312194 | 0;\r\n  Al = 0xfc2bf72c | 0;\r\n  Bh = 0x9f555fa3 | 0;\r\n  Bl = 0xc84c64c2 | 0;\r\n  Ch = 0x2393b86b | 0;\r\n  Cl = 0x6f53b151 | 0;\r\n  Dh = 0x96387719 | 0;\r\n  Dl = 0x5940eabd | 0;\r\n  Eh = 0x96283ee2 | 0;\r\n  El = 0xa88effe3 | 0;\r\n  Fh = 0xbe5e1e25 | 0;\r\n  Fl = 0x53863992 | 0;\r\n  Gh = 0x2b0199fc | 0;\r\n  Gl = 0x2c85b8aa | 0;\r\n  Hh = 0x0eb72ddc | 0;\r\n  Hl = 0x81c52ca2 | 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 32;\r\n  }\r\n}\r\n\r\nclass SHA384 extends SHA512 {\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0xcbbb9d5d | 0;\r\n  Al = 0xc1059ed8 | 0;\r\n  Bh = 0x629a292a | 0;\r\n  Bl = 0x367cd507 | 0;\r\n  Ch = 0x9159015a | 0;\r\n  Cl = 0x3070dd17 | 0;\r\n  Dh = 0x152fecd8 | 0;\r\n  Dl = 0xf70e5939 | 0;\r\n  Eh = 0x67332667 | 0;\r\n  El = 0xffc00b31 | 0;\r\n  Fh = 0x8eb44a87 | 0;\r\n  Fl = 0x68581511 | 0;\r\n  Gh = 0xdb0c2e0d | 0;\r\n  Gl = 0x64f98fa7 | 0;\r\n  Hh = 0x47b5481d | 0;\r\n  Hl = 0xbefa4fa4 | 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 48;\r\n  }\r\n}\r\n\r\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\r\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\r\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\r\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\r\n", "/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Utilities\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nexport function assertNumber(n) {\r\n    if (!Number.isSafeInteger(n))\r\n        throw new Error(`Wrong integer: ${n}`);\r\n}\r\nfunction isBytes(a) {\r\n    return (a instanceof Uint8Array ||\r\n        (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction chain(...args) {\r\n    const id = (a) => a;\r\n    // Wrap call in closure so JIT can inline calls\r\n    const wrap = (a, b) => (c) => a(b(c));\r\n    // Construct chain of args[-1].encode(args[-2].encode([...]))\r\n    const encode = args.map((x) => x.encode).reduceRight(wrap, id);\r\n    // Construct chain of args[0].decode(args[1].decode(...))\r\n    const decode = args.map((x) => x.decode).reduce(wrap, id);\r\n    return { encode, decode };\r\n}\r\n/**\r\n * Encodes integer radix representation to array of strings using alphabet and back\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction alphabet(alphabet) {\r\n    return {\r\n        encode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('alphabet.encode input should be an array of numbers');\r\n            return digits.map((i) => {\r\n                assertNumber(i);\r\n                if (i < 0 || i >= alphabet.length)\r\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\r\n                return alphabet[i];\r\n            });\r\n        },\r\n        decode: (input) => {\r\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\r\n                throw new Error('alphabet.decode input should be array of strings');\r\n            return input.map((letter) => {\r\n                if (typeof letter !== 'string')\r\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\r\n                const index = alphabet.indexOf(letter);\r\n                if (index === -1)\r\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\r\n                return index;\r\n            });\r\n        },\r\n    };\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction join(separator = '') {\r\n    if (typeof separator !== 'string')\r\n        throw new Error('join separator should be string');\r\n    return {\r\n        encode: (from) => {\r\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\r\n                throw new Error('join.encode input should be array of strings');\r\n            for (let i of from)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`join.encode: non-string input=${i}`);\r\n            return from.join(separator);\r\n        },\r\n        decode: (to) => {\r\n            if (typeof to !== 'string')\r\n                throw new Error('join.decode input should be string');\r\n            return to.split(separator);\r\n        },\r\n    };\r\n}\r\n/**\r\n * Pad strings array so it has integer number of bits\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction padding(bits, chr = '=') {\r\n    assertNumber(bits);\r\n    if (typeof chr !== 'string')\r\n        throw new Error('padding chr should be string');\r\n    return {\r\n        encode(data) {\r\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\r\n                throw new Error('padding.encode input should be array of strings');\r\n            for (let i of data)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`padding.encode: non-string input=${i}`);\r\n            while ((data.length * bits) % 8)\r\n                data.push(chr);\r\n            return data;\r\n        },\r\n        decode(input) {\r\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\r\n                throw new Error('padding.encode input should be array of strings');\r\n            for (let i of input)\r\n                if (typeof i !== 'string')\r\n                    throw new Error(`padding.decode: non-string input=${i}`);\r\n            let end = input.length;\r\n            if ((end * bits) % 8)\r\n                throw new Error('Invalid padding: string should have whole number of bytes');\r\n            for (; end > 0 && input[end - 1] === chr; end--) {\r\n                if (!(((end - 1) * bits) % 8))\r\n                    throw new Error('Invalid padding: string has too much padding');\r\n            }\r\n            return input.slice(0, end);\r\n        },\r\n    };\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction normalize(fn) {\r\n    if (typeof fn !== 'function')\r\n        throw new Error('normalize fn should be function');\r\n    return { encode: (from) => from, decode: (to) => fn(to) };\r\n}\r\n/**\r\n * Slow: O(n^2) time complexity\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction convertRadix(data, from, to) {\r\n    // base 1 is impossible\r\n    if (from < 2)\r\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\r\n    if (to < 2)\r\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\r\n    if (!Array.isArray(data))\r\n        throw new Error('convertRadix: data should be array');\r\n    if (!data.length)\r\n        return [];\r\n    let pos = 0;\r\n    const res = [];\r\n    const digits = Array.from(data);\r\n    digits.forEach((d) => {\r\n        assertNumber(d);\r\n        if (d < 0 || d >= from)\r\n            throw new Error(`Wrong integer: ${d}`);\r\n    });\r\n    while (true) {\r\n        let carry = 0;\r\n        let done = true;\r\n        for (let i = pos; i < digits.length; i++) {\r\n            const digit = digits[i];\r\n            const digitBase = from * carry + digit;\r\n            if (!Number.isSafeInteger(digitBase) ||\r\n                (from * carry) / from !== carry ||\r\n                digitBase - digit !== from * carry) {\r\n                throw new Error('convertRadix: carry overflow');\r\n            }\r\n            carry = digitBase % to;\r\n            const rounded = Math.floor(digitBase / to);\r\n            digits[i] = rounded;\r\n            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)\r\n                throw new Error('convertRadix: carry overflow');\r\n            if (!done)\r\n                continue;\r\n            else if (!rounded)\r\n                pos = i;\r\n            else\r\n                done = false;\r\n        }\r\n        res.push(carry);\r\n        if (done)\r\n            break;\r\n    }\r\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\r\n        res.push(0);\r\n    return res.reverse();\r\n}\r\nconst gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));\r\nconst radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));\r\n/**\r\n * Implemented with numbers, because BigInt is 5x slower\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction convertRadix2(data, from, to, padding) {\r\n    if (!Array.isArray(data))\r\n        throw new Error('convertRadix2: data should be array');\r\n    if (from <= 0 || from > 32)\r\n        throw new Error(`convertRadix2: wrong from=${from}`);\r\n    if (to <= 0 || to > 32)\r\n        throw new Error(`convertRadix2: wrong to=${to}`);\r\n    if (radix2carry(from, to) > 32) {\r\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\r\n    }\r\n    let carry = 0;\r\n    let pos = 0; // bitwise position in current element\r\n    const mask = 2 ** to - 1;\r\n    const res = [];\r\n    for (const n of data) {\r\n        assertNumber(n);\r\n        if (n >= 2 ** from)\r\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\r\n        carry = (carry << from) | n;\r\n        if (pos + from > 32)\r\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\r\n        pos += from;\r\n        for (; pos >= to; pos -= to)\r\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\r\n        carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow\r\n    }\r\n    carry = (carry << (to - pos)) & mask;\r\n    if (!padding && pos >= from)\r\n        throw new Error('Excess padding');\r\n    if (!padding && carry)\r\n        throw new Error(`Non-zero padding: ${carry}`);\r\n    if (padding && pos > 0)\r\n        res.push(carry >>> 0);\r\n    return res;\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction radix(num) {\r\n    assertNumber(num);\r\n    return {\r\n        encode: (bytes) => {\r\n            if (!isBytes(bytes))\r\n                throw new Error('radix.encode input should be Uint8Array');\r\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\r\n        },\r\n        decode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('radix.decode input should be array of numbers');\r\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\r\n        },\r\n    };\r\n}\r\n/**\r\n * If both bases are power of same number (like `2**8 <-> 2**64`),\r\n * there is a linear algorithm. For now we have implementation for power-of-two bases only.\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction radix2(bits, revPadding = false) {\r\n    assertNumber(bits);\r\n    if (bits <= 0 || bits > 32)\r\n        throw new Error('radix2: bits should be in (0..32]');\r\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\r\n        throw new Error('radix2: carry overflow');\r\n    return {\r\n        encode: (bytes) => {\r\n            if (!isBytes(bytes))\r\n                throw new Error('radix2.encode input should be Uint8Array');\r\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\r\n        },\r\n        decode: (digits) => {\r\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\r\n                throw new Error('radix2.decode input should be array of numbers');\r\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\r\n        },\r\n    };\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction unsafeWrapper(fn) {\r\n    if (typeof fn !== 'function')\r\n        throw new Error('unsafeWrapper fn should be function');\r\n    return function (...args) {\r\n        try {\r\n            return fn.apply(null, args);\r\n        }\r\n        catch (e) { }\r\n    };\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction checksum(len, fn) {\r\n    assertNumber(len);\r\n    if (typeof fn !== 'function')\r\n        throw new Error('checksum fn should be function');\r\n    return {\r\n        encode(data) {\r\n            if (!isBytes(data))\r\n                throw new Error('checksum.encode: input should be Uint8Array');\r\n            const checksum = fn(data).slice(0, len);\r\n            const res = new Uint8Array(data.length + len);\r\n            res.set(data);\r\n            res.set(checksum, data.length);\r\n            return res;\r\n        },\r\n        decode(data) {\r\n            if (!isBytes(data))\r\n                throw new Error('checksum.decode: input should be Uint8Array');\r\n            const payload = data.slice(0, -len);\r\n            const newChecksum = fn(payload).slice(0, len);\r\n            const oldChecksum = data.slice(-len);\r\n            for (let i = 0; i < len; i++)\r\n                if (newChecksum[i] !== oldChecksum[i])\r\n                    throw new Error('Invalid checksum');\r\n            return payload;\r\n        },\r\n    };\r\n}\r\n// prettier-ignore\r\nexport const utils = {\r\n    alphabet, chain, checksum, convertRadix, convertRadix2, radix, radix2, join, padding,\r\n};\r\n// RFC 4648 aka RFC 3548\r\n// ---------------------\r\nexport const base16 = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\r\nexport const base32 = /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\r\nexport const base32hex = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\r\nexport const base32crockford = /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\r\nexport const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\r\nexport const base64nopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));\r\nexport const base64url = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\r\nexport const base64urlnopad = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));\r\n// base58 code\r\n// -----------\r\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\r\nexport const base58 = /* @__PURE__ */ genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\r\nexport const base58flickr = /* @__PURE__ */ genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\r\nexport const base58xrp = /* @__PURE__ */ genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\r\n// xmr ver is done in 8-byte blocks (which equals 11 chars in decoding). Last (non-full) block padded with '1' to size in XMR_BLOCK_LEN.\r\n// Block encoding significantly reduces quadratic complexity of base58.\r\n// Data len (index) -> encoded block len\r\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\r\nexport const base58xmr = {\r\n    encode(data) {\r\n        let res = '';\r\n        for (let i = 0; i < data.length; i += 8) {\r\n            const block = data.subarray(i, i + 8);\r\n            res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\r\n        }\r\n        return res;\r\n    },\r\n    decode(str) {\r\n        let res = [];\r\n        for (let i = 0; i < str.length; i += 11) {\r\n            const slice = str.slice(i, i + 11);\r\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\r\n            const block = base58.decode(slice);\r\n            for (let j = 0; j < block.length - blockLen; j++) {\r\n                if (block[j] !== 0)\r\n                    throw new Error('base58xmr: wrong padding');\r\n            }\r\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\r\n        }\r\n        return Uint8Array.from(res);\r\n    },\r\n};\r\nexport const createBase58check = /* @__PURE__ */ (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), base58);\r\n// legacy export, bad name\r\nexport const base58check = createBase58check;\r\nconst BECH_ALPHABET = /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\r\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction bech32Polymod(pre) {\r\n    const b = pre >> 25;\r\n    let chk = (pre & 0x1ffffff) << 5;\r\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\r\n        if (((b >> i) & 1) === 1)\r\n            chk ^= POLYMOD_GENERATORS[i];\r\n    }\r\n    return chk;\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction bechChecksum(prefix, words, encodingConst = 1) {\r\n    const len = prefix.length;\r\n    let chk = 1;\r\n    for (let i = 0; i < len; i++) {\r\n        const c = prefix.charCodeAt(i);\r\n        if (c < 33 || c > 126)\r\n            throw new Error(`Invalid prefix (${prefix})`);\r\n        chk = bech32Polymod(chk) ^ (c >> 5);\r\n    }\r\n    chk = bech32Polymod(chk);\r\n    for (let i = 0; i < len; i++)\r\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\r\n    for (let v of words)\r\n        chk = bech32Polymod(chk) ^ v;\r\n    for (let i = 0; i < 6; i++)\r\n        chk = bech32Polymod(chk);\r\n    chk ^= encodingConst;\r\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\r\n}\r\n/**\r\n * @__NO_SIDE_EFFECTS__\r\n */\r\nfunction genBech32(encoding) {\r\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\r\n    const _words = radix2(5);\r\n    const fromWords = _words.decode;\r\n    const toWords = _words.encode;\r\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\r\n    function encode(prefix, words, limit = 90) {\r\n        if (typeof prefix !== 'string')\r\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\r\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\r\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\r\n        if (prefix.length === 0)\r\n            throw new TypeError(`Invalid prefix length ${prefix.length}`);\r\n        const actualLength = prefix.length + 7 + words.length;\r\n        if (limit !== false && actualLength > limit)\r\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\r\n        const lowered = prefix.toLowerCase();\r\n        const sum = bechChecksum(lowered, words, ENCODING_CONST);\r\n        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;\r\n    }\r\n    function decode(str, limit = 90) {\r\n        if (typeof str !== 'string')\r\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\r\n        if (str.length < 8 || (limit !== false && str.length > limit))\r\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\r\n        // don't allow mixed case\r\n        const lowered = str.toLowerCase();\r\n        if (str !== lowered && str !== str.toUpperCase())\r\n            throw new Error(`String must be lowercase or uppercase`);\r\n        const sepIndex = lowered.lastIndexOf('1');\r\n        if (sepIndex === 0 || sepIndex === -1)\r\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\r\n        const prefix = lowered.slice(0, sepIndex);\r\n        const data = lowered.slice(sepIndex + 1);\r\n        if (data.length < 6)\r\n            throw new Error('Data must be at least 6 characters long');\r\n        const words = BECH_ALPHABET.decode(data).slice(0, -6);\r\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\r\n        if (!data.endsWith(sum))\r\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\r\n        return { prefix, words };\r\n    }\r\n    const decodeUnsafe = unsafeWrapper(decode);\r\n    function decodeToBytes(str) {\r\n        const { prefix, words } = decode(str, false);\r\n        return { prefix, words, bytes: fromWords(words) };\r\n    }\r\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\r\n}\r\nexport const bech32 = /* @__PURE__ */ genBech32('bech32');\r\nexport const bech32m = /* @__PURE__ */ genBech32('bech32m');\r\nexport const utf8 = {\r\n    encode: (data) => new TextDecoder().decode(data),\r\n    decode: (str) => new TextEncoder().encode(str),\r\n};\r\nexport const hex = /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\r\n    if (typeof s !== 'string' || s.length % 2)\r\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\r\n    return s.toLowerCase();\r\n}));\r\n// prettier-ignore\r\nconst CODERS = {\r\n    utf8, hex, base16, base32, base64, base64url, base58, base58xmr\r\n};\r\nconst coderTypeError = 'Invalid encoding type. Available types: utf8, hex, base16, base32, base64, base64url, base58, base58xmr';\r\nexport const bytesToString = (type, bytes) => {\r\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\r\n        throw new TypeError(coderTypeError);\r\n    if (!isBytes(bytes))\r\n        throw new TypeError('bytesToString() expects Uint8Array');\r\n    return CODERS[type].encode(bytes);\r\n};\r\nexport const str = bytesToString; // as in python, but for bytes only\r\nexport const stringToBytes = (type, str) => {\r\n    if (!CODERS.hasOwnProperty(type))\r\n        throw new TypeError(coderTypeError);\r\n    if (typeof str !== 'string')\r\n        throw new TypeError('stringToBytes() expects string');\r\n    return CODERS[type].decode(str);\r\n};\r\nexport const bytes = stringToBytes;\r\n//# sourceMappingURL=index.js.map", null, "function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\n\r\nfunction bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\r\n}\r\n\r\n// copied from utils\r\nfunction isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!isBytes(b)) throw new Error('Expected Uint8Array');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nfunction hash(hash: Hash) {\r\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(hash.outputLen);\r\n  number(hash.blockLen);\r\n}\r\n\r\nfunction exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nexport { number, bool, bytes, hash, exists, output };\r\n\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\nfunction isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n\r\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\r\n// early-throw an error because we don't support BE yet.\r\n// Other libraries would silently corrupt the data instead of throwing an error,\r\n// when they don't support it.\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!isBytes(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\r\nfunction asciiToBase16(char: number): number | undefined {\r\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\r\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\r\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\r\n  return;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  if (!isBytes(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    if (!isBytes(a)) throw new Error('Uint8Array expected');\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\nconst toStr = {}.toString;\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\r\nimport { Hash, CHash, Input, toBytes } from './utils.js';\r\n// HMAC (RFC 2104)\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    assertHash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    pad.fill(0);\r\n  }\r\n  update(buf: Input) {\r\n    assertExists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assertExists(this);\r\n    assertBytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest() {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "import { exists, output } from './_assert.js';\r\nimport { Hash, createView, Input, toBytes } from './utils.js';\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n// Base SHA2 class (RFC 6234)\r\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(\r\n    readonly blockLen: number,\r\n    public outputLen: number,\r\n    readonly padOffset: number,\r\n    readonly isLE: boolean\r\n  ) {\r\n    super();\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    exists(this);\r\n    const { view, buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    exists(this);\r\n    output(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    this.buffer.subarray(pos).fill(0);\r\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest() {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n}\r\n", "import { SHA2 } from './_sha2.js';\r\nimport { wrapConstructor } from './utils.js';\r\n\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\r\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\r\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\r\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\r\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\r\nlet idxL = [Id];\r\nlet idxR = [Pi];\r\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\r\n\r\nconst shifts = /* @__PURE__ */ [\r\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\r\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\r\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\r\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\r\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\r\n].map((i) => new Uint8Array(i));\r\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\r\nconst Kl = /* @__PURE__ */ new Uint32Array([\r\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\r\n]);\r\nconst Kr = /* @__PURE__ */ new Uint32Array([\r\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\r\n]);\r\n// The rotate left (circular left shift) operation for uint32\r\nconst rotl = (word: number, shift: number) => (word << shift) | (word >>> (32 - shift));\r\n// It's called f() in spec.\r\nfunction f(group: number, x: number, y: number, z: number): number {\r\n  if (group === 0) return x ^ y ^ z;\r\n  else if (group === 1) return (x & y) | (~x & z);\r\n  else if (group === 2) return (x | ~y) ^ z;\r\n  else if (group === 3) return (x & z) | (y & ~z);\r\n  else return x ^ (y | ~z);\r\n}\r\n// Temporary buffer, not used to store anything between runs\r\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\r\nexport class RIPEMD160 extends SHA2<RIPEMD160> {\r\n  private h0 = 0x67452301 | 0;\r\n  private h1 = 0xefcdab89 | 0;\r\n  private h2 = 0x98badcfe | 0;\r\n  private h3 = 0x10325476 | 0;\r\n  private h4 = 0xc3d2e1f0 | 0;\r\n\r\n  constructor() {\r\n    super(64, 20, 8, true);\r\n  }\r\n  protected get(): [number, number, number, number, number] {\r\n    const { h0, h1, h2, h3, h4 } = this;\r\n    return [h0, h1, h2, h3, h4];\r\n  }\r\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\r\n    this.h0 = h0 | 0;\r\n    this.h1 = h1 | 0;\r\n    this.h2 = h2 | 0;\r\n    this.h3 = h3 | 0;\r\n    this.h4 = h4 | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    for (let i = 0; i < 16; i++, offset += 4) BUF[i] = view.getUint32(offset, true);\r\n    // prettier-ignore\r\n    let al = this.h0 | 0, ar = al,\r\n        bl = this.h1 | 0, br = bl,\r\n        cl = this.h2 | 0, cr = cl,\r\n        dl = this.h3 | 0, dr = dl,\r\n        el = this.h4 | 0, er = el;\r\n\r\n    // Instead of iterating 0 to 80, we split it into 5 groups\r\n    // And use the groups in constants, functions, etc. Much simpler\r\n    for (let group = 0; group < 5; group++) {\r\n      const rGroup = 4 - group;\r\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\r\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\r\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\r\n      for (let i = 0; i < 16; i++) {\r\n        const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\r\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\r\n      }\r\n      // 2 loops are 10% faster\r\n      for (let i = 0; i < 16; i++) {\r\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\r\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\r\n      }\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    this.set(\r\n      (this.h1 + cl + dr) | 0,\r\n      (this.h2 + dl + er) | 0,\r\n      (this.h3 + el + ar) | 0,\r\n      (this.h4 + al + br) | 0,\r\n      (this.h0 + bl + cr) | 0\r\n    );\r\n  }\r\n  protected roundClean() {\r\n    BUF.fill(0);\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.buffer.fill(0);\r\n    this.set(0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\n/**\r\n * RIPEMD-160 - a hash function from 1990s.\r\n * @param message - msg that would be hashed\r\n */\r\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\r\n", "import { SHA2 } from './_sha2.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n\r\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\r\n// BTC network is doing 2^67 hashes/sec as per early 2023.\r\n\r\n// Choice: a ? b : c\r\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\r\n\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = /* @__PURE__ */new Uint32Array([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nclass SHA256 extends SHA2<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  A = IV[0] | 0;\r\n  B = IV[1] | 0;\r\n  C = IV[2] | 0;\r\n  D = IV[3] | 0;\r\n  E = IV[4] | 0;\r\n  F = IV[5] | 0;\r\n  G = IV[6] | 0;\r\n  H = IV[7] | 0;\r\n\r\n  constructor() {\r\n    super(64, 32, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ) {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean() {\r\n    SHA256_W.fill(0);\r\n  }\r\n  destroy() {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    this.buffer.fill(0);\r\n  }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n  A = 0xc1059ed8 | 0;\r\n  B = 0x367cd507 | 0;\r\n  C = 0x3070dd17 | 0;\r\n  D = 0xf70e5939 | 0;\r\n  E = 0xffc00b31 | 0;\r\n  F = 0x68581511 | 0;\r\n  G = 0x64f98fa7 | 0;\r\n  H = 0xbefa4fa4 | 0;\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\r\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\r\n", "const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\r\nconst _32n = /* @__PURE__ */ BigInt(32);\r\n\r\n// We are not using BigUint64Array, because they are extremely slow as per 2022\r\nfunction fromBig(n: bigint, le = false) {\r\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\r\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\r\n}\r\n\r\nfunction split(lst: bigint[], le = false) {\r\n  let Ah = new Uint32Array(lst.length);\r\n  let Al = new Uint32Array(lst.length);\r\n  for (let i = 0; i < lst.length; i++) {\r\n    const { h, l } = fromBig(lst[i], le);\r\n    [Ah[i], Al[i]] = [h, l];\r\n  }\r\n  return [Ah, Al];\r\n}\r\n\r\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\r\n// for Shift in [0, 32)\r\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\r\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in [1, 32)\r\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\r\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\r\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\r\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\r\n// Right rotate for shift===32 (just swaps l&h)\r\nconst rotr32H = (_h: number, l: number) => l;\r\nconst rotr32L = (h: number, _l: number) => h;\r\n// Left rotate for Shift in [1, 32)\r\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\r\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\r\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\r\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\r\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\r\n\r\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\r\n// simple take carry out of low bit sum by shift, we need to use division.\r\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\r\n  const l = (Al >>> 0) + (Bl >>> 0);\r\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\r\n}\r\n// Addition with more than 2 elements\r\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\r\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\r\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\r\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\r\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\r\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\r\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\r\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\r\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\r\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\r\n\r\n// prettier-ignore\r\nexport {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\n// prettier-ignore\r\nconst u64 = {\r\n  fromBig, split, toBig,\r\n  shrSH, shrSL,\r\n  rotrSH, rotrSL, rotrBH, rotrBL,\r\n  rotr32H, rotr32L,\r\n  rotlSH, rotlSL, rotlBH, rotlBL,\r\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\r\n};\r\nexport default u64;\r\n", "import { SHA2 } from './_sha2.js';\r\nimport u64 from './_u64.js';\r\nimport { wrapConstructor } from './utils.js';\r\n\r\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\r\n// prettier-ignore\r\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\r\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\r\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\r\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\r\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\r\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\r\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\r\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\r\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\r\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\r\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\r\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\r\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\r\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\r\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\r\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\r\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\r\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\r\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\r\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\r\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\r\n].map(n => BigInt(n))))();\r\n\r\n// Temporary buffer, not used to store anything between runs\r\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\r\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\r\nexport class SHA512 extends SHA2<SHA512> {\r\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\r\n  // Also looks cleaner and easier to verify with spec.\r\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0x6a09e667 | 0;\r\n  Al = 0xf3bcc908 | 0;\r\n  Bh = 0xbb67ae85 | 0;\r\n  Bl = 0x84caa73b | 0;\r\n  Ch = 0x3c6ef372 | 0;\r\n  Cl = 0xfe94f82b | 0;\r\n  Dh = 0xa54ff53a | 0;\r\n  Dl = 0x5f1d36f1 | 0;\r\n  Eh = 0x510e527f | 0;\r\n  El = 0xade682d1 | 0;\r\n  Fh = 0x9b05688c | 0;\r\n  Fl = 0x2b3e6c1f | 0;\r\n  Gh = 0x1f83d9ab | 0;\r\n  Gl = 0xfb41bd6b | 0;\r\n  Hh = 0x5be0cd19 | 0;\r\n  Hl = 0x137e2179 | 0;\r\n\r\n  constructor() {\r\n    super(128, 64, 16, false);\r\n  }\r\n  // prettier-ignore\r\n  protected get(): [\r\n    number, number, number, number, number, number, number, number,\r\n    number, number, number, number, number, number, number, number\r\n  ] {\r\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\r\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\r\n  ) {\r\n    this.Ah = Ah | 0;\r\n    this.Al = Al | 0;\r\n    this.Bh = Bh | 0;\r\n    this.Bl = Bl | 0;\r\n    this.Ch = Ch | 0;\r\n    this.Cl = Cl | 0;\r\n    this.Dh = Dh | 0;\r\n    this.Dl = Dl | 0;\r\n    this.Eh = Eh | 0;\r\n    this.El = El | 0;\r\n    this.Fh = Fh | 0;\r\n    this.Fl = Fl | 0;\r\n    this.Gh = Gh | 0;\r\n    this.Gl = Gl | 0;\r\n    this.Hh = Hh | 0;\r\n    this.Hl = Hl | 0;\r\n  }\r\n  protected process(view: DataView, offset: number) {\r\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) {\r\n      SHA512_W_H[i] = view.getUint32(offset);\r\n      SHA512_W_L[i] = view.getUint32((offset += 4));\r\n    }\r\n    for (let i = 16; i < 80; i++) {\r\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\r\n      const W15h = SHA512_W_H[i - 15] | 0;\r\n      const W15l = SHA512_W_L[i - 15] | 0;\r\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\r\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\r\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\r\n      const W2h = SHA512_W_H[i - 2] | 0;\r\n      const W2l = SHA512_W_L[i - 2] | 0;\r\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\r\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\r\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\r\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\r\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\r\n      SHA512_W_H[i] = SUMh | 0;\r\n      SHA512_W_L[i] = SUMl | 0;\r\n    }\r\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\r\n    // Compression function main loop, 80 rounds\r\n    for (let i = 0; i < 80; i++) {\r\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\r\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\r\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\r\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\r\n      const CHIl = (El & Fl) ^ (~El & Gl);\r\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\r\n      // prettier-ignore\r\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\r\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\r\n      const T1l = T1ll | 0;\r\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\r\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\r\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\r\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\r\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\r\n      Hh = Gh | 0;\r\n      Hl = Gl | 0;\r\n      Gh = Fh | 0;\r\n      Gl = Fl | 0;\r\n      Fh = Eh | 0;\r\n      Fl = El | 0;\r\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\r\n      Dh = Ch | 0;\r\n      Dl = Cl | 0;\r\n      Ch = Bh | 0;\r\n      Cl = Bl | 0;\r\n      Bh = Ah | 0;\r\n      Bl = Al | 0;\r\n      const All = u64.add3L(T1l, sigma0l, MAJl);\r\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\r\n      Al = All | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\r\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\r\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\r\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\r\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\r\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\r\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\r\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\r\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\r\n  }\r\n  protected roundClean() {\r\n    SHA512_W_H.fill(0);\r\n    SHA512_W_L.fill(0);\r\n  }\r\n  destroy() {\r\n    this.buffer.fill(0);\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\r\n  }\r\n}\r\n\r\nclass SHA512_224 extends SHA512 {\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0x8c3d37c8 | 0;\r\n  Al = 0x19544da2 | 0;\r\n  Bh = 0x73e19966 | 0;\r\n  Bl = 0x89dcd4d6 | 0;\r\n  Ch = 0x1dfab7ae | 0;\r\n  Cl = 0x32ff9c82 | 0;\r\n  Dh = 0x679dd514 | 0;\r\n  Dl = 0x582f9fcf | 0;\r\n  Eh = 0x0f6d2b69 | 0;\r\n  El = 0x7bd44da8 | 0;\r\n  Fh = 0x77e36f73 | 0;\r\n  Fl = 0x04c48942 | 0;\r\n  Gh = 0x3f9d85a8 | 0;\r\n  Gl = 0x6a1d36c8 | 0;\r\n  Hh = 0x1112e6ad | 0;\r\n  Hl = 0x91d692a1 | 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\nclass SHA512_256 extends SHA512 {\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0x22312194 | 0;\r\n  Al = 0xfc2bf72c | 0;\r\n  Bh = 0x9f555fa3 | 0;\r\n  Bl = 0xc84c64c2 | 0;\r\n  Ch = 0x2393b86b | 0;\r\n  Cl = 0x6f53b151 | 0;\r\n  Dh = 0x96387719 | 0;\r\n  Dl = 0x5940eabd | 0;\r\n  Eh = 0x96283ee2 | 0;\r\n  El = 0xa88effe3 | 0;\r\n  Fh = 0xbe5e1e25 | 0;\r\n  Fl = 0x53863992 | 0;\r\n  Gh = 0x2b0199fc | 0;\r\n  Gl = 0x2c85b8aa | 0;\r\n  Hh = 0x0eb72ddc | 0;\r\n  Hl = 0x81c52ca2 | 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 32;\r\n  }\r\n}\r\n\r\nclass SHA384 extends SHA512 {\r\n  // h -- high 32 bits, l -- low 32 bits\r\n  Ah = 0xcbbb9d5d | 0;\r\n  Al = 0xc1059ed8 | 0;\r\n  Bh = 0x629a292a | 0;\r\n  Bl = 0x367cd507 | 0;\r\n  Ch = 0x9159015a | 0;\r\n  Cl = 0x3070dd17 | 0;\r\n  Dh = 0x152fecd8 | 0;\r\n  Dl = 0xf70e5939 | 0;\r\n  Eh = 0x67332667 | 0;\r\n  El = 0xffc00b31 | 0;\r\n  Fh = 0x8eb44a87 | 0;\r\n  Fl = 0x68581511 | 0;\r\n  Gh = 0xdb0c2e0d | 0;\r\n  Gl = 0x64f98fa7 | 0;\r\n  Hh = 0x47b5481d | 0;\r\n  Hl = 0xbefa4fa4 | 0;\r\n\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 48;\r\n  }\r\n}\r\n\r\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\r\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\r\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\r\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\r\n", "export function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\n\r\nexport function bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\r\n}\r\n\r\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nexport function hash(hash: Hash) {\r\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(hash.outputLen);\r\n  number(hash.blockLen);\r\n}\r\n\r\nexport function exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nexport function output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nconst assert = {\r\n  number,\r\n  bool,\r\n  bytes,\r\n  hash,\r\n  exists,\r\n  output,\r\n};\r\n\r\nexport default assert;\r\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated, we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n\r\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\r\n// early-throw an error because we don't support BE yet.\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\r\n\r\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const len = hex.length;\r\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n  const array = new Uint8Array(len / 2);\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = i * 2;\r\n    const hexByte = hex.slice(j, j + 2);\r\n    const byte = Number.parseInt(hexByte, 16);\r\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\r\n    array[i] = byte;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n  let pad = 0; // walk through each item, ensure they have proper type\r\n  arrays.forEach((a) => {\r\n    if (!u8a(a)) throw new Error('Uint8Array expected');\r\n    r.set(a, pad);\r\n    pad += a.length;\r\n  });\r\n  return r;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\n// Check if object doens't have custom constructor (like Uint8Array/Array)\r\nconst isPlainObject = (obj: any) =>\r\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\r\n\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "import assert from './_assert.js';\r\nimport { Hash, createView, Input, toBytes } from './utils.js';\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n// Base SHA2 class (RFC 6234)\r\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(\r\n    readonly blockLen: number,\r\n    public outputLen: number,\r\n    readonly padOffset: number,\r\n    readonly isLE: boolean\r\n  ) {\r\n    super();\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    assert.exists(this);\r\n    const { view, buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assert.exists(this);\r\n    assert.output(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    this.buffer.subarray(pos).fill(0);\r\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest() {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n}\r\n", "import { SHA2 } from './_sha2.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n\r\n// Choice: a ? b : c\r\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\r\n\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = new Uint32Array([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\r\n// prettier-ignore\r\nconst IV = new Uint32Array([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = new Uint32Array(64);\r\nclass SHA256 extends SHA2<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  A = IV[0] | 0;\r\n  B = IV[1] | 0;\r\n  C = IV[2] | 0;\r\n  D = IV[3] | 0;\r\n  E = IV[4] | 0;\r\n  F = IV[5] | 0;\r\n  G = IV[6] | 0;\r\n  H = IV[7] | 0;\r\n\r\n  constructor() {\r\n    super(64, 32, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ) {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean() {\r\n    SHA256_W.fill(0);\r\n  }\r\n  destroy() {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    this.buffer.fill(0);\r\n  }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n  A = 0xc1059ed8 | 0;\r\n  B = 0x367cd507 | 0;\r\n  C = 0x3070dd17 | 0;\r\n  D = 0xf70e5939 | 0;\r\n  E = 0xffc00b31 | 0;\r\n  F = 0x68581511 | 0;\r\n  G = 0x64f98fa7 | 0;\r\n  H = 0xbefa4fa4 | 0;\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = wrapConstructor(() => new SHA256());\r\nexport const sha224 = wrapConstructor(() => new SHA224());\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\r\n// This is OK: `abstract` directory does not use noble-hashes.\r\n// User may opt-in into using different hashing library. This way, noble-hashes\r\n// won't be included into their bundle.\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\r\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\r\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\r\nexport type CHash = {\r\n  (message: Uint8Array | string): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create(opts?: { dkLen?: number }): any; // For shake\r\n};\r\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\r\n\r\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\nexport function numberToHexUnpadded(num: number | bigint): string {\r\n  const hex = num.toString(16);\r\n  return hex.length & 1 ? `0${hex}` : hex;\r\n}\r\n\r\nexport function hexToNumber(hex: string): bigint {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  // Big Endian\r\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const len = hex.length;\r\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n  const array = new Uint8Array(len / 2);\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = i * 2;\r\n    const hexByte = hex.slice(j, j + 2);\r\n    const byte = Number.parseInt(hexByte, 16);\r\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\r\n    array[i] = byte;\r\n  }\r\n  return array;\r\n}\r\n\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\r\n  return hexToNumber(bytesToHex(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\r\n}\r\n\r\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\r\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\r\n  return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\r\n  return hexToBytes(numberToHexUnpadded(n));\r\n}\r\n\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'private key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\r\n  let res: Uint8Array;\r\n  if (typeof hex === 'string') {\r\n    try {\r\n      res = hexToBytes(hex);\r\n    } catch (e) {\r\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\r\n    }\r\n  } else if (u8a(hex)) {\r\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n    res = Uint8Array.from(hex);\r\n  } else {\r\n    throw new Error(`${title} must be hex string or Uint8Array`);\r\n  }\r\n  const len = res.length;\r\n  if (typeof expectedLength === 'number' && len !== expectedLength)\r\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\r\n  return res;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n  let pad = 0; // walk through each item, ensure they have proper type\r\n  arrays.forEach((a) => {\r\n    if (!u8a(a)) throw new Error('Uint8Array expected');\r\n    r.set(a, pad);\r\n    pad += a.length;\r\n  });\r\n  return r;\r\n}\r\n\r\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\r\n  // We don't care about timing attacks here\r\n  if (b1.length !== b2.length) return false;\r\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\r\n  return true;\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\n// Bit operations\r\n\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n */\r\nexport function bitLen(n: bigint) {\r\n  let len;\r\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\r\n  return len;\r\n}\r\n\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n: bigint, pos: number) {\r\n  return (n >> BigInt(pos)) & _1n;\r\n}\r\n\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\r\n  return n | ((value ? _1n : _0n) << BigInt(pos));\r\n};\r\n\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\r\n\r\n// DRBG\r\n\r\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\r\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\r\ntype Pred<T> = (v: Uint8Array) => T | undefined;\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg<T>(\r\n  hashLen: number,\r\n  qByteLen: number,\r\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\r\n): (seed: Uint8Array, predicate: Pred<T>) => T {\r\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\r\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\r\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\r\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n  let i = 0; // Iterations counter, will throw when over 1000\r\n  const reset = () => {\r\n    v.fill(1);\r\n    k.fill(0);\r\n    i = 0;\r\n  };\r\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n  const reseed = (seed = u8n()) => {\r\n    // HMAC-DRBG reseed() function. Steps D-G\r\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n    if (seed.length === 0) return;\r\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n  };\r\n  const gen = () => {\r\n    // HMAC-DRBG generate() function\r\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\r\n    let len = 0;\r\n    const out: Uint8Array[] = [];\r\n    while (len < qByteLen) {\r\n      v = h();\r\n      const sl = v.slice();\r\n      out.push(sl);\r\n      len += v.length;\r\n    }\r\n    return concatBytes(...out);\r\n  };\r\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\r\n    reset();\r\n    reseed(seed); // Steps D-G\r\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\r\n    while (!(res = pred(gen()))) reseed();\r\n    reset();\r\n    return res;\r\n  };\r\n  return genUntil;\r\n}\r\n\r\n// Validating curves and fields\r\n\r\nconst validatorFns = {\r\n  bigint: (val: any) => typeof val === 'bigint',\r\n  function: (val: any) => typeof val === 'function',\r\n  boolean: (val: any) => typeof val === 'boolean',\r\n  string: (val: any) => typeof val === 'string',\r\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\r\n  array: (val: any) => Array.isArray(val),\r\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\r\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n} as const;\r\ntype Validator = keyof typeof validatorFns;\r\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\n\r\nexport function validateObject<T extends Record<string, any>>(\r\n  object: T,\r\n  validators: ValMap<T>,\r\n  optValidators: ValMap<T> = {}\r\n) {\r\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\r\n    const checkVal = validatorFns[type];\r\n    if (typeof checkVal !== 'function')\r\n      throw new Error(`Invalid validator \"${type}\", expected function`);\r\n\r\n    const val = object[fieldName as keyof typeof object];\r\n    if (isOptional && val === undefined) return;\r\n    if (!checkVal(val, object)) {\r\n      throw new Error(\r\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\r\n      );\r\n    }\r\n  };\r\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\r\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\r\n  return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Utilities for modular arithmetics and finite fields\r\nimport {\r\n  bitMask,\r\n  numberToBytesBE,\r\n  numberToBytesLE,\r\n  bytesToNumberBE,\r\n  bytesToNumberLE,\r\n  ensureBytes,\r\n  validateObject,\r\n} from './utils.js';\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n// prettier-ignore\r\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\r\n// prettier-ignore\r\nconst _9n = BigInt(9), _16n = BigInt(16);\r\n\r\n// Calculates a modulo b\r\nexport function mod(a: bigint, b: bigint): bigint {\r\n  const result = a % b;\r\n  return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\n// TODO: use field version && remove\r\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\r\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\r\n  if (modulo === _1n) return _0n;\r\n  let res = _1n;\r\n  while (power > _0n) {\r\n    if (power & _1n) res = (res * num) % modulo;\r\n    num = (num * num) % modulo;\r\n    power >>= _1n;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\r\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\r\n  let res = x;\r\n  while (power-- > _0n) {\r\n    res *= res;\r\n    res %= modulo;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Inverses number over modulo\r\nexport function invert(number: bigint, modulo: bigint): bigint {\r\n  if (number === _0n || modulo <= _0n) {\r\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\r\n  }\r\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\r\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n  let a = mod(number, modulo);\r\n  let b = modulo;\r\n  // prettier-ignore\r\n  let x = _0n, y = _1n, u = _1n, v = _0n;\r\n  while (a !== _0n) {\r\n    // JIT applies optimization if those two lines follow each other\r\n    const q = b / a;\r\n    const r = b % a;\r\n    const m = x - u * q;\r\n    const n = y - v * q;\r\n    // prettier-ignore\r\n    b = a, a = r, x = u, y = v, u = m, v = n;\r\n  }\r\n  const gcd = b;\r\n  if (gcd !== _1n) throw new Error('invert: does not exist');\r\n  return mod(x, modulo);\r\n}\r\n\r\n// Tonelli-Shanks algorithm\r\n// Paper 1: https://eprint.iacr.org/2012/685.pdf (page 12)\r\n// Paper 2: Square Roots from 1; 24, 51, 10 to Dan Shanks\r\nexport function tonelliShanks(P: bigint) {\r\n  // Legendre constant: used to calculate Legendre symbol (a | p),\r\n  // which denotes the value of a^((p-1)/2) (mod p).\r\n  // (a | p) ≡ 1    if a is a square (mod p)\r\n  // (a | p) ≡ -1   if a is not a square (mod p)\r\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n  const legendreC = (P - _1n) / _2n;\r\n\r\n  let Q: bigint, S: number, Z: bigint;\r\n  // Step 1: By factoring out powers of 2 from p - 1,\r\n  // find q and s such that p - 1 = q*(2^s) with q odd\r\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\r\n\r\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\r\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\r\n\r\n  // Fast-path\r\n  if (S === 1) {\r\n    const p1div4 = (P + _1n) / _4n;\r\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\r\n      const root = Fp.pow(n, p1div4);\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // Slow-path\r\n  const Q1div2 = (Q + _1n) / _2n;\r\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\r\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\r\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\r\n    let r = S;\r\n    // TODO: will fail at Fp2/etc\r\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\r\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\r\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\r\n\r\n    while (!Fp.eql(b, Fp.ONE)) {\r\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\r\n      // Find m such b^(2^m)==1\r\n      let m = 1;\r\n      for (let t2 = Fp.sqr(b); m < r; m++) {\r\n        if (Fp.eql(t2, Fp.ONE)) break;\r\n        t2 = Fp.sqr(t2); // t2 *= t2\r\n      }\r\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\r\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\r\n      g = Fp.sqr(ge); // g = ge * ge\r\n      x = Fp.mul(x, ge); // x *= ge\r\n      b = Fp.mul(b, g); // b *= g\r\n      r = m;\r\n    }\r\n    return x;\r\n  };\r\n}\r\n\r\nexport function FpSqrt(P: bigint) {\r\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\r\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n\r\n  // P ≡ 3 (mod 4)\r\n  // √n = n^((P+1)/4)\r\n  if (P % _4n === _3n) {\r\n    // Not all roots possible!\r\n    // const ORDER =\r\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\r\n    // const NUM = 72057594037927816n;\r\n    const p1div4 = (P + _1n) / _4n;\r\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\r\n      const root = Fp.pow(n, p1div4);\r\n      // Throw if root**2 != n\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\r\n  if (P % _8n === _5n) {\r\n    const c1 = (P - _5n) / _8n;\r\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\r\n      const n2 = Fp.mul(n, _2n);\r\n      const v = Fp.pow(n2, c1);\r\n      const nv = Fp.mul(n, v);\r\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // P ≡ 9 (mod 16)\r\n  if (P % _16n === _9n) {\r\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\r\n    // Means we cannot use sqrt for constants at all!\r\n    //\r\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n    // sqrt = (x) => {\r\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\r\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\r\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\r\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\r\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\r\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\r\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\r\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\r\n    // }\r\n  }\r\n\r\n  // Other cases: Tonelli-Shanks algorithm\r\n  return tonelliShanks(P);\r\n}\r\n\r\n// Little-endian check for first LE bit (last BE bit);\r\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\r\n\r\n// Field is not always over prime, Fp2 for example has ORDER(q)=p^m\r\nexport interface IField<T> {\r\n  ORDER: bigint;\r\n  BYTES: number;\r\n  BITS: number;\r\n  MASK: bigint;\r\n  ZERO: T;\r\n  ONE: T;\r\n  // 1-arg\r\n  create: (num: T) => T;\r\n  isValid: (num: T) => boolean;\r\n  is0: (num: T) => boolean;\r\n  neg(num: T): T;\r\n  inv(num: T): T;\r\n  sqrt(num: T): T;\r\n  sqr(num: T): T;\r\n  // 2-args\r\n  eql(lhs: T, rhs: T): boolean;\r\n  add(lhs: T, rhs: T): T;\r\n  sub(lhs: T, rhs: T): T;\r\n  mul(lhs: T, rhs: T | bigint): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  div(lhs: T, rhs: T | bigint): T;\r\n  // N for NonNormalized (for now)\r\n  addN(lhs: T, rhs: T): T;\r\n  subN(lhs: T, rhs: T): T;\r\n  mulN(lhs: T, rhs: T | bigint): T;\r\n  sqrN(num: T): T;\r\n\r\n  // Optional\r\n  // Should be same as sgn0 function in https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/\r\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\r\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\r\n  // legendre?(num: T): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  invertBatch: (lst: T[]) => T[];\r\n  toBytes(num: T): Uint8Array;\r\n  fromBytes(bytes: Uint8Array): T;\r\n  // If c is False, CMOV returns a, otherwise it returns b.\r\n  cmov(a: T, b: T, c: boolean): T;\r\n}\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n  'addN', 'subN', 'mulN', 'sqrN'\r\n] as const;\r\nexport function validateField<T>(field: IField<T>) {\r\n  const initial = {\r\n    ORDER: 'bigint',\r\n    MASK: 'bigint',\r\n    BYTES: 'isSafeInteger',\r\n    BITS: 'isSafeInteger',\r\n  } as Record<string, string>;\r\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\r\n    map[val] = 'function';\r\n    return map;\r\n  }, initial);\r\n  return validateObject(field, opts);\r\n}\r\n\r\n// Generic field functions\r\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\r\n  // Should have same speed as pow for bigints\r\n  // TODO: benchmark!\r\n  if (power < _0n) throw new Error('Expected power > 0');\r\n  if (power === _0n) return f.ONE;\r\n  if (power === _1n) return num;\r\n  let p = f.ONE;\r\n  let d = num;\r\n  while (power > _0n) {\r\n    if (power & _1n) p = f.mul(p, d);\r\n    d = f.sqr(d);\r\n    power >>= _1n;\r\n  }\r\n  return p;\r\n}\r\n\r\n// 0 is non-invertible: non-batched version will throw on 0\r\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\r\n  const tmp = new Array(nums.length);\r\n  // Walk from first to last, multiply them by each other MOD p\r\n  const lastMultiplied = nums.reduce((acc, num, i) => {\r\n    if (f.is0(num)) return acc;\r\n    tmp[i] = acc;\r\n    return f.mul(acc, num);\r\n  }, f.ONE);\r\n  // Invert last element\r\n  const inverted = f.inv(lastMultiplied);\r\n  // Walk from last to first, multiply them by inverted each other MOD p\r\n  nums.reduceRight((acc, num, i) => {\r\n    if (f.is0(num)) return acc;\r\n    tmp[i] = f.mul(acc, tmp[i]);\r\n    return f.mul(acc, num);\r\n  }, inverted);\r\n  return tmp;\r\n}\r\n\r\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\r\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\r\n}\r\n\r\n// This function returns True whenever the value x is a square in the field F.\r\nexport function FpIsSquare<T>(f: IField<T>) {\r\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\r\n  return (x: T): boolean => {\r\n    const p = f.pow(x, legendreConst);\r\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\r\n  };\r\n}\r\n\r\n// CURVE.n lengths\r\nexport function nLength(n: bigint, nBitLength?: number) {\r\n  // Bit size, byte size of CURVE.n\r\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n  const nByteLength = Math.ceil(_nBitLength / 8);\r\n  return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n\r\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\r\n/**\r\n * Initializes a galois field over prime. Non-primes are not supported for now.\r\n * Do not init in loop: slow. Very fragile: always run a benchmark on change.\r\n * Major performance gains:\r\n * a) non-normalized operations like mulN instead of mul\r\n * b) `Object.freeze`\r\n * c) Same object shape: never add or remove keys\r\n * @param ORDER prime positive bigint\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (def: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nexport function Field(\r\n  ORDER: bigint,\r\n  bitLen?: number,\r\n  isLE = false,\r\n  redef: Partial<IField<bigint>> = {}\r\n): Readonly<FpField> {\r\n  if (ORDER <= _0n) throw new Error(`Expected Fp ORDER > 0, got ${ORDER}`);\r\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\r\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\r\n  const sqrtP = FpSqrt(ORDER);\r\n  const f: Readonly<FpField> = Object.freeze({\r\n    ORDER,\r\n    BITS,\r\n    BYTES,\r\n    MASK: bitMask(BITS),\r\n    ZERO: _0n,\r\n    ONE: _1n,\r\n    create: (num) => mod(num, ORDER),\r\n    isValid: (num) => {\r\n      if (typeof num !== 'bigint')\r\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\r\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n    },\r\n    is0: (num) => num === _0n,\r\n    isOdd: (num) => (num & _1n) === _1n,\r\n    neg: (num) => mod(-num, ORDER),\r\n    eql: (lhs, rhs) => lhs === rhs,\r\n\r\n    sqr: (num) => mod(num * num, ORDER),\r\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n    pow: (num, power) => FpPow(f, num, power),\r\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n\r\n    // Same as above, but doesn't normalize\r\n    sqrN: (num) => num * num,\r\n    addN: (lhs, rhs) => lhs + rhs,\r\n    subN: (lhs, rhs) => lhs - rhs,\r\n    mulN: (lhs, rhs) => lhs * rhs,\r\n\r\n    inv: (num) => invert(num, ORDER),\r\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\r\n    invertBatch: (lst) => FpInvertBatch(f, lst),\r\n    // TODO: do we really need constant cmov?\r\n    // We don't have const-time bigints anyway, so probably will be not very useful\r\n    cmov: (a, b, c) => (c ? b : a),\r\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\r\n    fromBytes: (bytes) => {\r\n      if (bytes.length !== BYTES)\r\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\r\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n    },\r\n  } as FpField);\r\n  return Object.freeze(f);\r\n}\r\n\r\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\r\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\n\r\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\r\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n\r\n/**\r\n * FIPS 186 B.4.1-compliant \"constant-time\" private key generation utility.\r\n * Can take (n+8) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 40 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. curveFn.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nexport function hashToPrivateScalar(\r\n  hash: string | Uint8Array,\r\n  groupOrder: bigint,\r\n  isLE = false\r\n): bigint {\r\n  hash = ensureBytes('privateHash', hash);\r\n  const hashLen = hash.length;\r\n  const minLen = nLength(groupOrder).nByteLength + 8;\r\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\r\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\r\n  return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Abelian group utilities\r\nimport { IField, validateField, nLength } from './modular.js';\r\nimport { validateObject } from './utils.js';\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n\r\nexport type AffinePoint<T> = {\r\n  x: T;\r\n  y: T;\r\n} & { z?: never; t?: never };\r\n\r\nexport interface Group<T extends Group<T>> {\r\n  double(): T;\r\n  negate(): T;\r\n  add(other: T): T;\r\n  subtract(other: T): T;\r\n  equals(other: T): boolean;\r\n  multiply(scalar: bigint): T;\r\n}\r\n\r\nexport type GroupConstructor<T> = {\r\n  BASE: T;\r\n  ZERO: T;\r\n};\r\nexport type Mapper<T> = (i: T[]) => T[];\r\n\r\n// Elliptic curve multiplication of Point by scalar. Fragile.\r\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n// Creates precomputation tables for fast multiplication:\r\n// - private scalar is split by fixed size windows of W bits\r\n// - every window point is collected from window's table & added to accumulator\r\n// - since windows are different, same point inside tables won't be accessed more than once per calc\r\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n// - +1 window is neccessary for wNAF\r\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\r\n// windows to be in different memory locations\r\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\r\n  const constTimeNegate = (condition: boolean, item: T): T => {\r\n    const neg = item.negate();\r\n    return condition ? neg : item;\r\n  };\r\n  const opts = (W: number) => {\r\n    const windows = Math.ceil(bits / W) + 1; // +1, because\r\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\r\n    return { windows, windowSize };\r\n  };\r\n  return {\r\n    constTimeNegate,\r\n    // non-const time multiplication ladder\r\n    unsafeLadder(elm: T, n: bigint) {\r\n      let p = c.ZERO;\r\n      let d: T = elm;\r\n      while (n > _0n) {\r\n        if (n & _1n) p = p.add(d);\r\n        d = d.double();\r\n        n >>= _1n;\r\n      }\r\n      return p;\r\n    },\r\n\r\n    /**\r\n     * Creates a wNAF precomputation window. Used for caching.\r\n     * Default window size is set by `utils.precompute()` and is equal to 8.\r\n     * Number of precomputed points depends on the curve size:\r\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n     * - 𝑊 is the window size\r\n     * - 𝑛 is the bitlength of the curve order.\r\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n     * @returns precomputed point tables flattened to a single array\r\n     */\r\n    precomputeWindow(elm: T, W: number): Group<T>[] {\r\n      const { windows, windowSize } = opts(W);\r\n      const points: T[] = [];\r\n      let p: T = elm;\r\n      let base = p;\r\n      for (let window = 0; window < windows; window++) {\r\n        base = p;\r\n        points.push(base);\r\n        // =1, because we skip zero\r\n        for (let i = 1; i < windowSize; i++) {\r\n          base = base.add(p);\r\n          points.push(base);\r\n        }\r\n        p = base.double();\r\n      }\r\n      return points;\r\n    },\r\n\r\n    /**\r\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n     * @param W window size\r\n     * @param precomputes precomputed tables\r\n     * @param n scalar (we don't check here, but should be less than curve order)\r\n     * @returns real and fake (for const-time) points\r\n     */\r\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\r\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\r\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\r\n      const { windows, windowSize } = opts(W);\r\n\r\n      let p = c.ZERO;\r\n      let f = c.BASE;\r\n\r\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\r\n      const maxNumber = 2 ** W;\r\n      const shiftBy = BigInt(W);\r\n\r\n      for (let window = 0; window < windows; window++) {\r\n        const offset = window * windowSize;\r\n        // Extract W bits.\r\n        let wbits = Number(n & mask);\r\n\r\n        // Shift number by W bits.\r\n        n >>= shiftBy;\r\n\r\n        // If the bits are bigger than max size, we'll split those.\r\n        // +224 => 256 - 32\r\n        if (wbits > windowSize) {\r\n          wbits -= maxNumber;\r\n          n += _1n;\r\n        }\r\n\r\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n        // there is negate now: it is possible that negated element from low value\r\n        // would be the same as high element, which will create carry into next window.\r\n        // It's not obvious how this can fail, but still worth investigating later.\r\n\r\n        // Check if we're onto Zero point.\r\n        // Add random point inside current window to f.\r\n        const offset1 = offset;\r\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\r\n        const cond1 = window % 2 !== 0;\r\n        const cond2 = wbits < 0;\r\n        if (wbits === 0) {\r\n          // The most important part for const-time getPublicKey\r\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\r\n        } else {\r\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\r\n        }\r\n      }\r\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\r\n      // Even if the variable is still unused, there are some checks which will\r\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\r\n      // At this point there is a way to F be infinity-point even if p is not,\r\n      // which makes it less const-time: around 1 bigint multiply.\r\n      return { p, f };\r\n    },\r\n\r\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\r\n      // @ts-ignore\r\n      const W: number = P._WINDOW_SIZE || 1;\r\n      // Calculate precomputes on a first run, reuse them after\r\n      let comp = precomputesMap.get(P);\r\n      if (!comp) {\r\n        comp = this.precomputeWindow(P, W) as T[];\r\n        if (W !== 1) {\r\n          precomputesMap.set(P, transform(comp));\r\n        }\r\n      }\r\n      return this.wNAF(W, comp, n);\r\n    },\r\n  };\r\n}\r\n\r\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\r\n// Though generator can be different (Fp2 / Fp6 for BLS).\r\nexport type BasicCurve<T> = {\r\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\r\n  n: bigint; // Curve order, total count of valid points in the field\r\n  nBitLength?: number; // bit length of curve order\r\n  nByteLength?: number; // byte length of curve order\r\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\r\n  hEff?: bigint; // Number to multiply to clear cofactor\r\n  Gx: T; // base point X coordinate\r\n  Gy: T; // base point Y coordinate\r\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\r\n};\r\n\r\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\r\n  validateField(curve.Fp);\r\n  validateObject(\r\n    curve,\r\n    {\r\n      n: 'bigint',\r\n      h: 'bigint',\r\n      Gx: 'field',\r\n      Gy: 'field',\r\n    },\r\n    {\r\n      nBitLength: 'isSafeInteger',\r\n      nByteLength: 'isSafeInteger',\r\n    }\r\n  );\r\n  // Set defaults\r\n  return Object.freeze({\r\n    ...nLength(curve.n, curve.nBitLength),\r\n    ...curve,\r\n    ...{ p: curve.Fp.ORDER },\r\n  } as const);\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\r\nimport * as mod from './modular.js';\r\nimport * as ut from './utils.js';\r\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\r\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\r\n\r\nexport type { AffinePoint };\r\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\r\ntype EndomorphismOpts = {\r\n  beta: bigint;\r\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n};\r\nexport type BasicWCurve<T> = BasicCurve<T> & {\r\n  // Params: a, b\r\n  a: T;\r\n  b: T;\r\n\r\n  // Optional params\r\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\r\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\r\n  // When a cofactor != 1, there can be an effective methods to:\r\n  // 1. Determine whether a point is torsion-free\r\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\r\n  // 2. Clear torsion component\r\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\r\n};\r\n\r\ntype Entropy = Hex | true;\r\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\r\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\r\n\r\n/**\r\n * ### Design rationale for types\r\n *\r\n * * Interaction between classes from different curves should fail:\r\n *   `k256.Point.BASE.add(p256.Point.BASE)`\r\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\r\n * * Different calls of `curve()` would return different classes -\r\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\r\n *   it won't affect others\r\n *\r\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\r\n *\r\n * We can use generic types via some param, like curve opts, but that would:\r\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\r\n *     which is hard to debug.\r\n *     2. Params can be generic and we can't enforce them to be constant value:\r\n *     if somebody creates curve from non-constant params,\r\n *     it would be allowed to interact with other curves with non-constant params\r\n *\r\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\r\n */\r\n\r\n// Instance for 3d XYZ points\r\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\r\n  readonly px: T;\r\n  readonly py: T;\r\n  readonly pz: T;\r\n  get x(): T;\r\n  get y(): T;\r\n  multiply(scalar: bigint): ProjPointType<T>;\r\n  toAffine(iz?: T): AffinePoint<T>;\r\n  isTorsionFree(): boolean;\r\n  clearCofactor(): ProjPointType<T>;\r\n  assertValidity(): void;\r\n  hasEvenY(): boolean;\r\n  toRawBytes(isCompressed?: boolean): Uint8Array;\r\n  toHex(isCompressed?: boolean): string;\r\n\r\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\r\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\r\n  _setWindowSize(windowSize: number): void;\r\n}\r\n// Static methods for 3d XYZ points\r\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\r\n  new (x: T, y: T, z: T): ProjPointType<T>;\r\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\r\n  fromHex(hex: Hex): ProjPointType<T>;\r\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\r\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\r\n}\r\n\r\nexport type CurvePointsType<T> = BasicWCurve<T> & {\r\n  // Bytes\r\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\r\n};\r\n\r\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\r\n  const opts = validateBasic(curve);\r\n  ut.validateObject(\r\n    opts,\r\n    {\r\n      a: 'field',\r\n      b: 'field',\r\n    },\r\n    {\r\n      allowedPrivateKeyLengths: 'array',\r\n      wrapPrivateKey: 'boolean',\r\n      isTorsionFree: 'function',\r\n      clearCofactor: 'function',\r\n      allowInfinityPoint: 'boolean',\r\n      fromBytes: 'function',\r\n      toBytes: 'function',\r\n    }\r\n  );\r\n  const { endo, Fp, a } = opts;\r\n  if (endo) {\r\n    if (!Fp.eql(a, Fp.ZERO)) {\r\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\r\n    }\r\n    if (\r\n      typeof endo !== 'object' ||\r\n      typeof endo.beta !== 'bigint' ||\r\n      typeof endo.splitScalar !== 'function'\r\n    ) {\r\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\r\n    }\r\n  }\r\n  return Object.freeze({ ...opts } as const);\r\n}\r\n\r\nexport type CurvePointsRes<T> = {\r\n  ProjectivePoint: ProjConstructor<T>;\r\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n  weierstrassEquation: (x: T) => T;\r\n  isWithinCurveOrder: (num: bigint) => boolean;\r\n};\r\n\r\n// ASN.1 DER encoding utilities\r\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\r\nexport const DER = {\r\n  // asn.1 DER encoding utils\r\n  Err: class DERErr extends Error {\r\n    constructor(m = '') {\r\n      super(m);\r\n    }\r\n  },\r\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\r\n    const { Err: E } = DER;\r\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\r\n    const len = data[1];\r\n    const res = data.subarray(2, len + 2);\r\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\r\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n    // since we always use positive integers here. It must always be empty:\r\n    // - add zero byte if exists\r\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\r\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\r\n      throw new E('Invalid signature integer: unnecessary leading zero');\r\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\r\n  },\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\r\n    // parse DER signature\r\n    const { Err: E } = DER;\r\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\r\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\r\n    let l = data.length;\r\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\r\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\r\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\r\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\r\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\r\n    return { r, s };\r\n  },\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\r\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\r\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\r\n    const h = (num: number | bigint) => {\r\n      const hex = num.toString(16);\r\n      return hex.length & 1 ? `0${hex}` : hex;\r\n    };\r\n    const s = slice(h(sig.s));\r\n    const r = slice(h(sig.r));\r\n    const shl = s.length / 2;\r\n    const rhl = r.length / 2;\r\n    const sl = h(shl);\r\n    const rl = h(rhl);\r\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\r\n  },\r\n};\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\n\r\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\r\n  const CURVE = validatePointOpts(opts);\r\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\r\n\r\n  const toBytes =\r\n    CURVE.toBytes ||\r\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\r\n      const a = point.toAffine();\r\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\r\n    });\r\n  const fromBytes =\r\n    CURVE.fromBytes ||\r\n    ((bytes: Uint8Array) => {\r\n      // const head = bytes[0];\r\n      const tail = bytes.subarray(1);\r\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\r\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n      return { x, y };\r\n    });\r\n\r\n  /**\r\n   * y² = x³ + ax + b: Short weierstrass curve formula\r\n   * @returns y²\r\n   */\r\n  function weierstrassEquation(x: T): T {\r\n    const { a, b } = CURVE;\r\n    const x2 = Fp.sqr(x); // x * x\r\n    const x3 = Fp.mul(x2, x); // x2 * x\r\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\r\n  }\r\n  // Validate whether the passed curve params are valid.\r\n  // We check if curve equation works for generator point.\r\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\r\n  // ProjectivePoint class has not been initialized yet.\r\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\r\n    throw new Error('bad generator point: equation left != right');\r\n\r\n  // Valid group elements reside in range 1..n-1\r\n  function isWithinCurveOrder(num: bigint): boolean {\r\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\r\n  }\r\n  function assertGE(num: bigint) {\r\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\r\n  }\r\n  // Validates if priv key is valid and converts it to bigint.\r\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\r\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\r\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\r\n    if (lengths && typeof key !== 'bigint') {\r\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\r\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\r\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\r\n      key = key.padStart(nByteLength * 2, '0');\r\n    }\r\n    let num: bigint;\r\n    try {\r\n      num =\r\n        typeof key === 'bigint'\r\n          ? key\r\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\r\n    } catch (error) {\r\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\r\n    }\r\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\r\n    assertGE(num); // num in range [1..N-1]\r\n    return num;\r\n  }\r\n\r\n  const pointPrecomputes = new Map<Point, Point[]>();\r\n  function assertPrjPoint(other: unknown) {\r\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\r\n  }\r\n  /**\r\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\r\n   * Default Point works in 2d / affine coordinates: (x, y)\r\n   * We're doing calculations in projective, because its operations don't require costly inversion.\r\n   */\r\n  class Point implements ProjPointType<T> {\r\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\r\n\r\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\r\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\r\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\r\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\r\n    }\r\n\r\n    // Does not validate if the point is on-curve.\r\n    // Use fromHex instead, or call assertValidity() later.\r\n    static fromAffine(p: AffinePoint<T>): Point {\r\n      const { x, y } = p || {};\r\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\r\n      if (p instanceof Point) throw new Error('projective point not allowed');\r\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\r\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\r\n      if (is0(x) && is0(y)) return Point.ZERO;\r\n      return new Point(x, y, Fp.ONE);\r\n    }\r\n\r\n    get x(): T {\r\n      return this.toAffine().x;\r\n    }\r\n    get y(): T {\r\n      return this.toAffine().y;\r\n    }\r\n\r\n    /**\r\n     * Takes a bunch of Projective Points but executes only one\r\n     * inversion on all of them. Inversion is very slow operation,\r\n     * so this improves performance massively.\r\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n     */\r\n    static normalizeZ(points: Point[]): Point[] {\r\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\r\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n    }\r\n\r\n    /**\r\n     * Converts hash string or Uint8Array to Point.\r\n     * @param hex short/long ECDSA hex\r\n     */\r\n    static fromHex(hex: Hex): Point {\r\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\r\n      P.assertValidity();\r\n      return P;\r\n    }\r\n\r\n    // Multiplies generator point by privateKey.\r\n    static fromPrivateKey(privateKey: PrivKey) {\r\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\r\n    }\r\n\r\n    // We calculate precomputes for elliptic curve point multiplication\r\n    // using windowed method. This specifies window size and\r\n    // stores precomputed values. Usually only base point would be precomputed.\r\n    _WINDOW_SIZE?: number;\r\n\r\n    // \"Private method\", don't use it directly\r\n    _setWindowSize(windowSize: number) {\r\n      this._WINDOW_SIZE = windowSize;\r\n      pointPrecomputes.delete(this);\r\n    }\r\n\r\n    // A point on curve is valid if it conforms to equation.\r\n    assertValidity(): void {\r\n      // Zero is valid point too!\r\n      if (this.is0()) {\r\n        if (CURVE.allowInfinityPoint) return;\r\n        throw new Error('bad point: ZERO');\r\n      }\r\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n      const { x, y } = this.toAffine();\r\n      // Check if x, y are valid field elements\r\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\r\n      const left = Fp.sqr(y); // y²\r\n      const right = weierstrassEquation(x); // x³ + ax + b\r\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\r\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\r\n    }\r\n    hasEvenY(): boolean {\r\n      const { y } = this.toAffine();\r\n      if (Fp.isOdd) return !Fp.isOdd(y);\r\n      throw new Error(\"Field doesn't support isOdd\");\r\n    }\r\n\r\n    /**\r\n     * Compare one point to another.\r\n     */\r\n    equals(other: Point): boolean {\r\n      assertPrjPoint(other);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      const { px: X2, py: Y2, pz: Z2 } = other;\r\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n      return U1 && U2;\r\n    }\r\n\r\n    /**\r\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\r\n     */\r\n    negate(): Point {\r\n      return new Point(this.px, Fp.neg(this.py), this.pz);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free doubling formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 3\r\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n    double() {\r\n      const { a, b } = CURVE;\r\n      const b3 = Fp.mul(b, _3n);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      let t0 = Fp.mul(X1, X1); // step 1\r\n      let t1 = Fp.mul(Y1, Y1);\r\n      let t2 = Fp.mul(Z1, Z1);\r\n      let t3 = Fp.mul(X1, Y1);\r\n      t3 = Fp.add(t3, t3); // step 5\r\n      Z3 = Fp.mul(X1, Z1);\r\n      Z3 = Fp.add(Z3, Z3);\r\n      X3 = Fp.mul(a, Z3);\r\n      Y3 = Fp.mul(b3, t2);\r\n      Y3 = Fp.add(X3, Y3); // step 10\r\n      X3 = Fp.sub(t1, Y3);\r\n      Y3 = Fp.add(t1, Y3);\r\n      Y3 = Fp.mul(X3, Y3);\r\n      X3 = Fp.mul(t3, X3);\r\n      Z3 = Fp.mul(b3, Z3); // step 15\r\n      t2 = Fp.mul(a, t2);\r\n      t3 = Fp.sub(t0, t2);\r\n      t3 = Fp.mul(a, t3);\r\n      t3 = Fp.add(t3, Z3);\r\n      Z3 = Fp.add(t0, t0); // step 20\r\n      t0 = Fp.add(Z3, t0);\r\n      t0 = Fp.add(t0, t2);\r\n      t0 = Fp.mul(t0, t3);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t2 = Fp.mul(Y1, Z1); // step 25\r\n      t2 = Fp.add(t2, t2);\r\n      t0 = Fp.mul(t2, t3);\r\n      X3 = Fp.sub(X3, t0);\r\n      Z3 = Fp.mul(t2, t1);\r\n      Z3 = Fp.add(Z3, Z3); // step 30\r\n      Z3 = Fp.add(Z3, Z3);\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free addition formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 1\r\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n    add(other: Point): Point {\r\n      assertPrjPoint(other);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      const { px: X2, py: Y2, pz: Z2 } = other;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      const a = CURVE.a;\r\n      const b3 = Fp.mul(CURVE.b, _3n);\r\n      let t0 = Fp.mul(X1, X2); // step 1\r\n      let t1 = Fp.mul(Y1, Y2);\r\n      let t2 = Fp.mul(Z1, Z2);\r\n      let t3 = Fp.add(X1, Y1);\r\n      let t4 = Fp.add(X2, Y2); // step 5\r\n      t3 = Fp.mul(t3, t4);\r\n      t4 = Fp.add(t0, t1);\r\n      t3 = Fp.sub(t3, t4);\r\n      t4 = Fp.add(X1, Z1);\r\n      let t5 = Fp.add(X2, Z2); // step 10\r\n      t4 = Fp.mul(t4, t5);\r\n      t5 = Fp.add(t0, t2);\r\n      t4 = Fp.sub(t4, t5);\r\n      t5 = Fp.add(Y1, Z1);\r\n      X3 = Fp.add(Y2, Z2); // step 15\r\n      t5 = Fp.mul(t5, X3);\r\n      X3 = Fp.add(t1, t2);\r\n      t5 = Fp.sub(t5, X3);\r\n      Z3 = Fp.mul(a, t4);\r\n      X3 = Fp.mul(b3, t2); // step 20\r\n      Z3 = Fp.add(X3, Z3);\r\n      X3 = Fp.sub(t1, Z3);\r\n      Z3 = Fp.add(t1, Z3);\r\n      Y3 = Fp.mul(X3, Z3);\r\n      t1 = Fp.add(t0, t0); // step 25\r\n      t1 = Fp.add(t1, t0);\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.mul(b3, t4);\r\n      t1 = Fp.add(t1, t2);\r\n      t2 = Fp.sub(t0, t2); // step 30\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.add(t4, t2);\r\n      t0 = Fp.mul(t1, t4);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t0 = Fp.mul(t5, t4); // step 35\r\n      X3 = Fp.mul(t3, X3);\r\n      X3 = Fp.sub(X3, t0);\r\n      t0 = Fp.mul(t3, t1);\r\n      Z3 = Fp.mul(t5, Z3);\r\n      Z3 = Fp.add(Z3, t0); // step 40\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    subtract(other: Point) {\r\n      return this.add(other.negate());\r\n    }\r\n\r\n    private is0() {\r\n      return this.equals(Point.ZERO);\r\n    }\r\n    private wNAF(n: bigint): { p: Point; f: Point } {\r\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\r\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\r\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n     * It's faster, but should only be used when you don't care about\r\n     * an exposed private key e.g. sig verification, which works over *public* keys.\r\n     */\r\n    multiplyUnsafe(n: bigint): Point {\r\n      const I = Point.ZERO;\r\n      if (n === _0n) return I;\r\n      assertGE(n); // Will throw on 0\r\n      if (n === _1n) return this;\r\n      const { endo } = CURVE;\r\n      if (!endo) return wnaf.unsafeLadder(this, n);\r\n\r\n      // Apply endomorphism\r\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n      let k1p = I;\r\n      let k2p = I;\r\n      let d: Point = this;\r\n      while (k1 > _0n || k2 > _0n) {\r\n        if (k1 & _1n) k1p = k1p.add(d);\r\n        if (k2 & _1n) k2p = k2p.add(d);\r\n        d = d.double();\r\n        k1 >>= _1n;\r\n        k2 >>= _1n;\r\n      }\r\n      if (k1neg) k1p = k1p.negate();\r\n      if (k2neg) k2p = k2p.negate();\r\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n      return k1p.add(k2p);\r\n    }\r\n\r\n    /**\r\n     * Constant time multiplication.\r\n     * Uses wNAF method. Windowed method may be 10% faster,\r\n     * but takes 2x longer to generate and consumes 2x memory.\r\n     * Uses precomputes when available.\r\n     * Uses endomorphism for Koblitz curves.\r\n     * @param scalar by which the point would be multiplied\r\n     * @returns New point\r\n     */\r\n    multiply(scalar: bigint): Point {\r\n      assertGE(scalar);\r\n      let n = scalar;\r\n      let point: Point, fake: Point; // Fake point is used to const-time mult\r\n      const { endo } = CURVE;\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n        let { p: k1p, f: f1p } = this.wNAF(k1);\r\n        let { p: k2p, f: f2p } = this.wNAF(k2);\r\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\r\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\r\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n        point = k1p.add(k2p);\r\n        fake = f1p.add(f2p);\r\n      } else {\r\n        const { p, f } = this.wNAF(n);\r\n        point = p;\r\n        fake = f;\r\n      }\r\n      // Normalize `z` for both points, but return only real one\r\n      return Point.normalizeZ([point, fake])[0];\r\n    }\r\n\r\n    /**\r\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\r\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\r\n     * The trick could be useful if both P and Q are not G (not in our case).\r\n     * @returns non-zero affine point\r\n     */\r\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\r\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\r\n      const mul = (\r\n        P: Point,\r\n        a: bigint // Select faster multiply() method\r\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\r\n      const sum = mul(this, a).add(mul(Q, b));\r\n      return sum.is0() ? undefined : sum;\r\n    }\r\n\r\n    // Converts Projective point to affine (x, y) coordinates.\r\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n    // (x, y, z) ∋ (x=x/z, y=y/z)\r\n    toAffine(iz?: T): AffinePoint<T> {\r\n      const { px: x, py: y, pz: z } = this;\r\n      const is0 = this.is0();\r\n      // If invZ was 0, we return zero point. However we still want to execute\r\n      // all operations, so we replace invZ with a random number, 1.\r\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\r\n      const ax = Fp.mul(x, iz);\r\n      const ay = Fp.mul(y, iz);\r\n      const zz = Fp.mul(z, iz);\r\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\r\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\r\n      return { x: ax, y: ay };\r\n    }\r\n    isTorsionFree(): boolean {\r\n      const { h: cofactor, isTorsionFree } = CURVE;\r\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\r\n      if (isTorsionFree) return isTorsionFree(Point, this);\r\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\r\n    }\r\n    clearCofactor(): Point {\r\n      const { h: cofactor, clearCofactor } = CURVE;\r\n      if (cofactor === _1n) return this; // Fast-path\r\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\r\n      return this.multiplyUnsafe(CURVE.h);\r\n    }\r\n\r\n    toRawBytes(isCompressed = true): Uint8Array {\r\n      this.assertValidity();\r\n      return toBytes(Point, this, isCompressed);\r\n    }\r\n\r\n    toHex(isCompressed = true): string {\r\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\r\n    }\r\n  }\r\n  const _bits = CURVE.nBitLength;\r\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\r\n  // Validate if generator point is on curve\r\n  return {\r\n    CURVE,\r\n    ProjectivePoint: Point as ProjConstructor<T>,\r\n    normPrivateKeyToScalar,\r\n    weierstrassEquation,\r\n    isWithinCurveOrder,\r\n  };\r\n}\r\n\r\n// Instance\r\nexport interface SignatureType {\r\n  readonly r: bigint;\r\n  readonly s: bigint;\r\n  readonly recovery?: number;\r\n  assertValidity(): void;\r\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\r\n  hasHighS(): boolean;\r\n  normalizeS(): SignatureType;\r\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\r\n  toCompactRawBytes(): Uint8Array;\r\n  toCompactHex(): string;\r\n  // DER-encoded\r\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\r\n  toDERHex(isCompressed?: boolean): string;\r\n}\r\nexport type RecoveredSignatureType = SignatureType & {\r\n  readonly recovery: number;\r\n};\r\n// Static methods\r\nexport type SignatureConstructor = {\r\n  new (r: bigint, s: bigint): SignatureType;\r\n  fromCompact(hex: Hex): SignatureType;\r\n  fromDER(hex: Hex): SignatureType;\r\n};\r\ntype SignatureLike = { r: bigint; s: bigint };\r\n\r\nexport type PubKey = Hex | ProjPointType<bigint>;\r\n\r\nexport type CurveType = BasicWCurve<bigint> & {\r\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\r\n  hmac: HmacFnSync;\r\n  randomBytes: (bytesLength?: number) => Uint8Array;\r\n  lowS?: boolean;\r\n  bits2int?: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\r\n};\r\n\r\nfunction validateOpts(curve: CurveType) {\r\n  const opts = validateBasic(curve);\r\n  ut.validateObject(\r\n    opts,\r\n    {\r\n      hash: 'hash',\r\n      hmac: 'function',\r\n      randomBytes: 'function',\r\n    },\r\n    {\r\n      bits2int: 'function',\r\n      bits2int_modN: 'function',\r\n      lowS: 'boolean',\r\n    }\r\n  );\r\n  return Object.freeze({ lowS: true, ...opts } as const);\r\n}\r\n\r\nexport type CurveFn = {\r\n  CURVE: ReturnType<typeof validateOpts>;\r\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\r\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\r\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\r\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\r\n  ProjectivePoint: ProjConstructor<bigint>;\r\n  Signature: SignatureConstructor;\r\n  utils: {\r\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n    isValidPrivateKey(privateKey: PrivKey): boolean;\r\n    randomPrivateKey: () => Uint8Array;\r\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\r\n  };\r\n};\r\n\r\nexport function weierstrass(curveDef: CurveType): CurveFn {\r\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\r\n  const { Fp, n: CURVE_ORDER } = CURVE;\r\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\r\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\r\n\r\n  function isValidFieldElement(num: bigint): boolean {\r\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\r\n  }\r\n  function modN(a: bigint) {\r\n    return mod.mod(a, CURVE_ORDER);\r\n  }\r\n  function invN(a: bigint) {\r\n    return mod.invert(a, CURVE_ORDER);\r\n  }\r\n\r\n  const {\r\n    ProjectivePoint: Point,\r\n    normPrivateKeyToScalar,\r\n    weierstrassEquation,\r\n    isWithinCurveOrder,\r\n  } = weierstrassPoints({\r\n    ...CURVE,\r\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\r\n      const a = point.toAffine();\r\n      const x = Fp.toBytes(a.x);\r\n      const cat = ut.concatBytes;\r\n      if (isCompressed) {\r\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\r\n      } else {\r\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\r\n      }\r\n    },\r\n    fromBytes(bytes: Uint8Array) {\r\n      const len = bytes.length;\r\n      const head = bytes[0];\r\n      const tail = bytes.subarray(1);\r\n      // this.assertValidity() is done inside of fromHex\r\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\r\n        const x = ut.bytesToNumberBE(tail);\r\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\r\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n        const isYOdd = (y & _1n) === _1n;\r\n        // ECDSA\r\n        const isHeadOdd = (head & 1) === 1;\r\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\r\n        return { x, y };\r\n      } else if (len === uncompressedLen && head === 0x04) {\r\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n        return { x, y };\r\n      } else {\r\n        throw new Error(\r\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\r\n        );\r\n      }\r\n    },\r\n  });\r\n  const numToNByteStr = (num: bigint): string =>\r\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\r\n\r\n  function isBiggerThanHalfOrder(number: bigint) {\r\n    const HALF = CURVE_ORDER >> _1n;\r\n    return number > HALF;\r\n  }\r\n\r\n  function normalizeS(s: bigint) {\r\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\r\n  }\r\n  // slice bytes num\r\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\r\n\r\n  /**\r\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\r\n   */\r\n  class Signature implements SignatureType {\r\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\r\n      this.assertValidity();\r\n    }\r\n\r\n    // pair (bytes of r, bytes of s)\r\n    static fromCompact(hex: Hex) {\r\n      const l = CURVE.nByteLength;\r\n      hex = ensureBytes('compactSignature', hex, l * 2);\r\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\r\n    }\r\n\r\n    // DER encoded ECDSA signature\r\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\r\n    static fromDER(hex: Hex) {\r\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\r\n      return new Signature(r, s);\r\n    }\r\n\r\n    assertValidity(): void {\r\n      // can use assertGE here\r\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\r\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\r\n    }\r\n\r\n    addRecoveryBit(recovery: number): RecoveredSignature {\r\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\r\n    }\r\n\r\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\r\n      const { r, s, recovery: rec } = this;\r\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\r\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\r\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\r\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\r\n      const prefix = (rec & 1) === 0 ? '02' : '03';\r\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\r\n      const ir = invN(radj); // r^-1\r\n      const u1 = modN(-h * ir); // -hr^-1\r\n      const u2 = modN(s * ir); // sr^-1\r\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\r\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\r\n      Q.assertValidity();\r\n      return Q;\r\n    }\r\n\r\n    // Signatures should be low-s, to prevent malleability.\r\n    hasHighS(): boolean {\r\n      return isBiggerThanHalfOrder(this.s);\r\n    }\r\n\r\n    normalizeS() {\r\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\r\n    }\r\n\r\n    // DER-encoded\r\n    toDERRawBytes() {\r\n      return ut.hexToBytes(this.toDERHex());\r\n    }\r\n    toDERHex() {\r\n      return DER.hexFromSig({ r: this.r, s: this.s });\r\n    }\r\n\r\n    // padded bytes of r, then padded bytes of s\r\n    toCompactRawBytes() {\r\n      return ut.hexToBytes(this.toCompactHex());\r\n    }\r\n    toCompactHex() {\r\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\r\n    }\r\n  }\r\n  type RecoveredSignature = Signature & { recovery: number };\r\n\r\n  const utils = {\r\n    isValidPrivateKey(privateKey: PrivKey) {\r\n      try {\r\n        normPrivateKeyToScalar(privateKey);\r\n        return true;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    },\r\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\r\n\r\n    /**\r\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\r\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\r\n     */\r\n    randomPrivateKey: (): Uint8Array => {\r\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\r\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\r\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\r\n    },\r\n\r\n    /**\r\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\r\n     * Allows to massively speed-up `point.multiply(scalar)`.\r\n     * @returns cached point\r\n     * @example\r\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\r\n     * fast.multiply(privKey); // much faster ECDH now\r\n     */\r\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\r\n      point._setWindowSize(windowSize);\r\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\r\n      return point;\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Computes public key for a private key. Checks for validity of the private key.\r\n   * @param privateKey private key\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n   */\r\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\r\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\r\n  }\r\n\r\n  /**\r\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n   */\r\n  function isProbPub(item: PrivKey | PubKey): boolean {\r\n    const arr = item instanceof Uint8Array;\r\n    const str = typeof item === 'string';\r\n    const len = (arr || str) && (item as Hex).length;\r\n    if (arr) return len === compressedLen || len === uncompressedLen;\r\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\r\n    if (item instanceof Point) return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * ECDH (Elliptic Curve Diffie Hellman).\r\n   * Computes shared public key from private key and public key.\r\n   * Checks: 1) private key validity 2) shared key is on-curve.\r\n   * Does NOT hash the result.\r\n   * @param privateA private key\r\n   * @param publicB different public key\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns shared public key\r\n   */\r\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\r\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\r\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\r\n    const b = Point.fromHex(publicB); // check for being on-curve\r\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\r\n  }\r\n\r\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n  const bits2int =\r\n    CURVE.bits2int ||\r\n    function (bytes: Uint8Array): bigint {\r\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n      // for some cases, since bytes.length * 8 is not actual bitLength.\r\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\r\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\r\n      return delta > 0 ? num >> BigInt(delta) : num;\r\n    };\r\n  const bits2int_modN =\r\n    CURVE.bits2int_modN ||\r\n    function (bytes: Uint8Array): bigint {\r\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\r\n    };\r\n  // NOTE: pads output with zero as per spec\r\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\r\n  /**\r\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\r\n   */\r\n  function int2octets(num: bigint): Uint8Array {\r\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\r\n    if (!(_0n <= num && num < ORDER_MASK))\r\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\r\n    // works with order, can have different size than numToField!\r\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\r\n  }\r\n\r\n  // Steps A, D of RFC6979 3.2\r\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\r\n  // Used only in sign, not in verify.\r\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\r\n  // Also it can be bigger for P224 + SHA256\r\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\r\n    if (['recovered', 'canonical'].some((k) => k in opts))\r\n      throw new Error('sign() legacy options not supported');\r\n    const { hash, randomBytes } = CURVE;\r\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\r\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\r\n\r\n    // We can't later call bits2octets, since nested bits2int is broken for curves\r\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n    const h1int = bits2int_modN(msgHash);\r\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\r\n    const seedArgs = [int2octets(d), int2octets(h1int)];\r\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n    if (ent != null) {\r\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\r\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\r\n    }\r\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n    // Converts signature params into point w r/s, checks result for validity.\r\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\r\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\r\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\r\n      const ik = invN(k); // k^-1 mod n\r\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\r\n      const r = modN(q.x); // r = q.x mod n\r\n      if (r === _0n) return;\r\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\r\n      if (s === _0n) return;\r\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n      let normS = s;\r\n      if (lowS && isBiggerThanHalfOrder(s)) {\r\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\r\n        recovery ^= 1; // // in the bottom half of N\r\n      }\r\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\r\n    }\r\n    return { seed, k2sig };\r\n  }\r\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\r\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\r\n\r\n  /**\r\n   * Signs message hash with a private key.\r\n   * ```\r\n   * sign(m, d, k) where\r\n   *   (x, y) = G × k\r\n   *   r = x mod n\r\n   *   s = (m + dr)/k mod n\r\n   * ```\r\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\r\n   * @param privKey private key\r\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\r\n   * @returns signature with recovery param\r\n   */\r\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\r\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\r\n    const C = CURVE;\r\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\r\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n  }\r\n\r\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n  Point.BASE._setWindowSize(8);\r\n  // utils.precompute(8, ProjectivePoint.BASE)\r\n\r\n  /**\r\n   * Verifies a signature against message hash and public key.\r\n   * Rejects lowS signatures by default: to override,\r\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n   *\r\n   * ```\r\n   * verify(r, s, h, P) where\r\n   *   U1 = hs^-1 mod n\r\n   *   U2 = rs^-1 mod n\r\n   *   R = U1⋅G - U2⋅P\r\n   *   mod(R.x, n) == r\r\n   * ```\r\n   */\r\n  function verify(\r\n    signature: Hex | SignatureLike,\r\n    msgHash: Hex,\r\n    publicKey: Hex,\r\n    opts = defaultVerOpts\r\n  ): boolean {\r\n    const sg = signature;\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    publicKey = ensureBytes('publicKey', publicKey);\r\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\r\n    const { lowS, prehash } = opts;\r\n\r\n    let _sig: Signature | undefined = undefined;\r\n    let P: ProjPointType<bigint>;\r\n    try {\r\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\r\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\r\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\r\n        try {\r\n          _sig = Signature.fromDER(sg);\r\n        } catch (derError) {\r\n          if (!(derError instanceof DER.Err)) throw derError;\r\n          _sig = Signature.fromCompact(sg);\r\n        }\r\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\r\n        const { r, s } = sg;\r\n        _sig = new Signature(r, s);\r\n      } else {\r\n        throw new Error('PARSE');\r\n      }\r\n      P = Point.fromHex(publicKey);\r\n    } catch (error) {\r\n      if ((error as Error).message === 'PARSE')\r\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\r\n      return false;\r\n    }\r\n    if (lowS && _sig.hasHighS()) return false;\r\n    if (prehash) msgHash = CURVE.hash(msgHash);\r\n    const { r, s } = _sig;\r\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\r\n    const is = invN(s); // s^-1\r\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\r\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\r\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\r\n    if (!R) return false;\r\n    const v = modN(R.x);\r\n    return v === r;\r\n  }\r\n  return {\r\n    CURVE,\r\n    getPublicKey,\r\n    getSharedSecret,\r\n    sign,\r\n    verify,\r\n    ProjectivePoint: Point,\r\n    Signature,\r\n    utils,\r\n  };\r\n}\r\n\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\r\n  // Generic implementation\r\n  const q = Fp.ORDER;\r\n  let l = _0n;\r\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\r\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n  // 2n ** c1 == 2n << (c1-1)\r\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\r\n    let tv1 = c6; // 1. tv1 = c6\r\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n    // 17. for i in (c1, c1 - 1, ..., 2):\r\n    for (let i = c1; i > _1n; i--) {\r\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n    }\r\n    return { isValid: isQR, value: tv3 };\r\n  };\r\n  if (Fp.ORDER % _4n === _3n) {\r\n    // sqrt_ratio_3mod4(u, v)\r\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n    sqrtRatio = (u: T, v: T) => {\r\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n    };\r\n  }\r\n  // No curves uses that\r\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n  return sqrtRatio;\r\n}\r\n/**\r\n * From draft-irtf-cfrg-hash-to-curve-16\r\n */\r\nexport function mapToCurveSimpleSWU<T>(\r\n  Fp: mod.IField<T>,\r\n  opts: {\r\n    A: T;\r\n    B: T;\r\n    Z: T;\r\n  }\r\n) {\r\n  mod.validateField(Fp);\r\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\r\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\r\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\r\n  // Input: u, an element of F.\r\n  // Output: (x, y), a point on E.\r\n  return (u: T): { x: T; y: T } => {\r\n    // prettier-ignore\r\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\r\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\r\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\r\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n    y = Fp.mul(y, value); // 20.   y = y * y1\r\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\r\n    return { x, y };\r\n  };\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\r\nimport { mod, IField } from './modular.js';\r\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\r\n\r\n/**\r\n * * `DST` is a domain separation tag, defined in section 2.2.5\r\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\r\n * * `m` is extension degree (1 for prime fields)\r\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\r\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\r\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\r\n */\r\ntype UnicodeOrBytes = string | Uint8Array;\r\nexport type Opts = {\r\n  DST: UnicodeOrBytes;\r\n  p: bigint;\r\n  m: number;\r\n  k: number;\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n};\r\n\r\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\r\n  if (dst instanceof Uint8Array) return dst;\r\n  if (typeof dst === 'string') return utf8ToBytes(dst);\r\n  throw new Error('DST must be Uint8Array or string');\r\n}\r\n\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = bytesToNumberBE;\r\n\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value: number, length: number): Uint8Array {\r\n  if (value < 0 || value >= 1 << (8 * length)) {\r\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\r\n  }\r\n  const res = Array.from({ length }).fill(0) as number[];\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    res[i] = value & 0xff;\r\n    value >>>= 8;\r\n  }\r\n  return new Uint8Array(res);\r\n}\r\n\r\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const arr = new Uint8Array(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    arr[i] = a[i] ^ b[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction isBytes(item: unknown): void {\r\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\r\n}\r\nfunction isNum(item: unknown): void {\r\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\r\n}\r\n\r\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\r\n// https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.4.1\r\nexport function expand_message_xmd(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  isBytes(msg);\r\n  isBytes(DST);\r\n  isNum(lenInBytes);\r\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\r\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\r\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n  if (ell > 255) throw new Error('Invalid xmd length');\r\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\r\n  const Z_pad = i2osp(0, r_in_bytes);\r\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n  const b = new Array<Uint8Array>(ell);\r\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\r\n  for (let i = 1; i <= ell; i++) {\r\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n    b[i] = H(concatBytes(...args));\r\n  }\r\n  const pseudo_random_bytes = concatBytes(...b);\r\n  return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n\r\nexport function expand_message_xof(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  k: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  isBytes(msg);\r\n  isBytes(DST);\r\n  isNum(lenInBytes);\r\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-5.3.3\r\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n  if (DST.length > 255) {\r\n    const dkLen = Math.ceil((2 * k) / 8);\r\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n  }\r\n  if (lenInBytes > 65535 || DST.length > 255)\r\n    throw new Error('expand_message_xof: invalid lenInBytes');\r\n  return (\r\n    H.create({ dkLen: lenInBytes })\r\n      .update(msg)\r\n      .update(i2osp(lenInBytes, 2))\r\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n      .update(DST)\r\n      .update(i2osp(DST.length, 1))\r\n      .digest()\r\n  );\r\n}\r\n\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\r\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-11#section-5.3\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\r\n  validateObject(options, {\r\n    DST: 'string',\r\n    p: 'bigint',\r\n    m: 'isSafeInteger',\r\n    k: 'isSafeInteger',\r\n    hash: 'hash',\r\n  });\r\n  const { p, k, m, hash, expand, DST: _DST } = options;\r\n  isBytes(msg);\r\n  isNum(count);\r\n  const DST = validateDST(_DST);\r\n  const log2p = p.toString(2).length;\r\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n  const len_in_bytes = count * m * L;\r\n  let prb; // pseudo_random_bytes\r\n  if (expand === 'xmd') {\r\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n  } else if (expand === 'xof') {\r\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n  } else if (expand === '_internal_pass') {\r\n    // for internal tests only\r\n    prb = msg;\r\n  } else {\r\n    throw new Error('expand must be \"xmd\" or \"xof\"');\r\n  }\r\n  const u = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    const e = new Array(m);\r\n    for (let j = 0; j < m; j++) {\r\n      const elm_offset = L * (j + i * m);\r\n      const tv = prb.subarray(elm_offset, elm_offset + L);\r\n      e[j] = mod(os2ip(tv), p);\r\n    }\r\n    u[i] = e;\r\n  }\r\n  return u;\r\n}\r\n\r\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\r\n  // Make same order as in spec\r\n  const COEFF = map.map((i) => Array.from(i).reverse());\r\n  return (x: T, y: T) => {\r\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\r\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\r\n    );\r\n    x = field.div(xNum, xDen); // xNum / xDen\r\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\r\n    return { x, y };\r\n  };\r\n}\r\n\r\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\r\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\r\n  toAffine(iz?: bigint): AffinePoint<T>;\r\n  clearCofactor(): H2CPoint<T>;\r\n  assertValidity(): void;\r\n}\r\n\r\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\r\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\r\n}\r\n\r\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\r\n\r\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\r\n// (changing DST is ok!)\r\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\r\n\r\nexport function createHasher<T>(\r\n  Point: H2CPointConstructor<T>,\r\n  mapToCurve: MapToCurve<T>,\r\n  def: Opts & { encodeDST?: UnicodeOrBytes }\r\n) {\r\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\r\n  return {\r\n    // Encodes byte string to elliptic curve\r\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\r\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\r\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\r\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\r\n      const P = u0.add(u1).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n\r\n    // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-16#section-3\r\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\r\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n  };\r\n}\r\n", "import assert from './_assert.js';\r\nimport { Hash, CHash, Input, toBytes } from './utils.js';\r\n// HMAC (RFC 2104)\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    assert.hash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    pad.fill(0);\r\n  }\r\n  update(buf: Input) {\r\n    assert.exists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assert.exists(this);\r\n    assert.bytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest() {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\r\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\r\nimport { CHash } from './abstract/utils.js';\r\n\r\n// connects noble-curves to noble-hashes\r\nexport function getHash(hash: CHash) {\r\n  return {\r\n    hash,\r\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\r\n    randomBytes,\r\n  };\r\n}\r\n// Same API as @noble/hashes, with ability to create curve with custom hash\r\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\r\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\r\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\r\n  return Object.freeze({ ...create(defHash), create });\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { randomBytes } from '@noble/hashes/utils';\r\nimport { Field, mod, pow2 } from './abstract/modular.js';\r\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\r\nimport type { Hex, PrivKey } from './abstract/utils.js';\r\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\r\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\r\nimport { createCurve } from './_shortw_utils.js';\r\n\r\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\r\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\r\n\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y: bigint): bigint {\r\n  const P = secp256k1P;\r\n  // prettier-ignore\r\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n  // prettier-ignore\r\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n  const b2 = (y * y * y) % P; // x^3, 11\r\n  const b3 = (b2 * b2 * y) % P; // x^7\r\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\r\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\r\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\r\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\r\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\r\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\r\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\r\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\r\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\r\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\r\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\r\n  const root = pow2(t2, _2n, P);\r\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\r\n  return root;\r\n}\r\n\r\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\r\n\r\nexport const secp256k1 = createCurve(\r\n  {\r\n    a: BigInt(0), // equation params: a, b\r\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\r\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\r\n    n: secp256k1N, // Curve order, total count of valid points in the field\r\n    // Base point (x, y) aka generator point\r\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\r\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\r\n    h: BigInt(1), // Cofactor\r\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\r\n    /**\r\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\r\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\r\n     */\r\n    endo: {\r\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n      splitScalar: (k: bigint) => {\r\n        const n = secp256k1N;\r\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\r\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\r\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\r\n        const b2 = a1;\r\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\r\n\r\n        const c1 = divNearest(b2 * k, n);\r\n        const c2 = divNearest(-b1 * k, n);\r\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\r\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\r\n        const k1neg = k1 > POW_2_128;\r\n        const k2neg = k2 > POW_2_128;\r\n        if (k1neg) k1 = n - k1;\r\n        if (k2neg) k2 = n - k2;\r\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\r\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\r\n        }\r\n        return { k1neg, k1, k2neg, k2 };\r\n      },\r\n    },\r\n  },\r\n  sha256\r\n);\r\n\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\nconst _0n = BigInt(0);\r\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\r\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\r\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\r\n  let tagP = TAGGED_HASH_PREFIXES[tag];\r\n  if (tagP === undefined) {\r\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n    tagP = concatBytes(tagH, tagH);\r\n    TAGGED_HASH_PREFIXES[tag] = tagP;\r\n  }\r\n  return sha256(concatBytes(tagP, ...messages));\r\n}\r\n\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\r\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\r\nconst modP = (x: bigint) => mod(x, secp256k1P);\r\nconst modN = (x: bigint) => mod(x, secp256k1N);\r\nconst Point = secp256k1.ProjectivePoint;\r\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\r\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\r\n\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv: PrivKey) {\r\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\r\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\r\n  return { scalar: scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x: bigint): PointType<bigint> {\r\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\r\n  const xx = modP(x * x);\r\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\r\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\r\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n  p.assertValidity();\r\n  return p;\r\n}\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args: Uint8Array[]): bigint {\r\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\r\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(\r\n  message: Hex,\r\n  privateKey: PrivKey,\r\n  auxRand: Hex = randomBytes(32)\r\n): Uint8Array {\r\n  const m = ensureBytes('message', message);\r\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\r\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\r\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\r\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\r\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n  sig.set(rx, 0);\r\n  sig.set(numTo32b(modN(k + e * d)), 32);\r\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\r\n  return sig;\r\n}\r\n\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\r\n  const sig = ensureBytes('signature', signature, 64);\r\n  const m = ensureBytes('message', message);\r\n  const pub = ensureBytes('publicKey', publicKey, 32);\r\n  try {\r\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\r\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n    if (!fe(r)) return false;\r\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n    if (!ge(s)) return false;\r\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\r\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\r\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\r\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const schnorr = /* @__PURE__ */ (() => ({\r\n  getPublicKey: schnorrGetPublicKey,\r\n  sign: schnorrSign,\r\n  verify: schnorrVerify,\r\n  utils: {\r\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\r\n    lift_x,\r\n    pointToBytes,\r\n    numberToBytesBE,\r\n    bytesToNumberBE,\r\n    taggedHash,\r\n    mod,\r\n  },\r\n}))();\r\n\r\nconst isoMap = /* @__PURE__ */ (() =>\r\n  isogenyMap(\r\n    Fp,\r\n    [\r\n      // xNum\r\n      [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n      ],\r\n      // xDen\r\n      [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n      // yNum\r\n      [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n      ],\r\n      // yDen\r\n      [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\r\n  ))();\r\nconst mapSWU = /* @__PURE__ */ (() =>\r\n  mapToCurveSimpleSWU(Fp, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fp.create(BigInt('-11')),\r\n  }))();\r\nconst htf = /* @__PURE__ */ (() =>\r\n  createHasher(\r\n    secp256k1.ProjectivePoint,\r\n    (scalars: bigint[]) => {\r\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\r\n      return isoMap(x, y);\r\n    },\r\n    {\r\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n      p: Fp.ORDER,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  ))();\r\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\r\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\r\n", "/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { ripemd160 } from '@noble/hashes/ripemd160';\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { sha512 } from '@noble/hashes/sha512';\r\nimport { bytes as assertBytes } from '@noble/hashes/_assert';\r\nimport { bytesToHex, concatBytes, createView, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\r\nimport { secp256k1 as secp } from '@noble/curves/secp256k1';\r\nimport { mod } from '@noble/curves/abstract/modular';\r\nimport { base58check as base58checker } from '@scure/base';\r\n\r\nconst Point = secp.ProjectivePoint;\r\nconst base58check = base58checker(sha256);\r\n\r\nfunction bytesToNumber(bytes: Uint8Array): bigint {\r\n  return BigInt(`0x${bytesToHex(bytes)}`);\r\n}\r\n\r\nfunction numberToBytes(num: bigint): Uint8Array {\r\n  return hexToBytes(num.toString(16).padStart(64, '0'));\r\n}\r\n\r\nconst MASTER_SECRET = utf8ToBytes('Bitcoin seed');\r\n// Bitcoin hardcoded by default\r\nconst BITCOIN_VERSIONS: Versions = { private: 0x0488ade4, public: 0x0488b21e };\r\nexport const HARDENED_OFFSET: number = 0x80000000;\r\n\r\nexport interface Versions {\r\n  private: number;\r\n  public: number;\r\n}\r\n\r\nconst hash160 = (data: Uint8Array) => ripemd160(sha256(data));\r\nconst fromU32 = (data: Uint8Array) => createView(data).getUint32(0, false);\r\nconst toU32 = (n: number) => {\r\n  if (!Number.isSafeInteger(n) || n < 0 || n > 2 ** 32 - 1) {\r\n    throw new Error(`Invalid number=${n}. Should be from 0 to 2 ** 32 - 1`);\r\n  }\r\n  const buf = new Uint8Array(4);\r\n  createView(buf).setUint32(0, n, false);\r\n  return buf;\r\n};\r\n\r\ninterface HDKeyOpt {\r\n  versions: Versions;\r\n  depth?: number;\r\n  index?: number;\r\n  parentFingerprint?: number;\r\n  chainCode: Uint8Array;\r\n  publicKey?: Uint8Array;\r\n  privateKey?: Uint8Array | bigint;\r\n}\r\n\r\nexport class HDKey {\r\n  get fingerprint(): number {\r\n    if (!this.pubHash) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    return fromU32(this.pubHash);\r\n  }\r\n  get identifier(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get pubKeyHash(): Uint8Array | undefined {\r\n    return this.pubHash;\r\n  }\r\n  get privateKey(): Uint8Array | null {\r\n    return this.privKeyBytes || null;\r\n  }\r\n  get publicKey(): Uint8Array | null {\r\n    return this.pubKey || null;\r\n  }\r\n  get privateExtendedKey(): string {\r\n    const priv = this.privateKey;\r\n    if (!priv) {\r\n      throw new Error('No private key');\r\n    }\r\n    return base58check.encode(\r\n      this.serialize(this.versions.private, concatBytes(new Uint8Array([0]), priv))\r\n    );\r\n  }\r\n  get publicExtendedKey(): string {\r\n    if (!this.pubKey) {\r\n      throw new Error('No public key');\r\n    }\r\n    return base58check.encode(this.serialize(this.versions.public, this.pubKey));\r\n  }\r\n\r\n  public static fromMasterSeed(seed: Uint8Array, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    assertBytes(seed);\r\n    if (8 * seed.length < 128 || 8 * seed.length > 512) {\r\n      throw new Error(\r\n        `HDKey: wrong seed length=${seed.length}. Should be between 128 and 512 bits; 256 bits is advised)`\r\n      );\r\n    }\r\n    const I = hmac(sha512, MASTER_SECRET, seed);\r\n    return new HDKey({\r\n      versions,\r\n      chainCode: I.slice(32),\r\n      privateKey: I.slice(0, 32),\r\n    });\r\n  }\r\n\r\n  public static fromExtendedKey(base58key: string, versions: Versions = BITCOIN_VERSIONS): HDKey {\r\n    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    const keyBuffer: Uint8Array = base58check.decode(base58key);\r\n    const keyView = createView(keyBuffer);\r\n    const version = keyView.getUint32(0, false);\r\n    const opt = {\r\n      versions,\r\n      depth: keyBuffer[4],\r\n      parentFingerprint: keyView.getUint32(5, false),\r\n      index: keyView.getUint32(9, false),\r\n      chainCode: keyBuffer.slice(13, 45),\r\n    };\r\n    const key = keyBuffer.slice(45);\r\n    const isPriv = key[0] === 0;\r\n    if (version !== versions[isPriv ? 'private' : 'public']) {\r\n      throw new Error('Version mismatch');\r\n    }\r\n    if (isPriv) {\r\n      return new HDKey({ ...opt, privateKey: key.slice(1) });\r\n    } else {\r\n      return new HDKey({ ...opt, publicKey: key });\r\n    }\r\n  }\r\n\r\n  public static fromJSON(json: { xpriv: string }): HDKey {\r\n    return HDKey.fromExtendedKey(json.xpriv);\r\n  }\r\n  public readonly versions: Versions;\r\n  public readonly depth: number = 0;\r\n  public readonly index: number = 0;\r\n  public readonly chainCode: Uint8Array | null = null;\r\n  public readonly parentFingerprint: number = 0;\r\n  private privKey?: bigint;\r\n  private privKeyBytes?: Uint8Array;\r\n  private pubKey?: Uint8Array;\r\n  private pubHash: Uint8Array | undefined;\r\n\r\n  constructor(opt: HDKeyOpt) {\r\n    if (!opt || typeof opt !== 'object') {\r\n      throw new Error('HDKey.constructor must not be called directly');\r\n    }\r\n    this.versions = opt.versions || BITCOIN_VERSIONS;\r\n    this.depth = opt.depth || 0;\r\n    this.chainCode = opt.chainCode;\r\n    this.index = opt.index || 0;\r\n    this.parentFingerprint = opt.parentFingerprint || 0;\r\n    if (!this.depth) {\r\n      if (this.parentFingerprint || this.index) {\r\n        throw new Error('HDKey: zero depth with non-zero index/parent fingerprint');\r\n      }\r\n    }\r\n    if (opt.publicKey && opt.privateKey) {\r\n      throw new Error('HDKey: publicKey and privateKey at same time.');\r\n    }\r\n    if (opt.privateKey) {\r\n      if (!secp.utils.isValidPrivateKey(opt.privateKey)) {\r\n        throw new Error('Invalid private key');\r\n      }\r\n      this.privKey =\r\n        typeof opt.privateKey === 'bigint' ? opt.privateKey : bytesToNumber(opt.privateKey);\r\n      this.privKeyBytes = numberToBytes(this.privKey);\r\n      this.pubKey = secp.getPublicKey(opt.privateKey, true);\r\n    } else if (opt.publicKey) {\r\n      this.pubKey = Point.fromHex(opt.publicKey).toRawBytes(true); // force compressed point\r\n    } else {\r\n      throw new Error('HDKey: no public or private key provided');\r\n    }\r\n    this.pubHash = hash160(this.pubKey);\r\n  }\r\n\r\n  public derive(path: string): HDKey {\r\n    if (!/^[mM]'?/.test(path)) {\r\n      throw new Error('Path must start with \"m\" or \"M\"');\r\n    }\r\n    if (/^[mM]'?$/.test(path)) {\r\n      return this;\r\n    }\r\n    const parts = path.replace(/^[mM]'?\\//, '').split('/');\r\n    // tslint:disable-next-line\r\n    let child: HDKey = this;\r\n    for (const c of parts) {\r\n      const m = /^(\\d+)('?)$/.exec(c);\r\n      if (!m || m.length !== 3) {\r\n        throw new Error(`Invalid child index: ${c}`);\r\n      }\r\n      let idx = +m[1];\r\n      if (!Number.isSafeInteger(idx) || idx >= HARDENED_OFFSET) {\r\n        throw new Error('Invalid index');\r\n      }\r\n      // hardened key\r\n      if (m[2] === \"'\") {\r\n        idx += HARDENED_OFFSET;\r\n      }\r\n      child = child.deriveChild(idx);\r\n    }\r\n    return child;\r\n  }\r\n\r\n  public deriveChild(index: number): HDKey {\r\n    if (!this.pubKey || !this.chainCode) {\r\n      throw new Error('No publicKey or chainCode set');\r\n    }\r\n    let data = toU32(index);\r\n    if (index >= HARDENED_OFFSET) {\r\n      // Hardened\r\n      const priv = this.privateKey;\r\n      if (!priv) {\r\n        throw new Error('Could not derive hardened child key');\r\n      }\r\n      // Hardened child: 0x00 || ser256(kpar) || ser32(index)\r\n      data = concatBytes(new Uint8Array([0]), priv, data);\r\n    } else {\r\n      // Normal child: serP(point(kpar)) || ser32(index)\r\n      data = concatBytes(this.pubKey, data);\r\n    }\r\n    const I = hmac(sha512, this.chainCode, data);\r\n    const childTweak = bytesToNumber(I.slice(0, 32));\r\n    const chainCode = I.slice(32);\r\n    if (!secp.utils.isValidPrivateKey(childTweak)) {\r\n      throw new Error('Tweak bigger than curve order');\r\n    }\r\n    const opt: HDKeyOpt = {\r\n      versions: this.versions,\r\n      chainCode,\r\n      depth: this.depth + 1,\r\n      parentFingerprint: this.fingerprint,\r\n      index,\r\n    };\r\n    try {\r\n      // Private parent key -> private child key\r\n      if (this.privateKey) {\r\n        const added = mod(this.privKey! + childTweak, secp.CURVE.n);\r\n        if (!secp.utils.isValidPrivateKey(added)) {\r\n          throw new Error('The tweak was out of range or the resulted private key is invalid');\r\n        }\r\n        opt.privateKey = added;\r\n      } else {\r\n        const added = Point.fromHex(this.pubKey).add(Point.fromPrivateKey(childTweak));\r\n        // Cryptographically impossible: hmac-sha512 preimage would need to be found\r\n        if (added.equals(Point.ZERO)) {\r\n          throw new Error('The tweak was equal to negative P, which made the result key invalid');\r\n        }\r\n        opt.publicKey = added.toRawBytes(true);\r\n      }\r\n      return new HDKey(opt);\r\n    } catch (err) {\r\n      return this.deriveChild(index + 1);\r\n    }\r\n  }\r\n\r\n  public sign(hash: Uint8Array): Uint8Array {\r\n    if (!this.privateKey) {\r\n      throw new Error('No privateKey set!');\r\n    }\r\n    assertBytes(hash, 32);\r\n    return secp.sign(hash, this.privKey!).toCompactRawBytes();\r\n  }\r\n\r\n  public verify(hash: Uint8Array, signature: Uint8Array): boolean {\r\n    assertBytes(hash, 32);\r\n    assertBytes(signature, 64);\r\n    if (!this.publicKey) {\r\n      throw new Error('No publicKey set!');\r\n    }\r\n    let sig;\r\n    try {\r\n      sig = secp.Signature.fromCompact(signature);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n    return secp.verify(sig, hash, this.publicKey);\r\n  }\r\n\r\n  public wipePrivateData(): this {\r\n    this.privKey = undefined;\r\n    if (this.privKeyBytes) {\r\n      this.privKeyBytes.fill(0);\r\n      this.privKeyBytes = undefined;\r\n    }\r\n    return this;\r\n  }\r\n  public toJSON(): { xpriv: string; xpub: string } {\r\n    return {\r\n      xpriv: this.privateExtendedKey,\r\n      xpub: this.publicExtendedKey,\r\n    };\r\n  }\r\n\r\n  private serialize(version: number, key: Uint8Array) {\r\n    if (!this.chainCode) {\r\n      throw new Error('No chainCode set');\r\n    }\r\n    assertBytes(key, 33);\r\n    // version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\r\n    return concatBytes(\r\n      toU32(version),\r\n      new Uint8Array([this.depth]),\r\n      toU32(this.parentFingerprint),\r\n      toU32(this.index),\r\n      this.chainCode,\r\n      key\r\n    );\r\n  }\r\n}\r\n", "/*! noble-ciphers - MIT License (c) 2023 Paul Miller (paulmillr.com) */\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u16 = (arr: TypedArray) =>\r\n  new Uint16Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 2));\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// big-endian hardware is rare. Just in case someone still decides to run ciphers:\r\n// early-throw an error because we don't support BE yet.\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\r\n\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const len = hex.length;\r\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\r\n  const array = new Uint8Array(len / 2);\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = i * 2;\r\n    const hexByte = hex.slice(j, j + 2);\r\n    const byte = Number.parseInt(hexByte, 16);\r\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\r\n    array[i] = byte;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\ndeclare const TextDecoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport function bytesToUtf8(bytes: Uint8Array): string {\r\n  return new TextDecoder().decode(bytes);\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\r\n  let pad = 0; // walk through each item, ensure they have proper type\r\n  arrays.forEach((a) => {\r\n    if (!u8a(a)) throw new Error('Uint8Array expected');\r\n    r.set(a, pad);\r\n    pad += a.length;\r\n  });\r\n  return r;\r\n}\r\n\r\n// Check if object doens't have custom constructor (like Uint8Array/Array)\r\nconst isPlainObject = (obj: any) =>\r\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\r\n\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\r\n    throw new Error('options must be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport function ensureBytes(b: any, len?: number) {\r\n  if (!(b instanceof Uint8Array)) throw new Error('Uint8Array expected');\r\n  if (typeof len === 'number')\r\n    if (b.length !== len) throw new Error(`Uint8Array length ${len} expected`);\r\n}\r\n\r\n// Constant-time equality\r\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\r\n  // Should not happen\r\n  if (a.length !== b.length) throw new Error('equalBytes: Different size of Uint8Arrays');\r\n  let isSame = true;\r\n  for (let i = 0; i < a.length; i++) isSame &&= a[i] === b[i]; // Lets hope JIT won't optimize away.\r\n  return isSame;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n}\r\n\r\n// This will allow to re-use with composable things like packed & base encoders\r\n// Also, we probably can make tags composable\r\nexport type Cipher = {\r\n  tagLength?: number;\r\n  encrypt(plaintext: Uint8Array): Uint8Array;\r\n  decrypt(ciphertext: Uint8Array): Uint8Array;\r\n};\r\n\r\nexport type AsyncCipher = {\r\n  tagLength?: number;\r\n  encrypt(plaintext: Uint8Array): Promise<Uint8Array>;\r\n  decrypt(ciphertext: Uint8Array): Promise<Uint8Array>;\r\n};\r\n\r\n// Polyfill for Safari 14\r\nexport function setBigUint64(\r\n  view: DataView,\r\n  byteOffset: number,\r\n  value: bigint,\r\n  isLE: boolean\r\n): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n", "function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\r\n}\r\n\r\nfunction bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\r\n}\r\n\r\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\nexport type Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nfunction hash(hash: Hash) {\r\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\r\n    throw new Error('hash must be wrapped by utils.wrapConstructor');\r\n  number(hash.outputLen);\r\n  number(hash.blockLen);\r\n}\r\n\r\nfunction exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nexport { number, bool, bytes, hash, exists, output };\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n", "import { toBytes, Input, ensureBytes, Hash } from './utils.js';\r\nimport assert from './_assert.js';\r\n\r\n// Poly1305 is a fast and parallel secret-key message-authentication code.\r\n// https://cr.yp.to/mac.html, https://cr.yp.to/mac/poly1305-20050329.pdf\r\n// https://datatracker.ietf.org/doc/html/rfc8439\r\n\r\n// Based on Public Domain poly1305-donna https://github.com/floodyberry/poly1305-donna\r\nconst u8to16 = (a: Uint8Array, i: number) => (a[i++] & 0xff) | ((a[i++] & 0xff) << 8);\r\nclass Poly1305 implements Hash<Poly1305> {\r\n  readonly blockLen = 16;\r\n  readonly outputLen = 16;\r\n  private buffer = new Uint8Array(16);\r\n  private r = new Uint16Array(10);\r\n  private h = new Uint16Array(10);\r\n  private pad = new Uint16Array(8);\r\n  private pos = 0;\r\n  protected finished = false;\r\n\r\n  constructor(key: Input) {\r\n    key = toBytes(key);\r\n    ensureBytes(key, 32);\r\n    const t0 = u8to16(key, 0);\r\n    const t1 = u8to16(key, 2);\r\n    const t2 = u8to16(key, 4);\r\n    const t3 = u8to16(key, 6);\r\n    const t4 = u8to16(key, 8);\r\n    const t5 = u8to16(key, 10);\r\n    const t6 = u8to16(key, 12);\r\n    const t7 = u8to16(key, 14);\r\n\r\n    // https://github.com/floodyberry/poly1305-donna/blob/e6ad6e091d30d7f4ec2d4f978be1fcfcbce72781/poly1305-donna-16.h#L47\r\n    this.r[0] = t0 & 0x1fff;\r\n    this.r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;\r\n    this.r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;\r\n    this.r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;\r\n    this.r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;\r\n    this.r[5] = (t4 >>> 1) & 0x1ffe;\r\n    this.r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;\r\n    this.r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;\r\n    this.r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;\r\n    this.r[9] = (t7 >>> 5) & 0x007f;\r\n    for (let i = 0; i < 8; i++) this.pad[i] = u8to16(key, 16 + 2 * i);\r\n  }\r\n\r\n  private process(data: Uint8Array, offset: number, isLast = false) {\r\n    const hibit = isLast ? 0 : 1 << 11;\r\n    const { h, r } = this;\r\n    const r0 = r[0];\r\n    const r1 = r[1];\r\n    const r2 = r[2];\r\n    const r3 = r[3];\r\n    const r4 = r[4];\r\n    const r5 = r[5];\r\n    const r6 = r[6];\r\n    const r7 = r[7];\r\n    const r8 = r[8];\r\n    const r9 = r[9];\r\n\r\n    const t0 = u8to16(data, offset + 0);\r\n    const t1 = u8to16(data, offset + 2);\r\n    const t2 = u8to16(data, offset + 4);\r\n    const t3 = u8to16(data, offset + 6);\r\n    const t4 = u8to16(data, offset + 8);\r\n    const t5 = u8to16(data, offset + 10);\r\n    const t6 = u8to16(data, offset + 12);\r\n    const t7 = u8to16(data, offset + 14);\r\n\r\n    let h0 = h[0] + (t0 & 0x1fff);\r\n    let h1 = h[1] + (((t0 >>> 13) | (t1 << 3)) & 0x1fff);\r\n    let h2 = h[2] + (((t1 >>> 10) | (t2 << 6)) & 0x1fff);\r\n    let h3 = h[3] + (((t2 >>> 7) | (t3 << 9)) & 0x1fff);\r\n    let h4 = h[4] + (((t3 >>> 4) | (t4 << 12)) & 0x1fff);\r\n    let h5 = h[5] + ((t4 >>> 1) & 0x1fff);\r\n    let h6 = h[6] + (((t4 >>> 14) | (t5 << 2)) & 0x1fff);\r\n    let h7 = h[7] + (((t5 >>> 11) | (t6 << 5)) & 0x1fff);\r\n    let h8 = h[8] + (((t6 >>> 8) | (t7 << 8)) & 0x1fff);\r\n    let h9 = h[9] + ((t7 >>> 5) | hibit);\r\n\r\n    let c = 0;\r\n\r\n    let d0 = c + h0 * r0 + h1 * (5 * r9) + h2 * (5 * r8) + h3 * (5 * r7) + h4 * (5 * r6);\r\n    c = d0 >>> 13;\r\n    d0 &= 0x1fff;\r\n    d0 += h5 * (5 * r5) + h6 * (5 * r4) + h7 * (5 * r3) + h8 * (5 * r2) + h9 * (5 * r1);\r\n    c += d0 >>> 13;\r\n    d0 &= 0x1fff;\r\n\r\n    let d1 = c + h0 * r1 + h1 * r0 + h2 * (5 * r9) + h3 * (5 * r8) + h4 * (5 * r7);\r\n    c = d1 >>> 13;\r\n    d1 &= 0x1fff;\r\n    d1 += h5 * (5 * r6) + h6 * (5 * r5) + h7 * (5 * r4) + h8 * (5 * r3) + h9 * (5 * r2);\r\n    c += d1 >>> 13;\r\n    d1 &= 0x1fff;\r\n\r\n    let d2 = c + h0 * r2 + h1 * r1 + h2 * r0 + h3 * (5 * r9) + h4 * (5 * r8);\r\n    c = d2 >>> 13;\r\n    d2 &= 0x1fff;\r\n    d2 += h5 * (5 * r7) + h6 * (5 * r6) + h7 * (5 * r5) + h8 * (5 * r4) + h9 * (5 * r3);\r\n    c += d2 >>> 13;\r\n    d2 &= 0x1fff;\r\n\r\n    let d3 = c + h0 * r3 + h1 * r2 + h2 * r1 + h3 * r0 + h4 * (5 * r9);\r\n    c = d3 >>> 13;\r\n    d3 &= 0x1fff;\r\n    d3 += h5 * (5 * r8) + h6 * (5 * r7) + h7 * (5 * r6) + h8 * (5 * r5) + h9 * (5 * r4);\r\n    c += d3 >>> 13;\r\n    d3 &= 0x1fff;\r\n\r\n    let d4 = c + h0 * r4 + h1 * r3 + h2 * r2 + h3 * r1 + h4 * r0;\r\n    c = d4 >>> 13;\r\n    d4 &= 0x1fff;\r\n    d4 += h5 * (5 * r9) + h6 * (5 * r8) + h7 * (5 * r7) + h8 * (5 * r6) + h9 * (5 * r5);\r\n    c += d4 >>> 13;\r\n    d4 &= 0x1fff;\r\n\r\n    let d5 = c + h0 * r5 + h1 * r4 + h2 * r3 + h3 * r2 + h4 * r1;\r\n    c = d5 >>> 13;\r\n    d5 &= 0x1fff;\r\n    d5 += h5 * r0 + h6 * (5 * r9) + h7 * (5 * r8) + h8 * (5 * r7) + h9 * (5 * r6);\r\n    c += d5 >>> 13;\r\n    d5 &= 0x1fff;\r\n\r\n    let d6 = c + h0 * r6 + h1 * r5 + h2 * r4 + h3 * r3 + h4 * r2;\r\n    c = d6 >>> 13;\r\n    d6 &= 0x1fff;\r\n    d6 += h5 * r1 + h6 * r0 + h7 * (5 * r9) + h8 * (5 * r8) + h9 * (5 * r7);\r\n    c += d6 >>> 13;\r\n    d6 &= 0x1fff;\r\n\r\n    let d7 = c + h0 * r7 + h1 * r6 + h2 * r5 + h3 * r4 + h4 * r3;\r\n    c = d7 >>> 13;\r\n    d7 &= 0x1fff;\r\n    d7 += h5 * r2 + h6 * r1 + h7 * r0 + h8 * (5 * r9) + h9 * (5 * r8);\r\n    c += d7 >>> 13;\r\n    d7 &= 0x1fff;\r\n\r\n    let d8 = c + h0 * r8 + h1 * r7 + h2 * r6 + h3 * r5 + h4 * r4;\r\n    c = d8 >>> 13;\r\n    d8 &= 0x1fff;\r\n    d8 += h5 * r3 + h6 * r2 + h7 * r1 + h8 * r0 + h9 * (5 * r9);\r\n    c += d8 >>> 13;\r\n    d8 &= 0x1fff;\r\n\r\n    let d9 = c + h0 * r9 + h1 * r8 + h2 * r7 + h3 * r6 + h4 * r5;\r\n    c = d9 >>> 13;\r\n    d9 &= 0x1fff;\r\n    d9 += h5 * r4 + h6 * r3 + h7 * r2 + h8 * r1 + h9 * r0;\r\n    c += d9 >>> 13;\r\n    d9 &= 0x1fff;\r\n\r\n    c = ((c << 2) + c) | 0;\r\n    c = (c + d0) | 0;\r\n    d0 = c & 0x1fff;\r\n    c = c >>> 13;\r\n    d1 += c;\r\n\r\n    h[0] = d0;\r\n    h[1] = d1;\r\n    h[2] = d2;\r\n    h[3] = d3;\r\n    h[4] = d4;\r\n    h[5] = d5;\r\n    h[6] = d6;\r\n    h[7] = d7;\r\n    h[8] = d8;\r\n    h[9] = d9;\r\n  }\r\n\r\n  private finalize() {\r\n    const { h, pad } = this;\r\n    const g = new Uint16Array(10);\r\n    let c = h[1] >>> 13;\r\n    h[1] &= 0x1fff;\r\n    for (let i = 2; i < 10; i++) {\r\n      h[i] += c;\r\n      c = h[i] >>> 13;\r\n      h[i] &= 0x1fff;\r\n    }\r\n    h[0] += c * 5;\r\n    c = h[0] >>> 13;\r\n    h[0] &= 0x1fff;\r\n    h[1] += c;\r\n    c = h[1] >>> 13;\r\n    h[1] &= 0x1fff;\r\n    h[2] += c;\r\n\r\n    g[0] = h[0] + 5;\r\n    c = g[0] >>> 13;\r\n    g[0] &= 0x1fff;\r\n    for (let i = 1; i < 10; i++) {\r\n      g[i] = h[i] + c;\r\n      c = g[i] >>> 13;\r\n      g[i] &= 0x1fff;\r\n    }\r\n    g[9] -= 1 << 13;\r\n\r\n    let mask = (c ^ 1) - 1;\r\n    for (let i = 0; i < 10; i++) g[i] &= mask;\r\n    mask = ~mask;\r\n    for (let i = 0; i < 10; i++) h[i] = (h[i] & mask) | g[i];\r\n    h[0] = (h[0] | (h[1] << 13)) & 0xffff;\r\n    h[1] = ((h[1] >>> 3) | (h[2] << 10)) & 0xffff;\r\n    h[2] = ((h[2] >>> 6) | (h[3] << 7)) & 0xffff;\r\n    h[3] = ((h[3] >>> 9) | (h[4] << 4)) & 0xffff;\r\n    h[4] = ((h[4] >>> 12) | (h[5] << 1) | (h[6] << 14)) & 0xffff;\r\n    h[5] = ((h[6] >>> 2) | (h[7] << 11)) & 0xffff;\r\n    h[6] = ((h[7] >>> 5) | (h[8] << 8)) & 0xffff;\r\n    h[7] = ((h[8] >>> 8) | (h[9] << 5)) & 0xffff;\r\n\r\n    let f = h[0] + pad[0];\r\n    h[0] = f & 0xffff;\r\n    for (let i = 1; i < 8; i++) {\r\n      f = (((h[i] + pad[i]) | 0) + (f >>> 16)) | 0;\r\n      h[i] = f & 0xffff;\r\n    }\r\n  }\r\n  update(data: Input): this {\r\n    assert.exists(this);\r\n    const { buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input\r\n      if (take === blockLen) {\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(data, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(buffer, 0, false);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  destroy() {\r\n    this.h.fill(0);\r\n    this.r.fill(0);\r\n    this.buffer.fill(0);\r\n    this.pad.fill(0);\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assert.exists(this);\r\n    assert.output(out, this);\r\n    this.finished = true;\r\n    const { buffer, h } = this;\r\n    let { pos } = this;\r\n    if (pos) {\r\n      buffer[pos++] = 1;\r\n      // buffer.subarray(pos).fill(0);\r\n      for (; pos < 16; pos++) buffer[pos] = 0;\r\n      this.process(buffer, 0, true);\r\n    }\r\n    this.finalize();\r\n    let opos = 0;\r\n    for (let i = 0; i < 8; i++) {\r\n      out[opos++] = h[i] >>> 0;\r\n      out[opos++] = h[i] >>> 8;\r\n    }\r\n    return out;\r\n  }\r\n  digest(): Uint8Array {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructorWithKey>;\r\nexport function wrapConstructorWithKey<H extends Hash<H>>(hashCons: (key: Input) => Hash<H>) {\r\n  const hashC = (msg: Input, key: Input): Uint8Array => hashCons(key).update(toBytes(msg)).digest();\r\n  const tmp = hashCons(new Uint8Array(32));\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (key: Input) => hashCons(key);\r\n  return hashC;\r\n}\r\n\r\nexport const poly1305 = wrapConstructorWithKey((key) => new Poly1305(key));\r\n", "// Basic utils for salsa-like ciphers\r\n// Check out _micro.ts for descriptive documentation.\r\nimport assert from './_assert.js';\r\nimport { u32, utf8ToBytes, checkOpts } from './utils.js';\r\n\r\n/*\r\nRFC8439 requires multi-step cipher stream, where\r\nauthKey starts with counter: 0, actual msg with counter: 1.\r\n\r\nFor this, we need a way to re-use nonce / counter:\r\n\r\n    const counter = new Uint8Array(4);\r\n    chacha(..., counter, ...); // counter is now 1\r\n    chacha(..., counter, ...); // counter is now 2\r\n\r\nThis is complicated:\r\n\r\n- Original papers don't allow mutating counters\r\n- Counter overflow is undefined: https://mailarchive.ietf.org/arch/msg/cfrg/gsOnTJzcbgG6OqD8Sc0GO5aR_tU/\r\n- 3rd-party library stablelib implementation uses an approach where you can provide\r\n  nonce and counter instead of just nonce - and it will re-use it\r\n- We could have did something similar, but ChaCha has different counter position\r\n  (counter | nonce), which is not composable with XChaCha, because full counter\r\n  is (nonce16 | counter | nonce16). Stablelib doesn't support in-place counter for XChaCha.\r\n- We could separate nonce & counter and provide separate API for counter re-use, but\r\n  there are different counter sizes depending on an algorithm.\r\n- Salsa & ChaCha also differ in structures of key / sigma:\r\n\r\n    salsa:     c0 | k(4) | c1 | nonce(2) | ctr(2) | c2 | k(4) | c4\r\n    chacha:    c(4) | k(8) | ctr(1) | nonce(3)\r\n    chachaDJB: c(4) | k(8) | ctr(2) | nonce(2)\r\n- Creating function such as `setSalsaState(key, nonce, sigma, data)` won't work,\r\n  because we can't re-use counter array\r\n- 32-bit nonce is `2 ** 32 * 64` = 256GB with 32-bit counter\r\n- JS does not allow UintArrays bigger than 4GB, so supporting 64-bit counters doesn't matter\r\n\r\nStructure is as following:\r\n\r\nkey=16 -> sigma16, k=key|key\r\nkey=32 -> sigma32, k=key\r\n\r\nnonces:\r\nsalsa20:      8   (8-byte counter)\r\nchacha20djb:  8   (8-byte counter)\r\nchacha20tls:  12  (4-byte counter)\r\nxsalsa:       24  (16 -> hsalsa, 8 -> old nonce)\r\nxchacha:      24  (16 -> hchacha, 8 -> old nonce)\r\n\r\nhttps://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha#appendix-A.2\r\nUse the subkey and remaining 8 byte nonce with ChaCha20 as normal\r\n(prefixed by 4 NUL bytes, since [RFC8439] specifies a 12-byte nonce).\r\n*/\r\n\r\nconst sigma16 = utf8ToBytes('expand 16-byte k');\r\nconst sigma32 = utf8ToBytes('expand 32-byte k');\r\nconst sigma16_32 = u32(sigma16);\r\nconst sigma32_32 = u32(sigma32);\r\n\r\nexport type SalsaOpts = {\r\n  core: (\r\n    c: Uint32Array,\r\n    key: Uint32Array,\r\n    nonce: Uint32Array,\r\n    out: Uint32Array,\r\n    counter: number,\r\n    rounds?: number\r\n  ) => void;\r\n  rounds?: number;\r\n  counterRight?: boolean; // counterRight ? nonce | counter : counter | nonce;\r\n  counterLen?: number;\r\n  blockLen?: number; // NOTE: not tested with different blockLens!\r\n  allow128bitKeys?: boolean; // Original salsa/chacha allows these, but not tested!\r\n  extendNonceFn?: (c: Uint32Array, key: Uint8Array, src: Uint8Array, dst: Uint8Array) => Uint8Array;\r\n};\r\n\r\n// Is byte array aligned to 4 byte offset (u32)?\r\nconst isAligned32 = (b: Uint8Array) => !(b.byteOffset % 4);\r\n\r\nexport const salsaBasic = (opts: SalsaOpts) => {\r\n  const { core, rounds, counterRight, counterLen, allow128bitKeys, extendNonceFn, blockLen } =\r\n    checkOpts(\r\n      { rounds: 20, counterRight: false, counterLen: 8, allow128bitKeys: true, blockLen: 64 },\r\n      opts\r\n    );\r\n  assert.number(counterLen);\r\n  assert.number(rounds);\r\n  assert.number(blockLen);\r\n  assert.bool(counterRight);\r\n  assert.bool(allow128bitKeys);\r\n  const blockLen32 = blockLen / 4;\r\n  if (blockLen % 4 !== 0) throw new Error('Salsa/ChaCha: blockLen must be aligned to 4 bytes');\r\n  return (\r\n    key: Uint8Array,\r\n    nonce: Uint8Array,\r\n    data: Uint8Array,\r\n    output?: Uint8Array,\r\n    counter = 0\r\n  ): Uint8Array => {\r\n    assert.bytes(key);\r\n    assert.bytes(nonce);\r\n    assert.bytes(data);\r\n    if (!output) output = new Uint8Array(data.length);\r\n    assert.bytes(output);\r\n    assert.number(counter);\r\n    // > new Uint32Array([2**32])\r\n    // Uint32Array(1) [ 0 ]\r\n    // > new Uint32Array([2**32-1])\r\n    // Uint32Array(1) [ 4294967295 ]\r\n    if (counter < 0 || counter >= 2 ** 32 - 1) throw new Error('Salsa/ChaCha: counter overflow');\r\n    if (output.length < data.length) {\r\n      throw new Error(\r\n        `Salsa/ChaCha: output (${output.length}) is shorter than data (${data.length})`\r\n      );\r\n    }\r\n    const toClean = [];\r\n    let k, sigma;\r\n    // Handle 128 byte keys\r\n    if (key.length === 32) {\r\n      k = key;\r\n      sigma = sigma32_32;\r\n    } else if (key.length === 16 && allow128bitKeys) {\r\n      k = new Uint8Array(32);\r\n      k.set(key);\r\n      k.set(key, 16);\r\n      sigma = sigma16_32;\r\n      toClean.push(k);\r\n    } else throw new Error(`Salsa/ChaCha: invalid 32-byte key, got length=${key.length}`);\r\n    // Handle extended nonce (HChaCha/HSalsa)\r\n    if (extendNonceFn) {\r\n      if (nonce.length <= 16)\r\n        throw new Error(`Salsa/ChaCha: extended nonce must be bigger than 16 bytes`);\r\n      k = extendNonceFn(sigma, k, nonce.subarray(0, 16), new Uint8Array(32));\r\n      toClean.push(k);\r\n      nonce = nonce.subarray(16);\r\n    }\r\n    // Handle nonce counter\r\n    const nonceLen = 16 - counterLen;\r\n    if (nonce.length !== nonceLen)\r\n      throw new Error(`Salsa/ChaCha: nonce must be ${nonceLen} or 16 bytes`);\r\n    // Pad counter when nonce is 64 bit\r\n    if (nonceLen !== 12) {\r\n      const nc = new Uint8Array(12);\r\n      nc.set(nonce, counterRight ? 0 : 12 - nonce.length);\r\n      toClean.push((nonce = nc));\r\n    }\r\n    // Counter positions\r\n    const block = new Uint8Array(blockLen);\r\n    // Cast to Uint32Array for speed\r\n    const b32 = u32(block);\r\n    const k32 = u32(k);\r\n    const n32 = u32(nonce);\r\n    // Make sure that buffers aligned to 4 bytes\r\n    const d32 = isAligned32(data) && u32(data);\r\n    const o32 = isAligned32(output) && u32(output);\r\n    toClean.push(b32);\r\n    const len = data.length;\r\n    for (let pos = 0, ctr = counter; pos < len; ctr++) {\r\n      core(sigma, k32, n32, b32, ctr, rounds);\r\n      if (ctr >= 2 ** 32 - 1) throw new Error('Salsa/ChaCha: counter overflow');\r\n      const take = Math.min(blockLen, len - pos);\r\n      // full block && aligned to 4 bytes\r\n      if (take === blockLen && o32 && d32) {\r\n        const pos32 = pos / 4;\r\n        if (pos % 4 !== 0) throw new Error('Salsa/ChaCha: invalid block position');\r\n        for (let j = 0; j < blockLen32; j++) o32[pos32 + j] = d32[pos32 + j] ^ b32[j];\r\n        pos += blockLen;\r\n        continue;\r\n      }\r\n      for (let j = 0; j < take; j++) output[pos + j] = data[pos + j] ^ block[j];\r\n      pos += take;\r\n    }\r\n    for (let i = 0; i < toClean.length; i++) toClean[i].fill(0);\r\n    return output;\r\n  };\r\n};\r\n", "import { Cipher, createView, ensureBytes, equalBytes, setBigUint64, u32 } from './utils.js';\r\nimport { poly1305 } from './_poly1305.js';\r\nimport { salsaBasic } from './_salsa.js';\r\n\r\n// ChaCha20 stream cipher was released in 2008. ChaCha aims to increase\r\n// the diffusion per round, but had slightly less cryptanalysis.\r\n// https://cr.yp.to/chacha.html, http://cr.yp.to/chacha/chacha-20080128.pdf\r\n\r\n// Left rotate for uint32\r\nconst rotl = (a: number, b: number) => (a << b) | (a >>> (32 - b));\r\n\r\n/**\r\n * ChaCha core function.\r\n */\r\n// prettier-ignore\r\nfunction chachaCore(\r\n  c: Uint32Array, k: Uint32Array, n: Uint32Array, out: Uint32Array, cnt: number, rounds = 20\r\n): void {\r\n  let y00 = c[0], y01 = c[1], y02 = c[2], y03 = c[3]; // \"expa\"   \"nd 3\"  \"2-by\"  \"te k\"\r\n  let y04 = k[0], y05 = k[1], y06 = k[2], y07 = k[3]; // Key      Key     Key     Key\r\n  let y08 = k[4], y09 = k[5], y10 = k[6], y11 = k[7]; // Key      Key     Key     Key\r\n  let y12 = cnt,  y13 = n[0], y14 = n[1], y15 = n[2]; // Counter  Counter\tNonce   Nonce\r\n  // Save state to temporary variables\r\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\r\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\r\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\r\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\r\n  // Main loop\r\n  for (let i = 0; i < rounds; i += 2) {\r\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\r\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\r\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\r\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\r\n\r\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\r\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\r\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\r\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\r\n\r\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\r\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\r\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^x02, 8);\r\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\r\n\r\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\r\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\r\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\r\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\r\n\r\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\r\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\r\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\r\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\r\n\r\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\r\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\r\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\r\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\r\n\r\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\r\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\r\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\r\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\r\n\r\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\r\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\r\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\r\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\r\n  }\r\n  // Write output\r\n  let oi = 0;\r\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\r\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\r\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\r\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\r\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\r\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\r\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\r\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\r\n}\r\n/**\r\n * hchacha helper method, used primarily in xchacha, to hash\r\n * key and nonce into key' and nonce'.\r\n * Same as chachaCore, but there doesn't seem to be a way to move the block\r\n * out without 25% performance hit.\r\n */\r\n// prettier-ignore\r\nexport function hchacha(\r\n  c: Uint32Array, key: Uint8Array, src: Uint8Array, out: Uint8Array\r\n): Uint8Array {\r\n  const k32 = u32(key);\r\n  const i32 = u32(src);\r\n  const o32 = u32(out);\r\n  let x00 = c[0],   x01 = c[1],   x02 = c[2],   x03 = c[3];\r\n  let x04 = k32[0], x05 = k32[1], x06 = k32[2], x07 = k32[3];\r\n  let x08 = k32[4], x09 = k32[5], x10 = k32[6], x11 = k32[7]\r\n  let x12 = i32[0], x13 = i32[1], x14 = i32[2], x15 = i32[3];\r\n   for (let i = 0; i < 20; i += 2) {\r\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 16);\r\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 12);\r\n    x00 = (x00 + x04) | 0; x12 = rotl(x12 ^ x00, 8);\r\n    x08 = (x08 + x12) | 0; x04 = rotl(x04 ^ x08, 7);\r\n\r\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 16);\r\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 12);\r\n    x01 = (x01 + x05) | 0; x13 = rotl(x13 ^ x01, 8);\r\n    x09 = (x09 + x13) | 0; x05 = rotl(x05 ^ x09, 7);\r\n\r\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 16);\r\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 12);\r\n    x02 = (x02 + x06) | 0; x14 = rotl(x14 ^ x02, 8);\r\n    x10 = (x10 + x14) | 0; x06 = rotl(x06 ^ x10, 7);\r\n\r\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 16);\r\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 12);\r\n    x03 = (x03 + x07) | 0; x15 = rotl(x15 ^ x03, 8)\r\n    x11 = (x11 + x15) | 0; x07 = rotl(x07 ^ x11, 7);\r\n\r\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 16);\r\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 12);\r\n    x00 = (x00 + x05) | 0; x15 = rotl(x15 ^ x00, 8);\r\n    x10 = (x10 + x15) | 0; x05 = rotl(x05 ^ x10, 7);\r\n\r\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 16);\r\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 12);\r\n    x01 = (x01 + x06) | 0; x12 = rotl(x12 ^ x01, 8);\r\n    x11 = (x11 + x12) | 0; x06 = rotl(x06 ^ x11, 7);\r\n\r\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 16);\r\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 12);\r\n    x02 = (x02 + x07) | 0; x13 = rotl(x13 ^ x02, 8);\r\n    x08 = (x08 + x13) | 0; x07 = rotl(x07 ^ x08, 7);\r\n\r\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 16)\r\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 12);\r\n    x03 = (x03 + x04) | 0; x14 = rotl(x14 ^ x03, 8);\r\n    x09 = (x09 + x14) | 0; x04 = rotl(x04 ^ x09, 7);\r\n  }\r\n  o32[0] = x00;\r\n  o32[1] = x01;\r\n  o32[2] = x02;\r\n  o32[3] = x03;\r\n  o32[4] = x12;\r\n  o32[5] = x13;\r\n  o32[6] = x14;\r\n  o32[7] = x15;\r\n  return out;\r\n}\r\n/**\r\n * Original, non-RFC chacha20 from DJB. 8-byte nonce, 8-byte counter.\r\n */\r\nexport const chacha20orig = /* @__PURE__ */ salsaBasic({\r\n  core: chachaCore,\r\n  counterRight: false,\r\n  counterLen: 8,\r\n});\r\n/**\r\n * ChaCha stream cipher. Conforms to RFC 8439 (IETF, TLS). 12-byte nonce, 4-byte counter.\r\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\r\n */\r\nexport const chacha20 = /* @__PURE__ */ salsaBasic({\r\n  core: chachaCore,\r\n  counterRight: false,\r\n  counterLen: 4,\r\n  allow128bitKeys: false,\r\n});\r\n\r\n/**\r\n * XChaCha eXtended-nonce ChaCha. 24-byte nonce.\r\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\r\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\r\n */\r\nexport const xchacha20 = /* @__PURE__ */ salsaBasic({\r\n  core: chachaCore,\r\n  counterRight: false,\r\n  counterLen: 8,\r\n  extendNonceFn: hchacha,\r\n  allow128bitKeys: false,\r\n});\r\n\r\n/**\r\n * Reduced 8-round chacha, described in original paper.\r\n */\r\nexport const chacha8 = /* @__PURE__ */ salsaBasic({\r\n  core: chachaCore,\r\n  counterRight: false,\r\n  counterLen: 4,\r\n  rounds: 8,\r\n});\r\n\r\n/**\r\n * Reduced 12-round chacha, described in original paper.\r\n */\r\nexport const chacha12 = /* @__PURE__ */ salsaBasic({\r\n  core: chachaCore,\r\n  counterRight: false,\r\n  counterLen: 4,\r\n  rounds: 12,\r\n});\r\n\r\nconst ZERO = /* @__PURE__ */ new Uint8Array(16);\r\n// Pad to digest size with zeros\r\nconst updatePadded = (h: ReturnType<typeof poly1305.create>, msg: Uint8Array) => {\r\n  h.update(msg);\r\n  const left = msg.length % 16;\r\n  if (left) h.update(ZERO.subarray(left));\r\n};\r\n\r\nconst computeTag = (\r\n  fn: typeof chacha20,\r\n  key: Uint8Array,\r\n  nonce: Uint8Array,\r\n  data: Uint8Array,\r\n  AAD?: Uint8Array\r\n) => {\r\n  const authKey = fn(key, nonce, new Uint8Array(32));\r\n  const h = poly1305.create(authKey);\r\n  if (AAD) updatePadded(h, AAD);\r\n  updatePadded(h, data);\r\n  const num = new Uint8Array(16);\r\n  const view = createView(num);\r\n  setBigUint64(view, 0, BigInt(AAD ? AAD.length : 0), true);\r\n  setBigUint64(view, 8, BigInt(data.length), true);\r\n  h.update(num);\r\n  const res = h.digest();\r\n  authKey.fill(0);\r\n  return res;\r\n};\r\n\r\n/**\r\n * AEAD algorithm from RFC 8439.\r\n * Salsa20 and chacha (RFC 8439) use poly1305 differently.\r\n * We could have composed them similar to:\r\n * https://github.com/paulmillr/scure-base/blob/b266c73dde977b1dd7ef40ef7a23cc15aab526b3/index.ts#L250\r\n * But it's hard because of authKey:\r\n * In salsa20, authKey changes position in salsa stream.\r\n * In chacha, authKey can't be computed inside computeTag, it modifies the counter.\r\n */\r\nexport const _poly1305_aead =\r\n  (xorStream: typeof chacha20) =>\r\n  (key: Uint8Array, nonce: Uint8Array, AAD?: Uint8Array): Cipher => {\r\n    const tagLength = 16;\r\n    ensureBytes(key, 32);\r\n    ensureBytes(nonce);\r\n    return {\r\n      tagLength,\r\n      encrypt: (plaintext: Uint8Array, output?: Uint8Array) => {\r\n        const plength = plaintext.length;\r\n        const clength = plength + tagLength;\r\n        if (output) {\r\n          ensureBytes(output, clength);\r\n        } else {\r\n          output = new Uint8Array(clength);\r\n        }\r\n        xorStream(key, nonce, plaintext, output, 1);\r\n        const tag = computeTag(xorStream, key, nonce, output.subarray(0, -tagLength), AAD);\r\n        output.set(tag, plength); // append tag\r\n        return output;\r\n      },\r\n      decrypt: (ciphertext: Uint8Array, output?: Uint8Array) => {\r\n        const clength = ciphertext.length;\r\n        const plength = clength - tagLength;\r\n        if (clength < tagLength)\r\n          throw new Error(`encrypted data must be at least ${tagLength} bytes`);\r\n        if (output) {\r\n          ensureBytes(output, plength);\r\n        } else {\r\n          output = new Uint8Array(plength);\r\n        }\r\n        const data = ciphertext.subarray(0, -tagLength);\r\n        const passedTag = ciphertext.subarray(-tagLength);\r\n        const tag = computeTag(xorStream, key, nonce, data, AAD);\r\n        if (!equalBytes(passedTag, tag)) throw new Error('invalid tag');\r\n        xorStream(key, nonce, data, output, 1);\r\n        return output;\r\n      },\r\n    };\r\n  };\r\n\r\n/**\r\n * ChaCha20-Poly1305 from RFC 8439.\r\n * With 12-byte nonce, it's not safe to use fill it with random (CSPRNG), due to collision chance.\r\n */\r\nexport const chacha20poly1305 = /* @__PURE__ */ _poly1305_aead(chacha20);\r\n/**\r\n * XChaCha20-Poly1305 extended-nonce chacha.\r\n * https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-xchacha\r\n * With 24-byte nonce, it's safe to use fill it with random (CSPRNG).\r\n */\r\nexport const xchacha20poly1305 = /* @__PURE__ */ _poly1305_aead(xchacha20);\r\n", "import assert from './_assert.js';\r\nimport { CHash, Input, toBytes } from './utils.js';\r\nimport { hmac } from './hmac.js';\r\n\r\n// HKDF (RFC 5869)\r\n// https://soatok.blog/2021/11/17/understanding-hkdf/\r\n\r\n/**\r\n * HKDF-Extract(IKM, salt) -> PRK\r\n * Arguments position differs from spec (IKM is first one, since it is not optional)\r\n * @param hash\r\n * @param ikm\r\n * @param salt\r\n * @returns\r\n */\r\nexport function extract(hash: CHash, ikm: Input, salt?: Input) {\r\n  assert.hash(hash);\r\n  // NOTE: some libraries treat zero-length array as 'not provided';\r\n  // we don't, since we have undefined as 'not provided'\r\n  // https://github.com/RustCrypto/KDFs/issues/15\r\n  if (salt === undefined) salt = new Uint8Array(hash.outputLen); // if not provided, it is set to a string of HashLen zeros\r\n  return hmac(hash, toBytes(salt), toBytes(ikm));\r\n}\r\n\r\n// HKDF-Expand(PRK, info, L) -> OKM\r\nconst HKDF_COUNTER = new Uint8Array([0]);\r\nconst EMPTY_BUFFER = new Uint8Array();\r\n\r\n/**\r\n * HKDF-expand from the spec.\r\n * @param prk - a pseudorandom key of at least HashLen octets (usually, the output from the extract step)\r\n * @param info - optional context and application specific information (can be a zero-length string)\r\n * @param length - length of output keying material in octets\r\n */\r\nexport function expand(hash: CHash, prk: Input, info?: Input, length: number = 32) {\r\n  assert.hash(hash);\r\n  assert.number(length);\r\n  if (length > 255 * hash.outputLen) throw new Error('Length should be <= 255*HashLen');\r\n  const blocks = Math.ceil(length / hash.outputLen);\r\n  if (info === undefined) info = EMPTY_BUFFER;\r\n  // first L(ength) octets of T\r\n  const okm = new Uint8Array(blocks * hash.outputLen);\r\n  // Re-use HMAC instance between blocks\r\n  const HMAC = hmac.create(hash, prk);\r\n  const HMACTmp = HMAC._cloneInto();\r\n  const T = new Uint8Array(HMAC.outputLen);\r\n  for (let counter = 0; counter < blocks; counter++) {\r\n    HKDF_COUNTER[0] = counter + 1;\r\n    // T(0) = empty string (zero length)\r\n    // T(N) = HMAC-Hash(PRK, T(N-1) | info | N)\r\n    HMACTmp.update(counter === 0 ? EMPTY_BUFFER : T)\r\n      .update(info)\r\n      .update(HKDF_COUNTER)\r\n      .digestInto(T);\r\n    okm.set(T, hash.outputLen * counter);\r\n    HMAC._cloneInto(HMACTmp);\r\n  }\r\n  HMAC.destroy();\r\n  HMACTmp.destroy();\r\n  T.fill(0);\r\n  HKDF_COUNTER.fill(0);\r\n  return okm.slice(0, length);\r\n}\r\n\r\n/**\r\n * HKDF (RFC 5869): extract + expand in one step.\r\n * @param hash - hash function that would be used (e.g. sha256)\r\n * @param ikm - input keying material, the initial key\r\n * @param salt - optional salt value (a non-secret random value)\r\n * @param info - optional context and application specific information\r\n * @param length - length of output keying material in octets\r\n */\r\nexport const hkdf = (\r\n  hash: CHash,\r\n  ikm: Input,\r\n  salt: Input | undefined,\r\n  info: Input | undefined,\r\n  length: number\r\n) => expand(hash, extract(hash, ikm, salt), info, length);\r\n", "var __defProp = Object.defineProperty;\r\nvar __export = (target, all) => {\r\n  for (var name in all)\r\n    __defProp(target, name, { get: all[name], enumerable: true });\r\n};\r\n\r\n// keys.ts\r\nimport { schnorr } from \"@noble/curves/secp256k1\";\r\nimport { bytesToHex } from \"@noble/hashes/utils\";\r\nfunction generatePrivateKey() {\r\n  return bytesToHex(schnorr.utils.randomPrivateKey());\r\n}\r\nfunction getPublicKey(privateKey) {\r\n  return bytesToHex(schnorr.getPublicKey(privateKey));\r\n}\r\n\r\n// event.ts\r\nimport { schnorr as schnorr2 } from \"@noble/curves/secp256k1\";\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\nimport { bytesToHex as bytesToHex2 } from \"@noble/hashes/utils\";\r\n\r\n// utils.ts\r\nvar utils_exports = {};\r\n__export(utils_exports, {\r\n  MessageNode: () => MessageNode,\r\n  MessageQueue: () => MessageQueue,\r\n  insertEventIntoAscendingList: () => insertEventIntoAscendingList,\r\n  insertEventIntoDescendingList: () => insertEventIntoDescendingList,\r\n  normalizeURL: () => normalizeURL,\r\n  utf8Decoder: () => utf8Decoder,\r\n  utf8Encoder: () => utf8Encoder\r\n});\r\nvar utf8Decoder = new TextDecoder(\"utf-8\");\r\nvar utf8Encoder = new TextEncoder();\r\nfunction normalizeURL(url) {\r\n  let p = new URL(url);\r\n  p.pathname = p.pathname.replace(/\\/+/g, \"/\");\r\n  if (p.pathname.endsWith(\"/\"))\r\n    p.pathname = p.pathname.slice(0, -1);\r\n  if (p.port === \"80\" && p.protocol === \"ws:\" || p.port === \"443\" && p.protocol === \"wss:\")\r\n    p.port = \"\";\r\n  p.searchParams.sort();\r\n  p.hash = \"\";\r\n  return p.toString();\r\n}\r\nfunction insertEventIntoDescendingList(sortedArray, event) {\r\n  let start = 0;\r\n  let end = sortedArray.length - 1;\r\n  let midPoint;\r\n  let position = start;\r\n  if (end < 0) {\r\n    position = 0;\r\n  } else if (event.created_at < sortedArray[end].created_at) {\r\n    position = end + 1;\r\n  } else if (event.created_at >= sortedArray[start].created_at) {\r\n    position = start;\r\n  } else\r\n    while (true) {\r\n      if (end <= start + 1) {\r\n        position = end;\r\n        break;\r\n      }\r\n      midPoint = Math.floor(start + (end - start) / 2);\r\n      if (sortedArray[midPoint].created_at > event.created_at) {\r\n        start = midPoint;\r\n      } else if (sortedArray[midPoint].created_at < event.created_at) {\r\n        end = midPoint;\r\n      } else {\r\n        position = midPoint;\r\n        break;\r\n      }\r\n    }\r\n  if (sortedArray[position]?.id !== event.id) {\r\n    return [...sortedArray.slice(0, position), event, ...sortedArray.slice(position)];\r\n  }\r\n  return sortedArray;\r\n}\r\nfunction insertEventIntoAscendingList(sortedArray, event) {\r\n  let start = 0;\r\n  let end = sortedArray.length - 1;\r\n  let midPoint;\r\n  let position = start;\r\n  if (end < 0) {\r\n    position = 0;\r\n  } else if (event.created_at > sortedArray[end].created_at) {\r\n    position = end + 1;\r\n  } else if (event.created_at <= sortedArray[start].created_at) {\r\n    position = start;\r\n  } else\r\n    while (true) {\r\n      if (end <= start + 1) {\r\n        position = end;\r\n        break;\r\n      }\r\n      midPoint = Math.floor(start + (end - start) / 2);\r\n      if (sortedArray[midPoint].created_at < event.created_at) {\r\n        start = midPoint;\r\n      } else if (sortedArray[midPoint].created_at > event.created_at) {\r\n        end = midPoint;\r\n      } else {\r\n        position = midPoint;\r\n        break;\r\n      }\r\n    }\r\n  if (sortedArray[position]?.id !== event.id) {\r\n    return [...sortedArray.slice(0, position), event, ...sortedArray.slice(position)];\r\n  }\r\n  return sortedArray;\r\n}\r\nvar MessageNode = class {\r\n  _value;\r\n  _next;\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(message) {\r\n    this._value = message;\r\n  }\r\n  get next() {\r\n    return this._next;\r\n  }\r\n  set next(node) {\r\n    this._next = node;\r\n  }\r\n  constructor(message) {\r\n    this._value = message;\r\n    this._next = null;\r\n  }\r\n};\r\nvar MessageQueue = class {\r\n  _first;\r\n  _last;\r\n  get first() {\r\n    return this._first;\r\n  }\r\n  set first(messageNode) {\r\n    this._first = messageNode;\r\n  }\r\n  get last() {\r\n    return this._last;\r\n  }\r\n  set last(messageNode) {\r\n    this._last = messageNode;\r\n  }\r\n  _size;\r\n  get size() {\r\n    return this._size;\r\n  }\r\n  set size(v) {\r\n    this._size = v;\r\n  }\r\n  constructor() {\r\n    this._first = null;\r\n    this._last = null;\r\n    this._size = 0;\r\n  }\r\n  enqueue(message) {\r\n    const newNode = new MessageNode(message);\r\n    if (this._size === 0 || !this._last) {\r\n      this._first = newNode;\r\n      this._last = newNode;\r\n    } else {\r\n      this._last.next = newNode;\r\n      this._last = newNode;\r\n    }\r\n    this._size++;\r\n    return true;\r\n  }\r\n  dequeue() {\r\n    if (this._size === 0 || !this._first)\r\n      return null;\r\n    let prev = this._first;\r\n    this._first = prev.next;\r\n    prev.next = null;\r\n    this._size--;\r\n    return prev.value;\r\n  }\r\n};\r\n\r\n// event.ts\r\nvar verifiedSymbol = Symbol(\"verified\");\r\nvar Kind = /* @__PURE__ */ ((Kind3) => {\r\n  Kind3[Kind3[\"Metadata\"] = 0] = \"Metadata\";\r\n  Kind3[Kind3[\"Text\"] = 1] = \"Text\";\r\n  Kind3[Kind3[\"RecommendRelay\"] = 2] = \"RecommendRelay\";\r\n  Kind3[Kind3[\"Contacts\"] = 3] = \"Contacts\";\r\n  Kind3[Kind3[\"EncryptedDirectMessage\"] = 4] = \"EncryptedDirectMessage\";\r\n  Kind3[Kind3[\"EventDeletion\"] = 5] = \"EventDeletion\";\r\n  Kind3[Kind3[\"Repost\"] = 6] = \"Repost\";\r\n  Kind3[Kind3[\"Reaction\"] = 7] = \"Reaction\";\r\n  Kind3[Kind3[\"BadgeAward\"] = 8] = \"BadgeAward\";\r\n  Kind3[Kind3[\"ChannelCreation\"] = 40] = \"ChannelCreation\";\r\n  Kind3[Kind3[\"ChannelMetadata\"] = 41] = \"ChannelMetadata\";\r\n  Kind3[Kind3[\"ChannelMessage\"] = 42] = \"ChannelMessage\";\r\n  Kind3[Kind3[\"ChannelHideMessage\"] = 43] = \"ChannelHideMessage\";\r\n  Kind3[Kind3[\"ChannelMuteUser\"] = 44] = \"ChannelMuteUser\";\r\n  Kind3[Kind3[\"Blank\"] = 255] = \"Blank\";\r\n  Kind3[Kind3[\"Report\"] = 1984] = \"Report\";\r\n  Kind3[Kind3[\"ZapRequest\"] = 9734] = \"ZapRequest\";\r\n  Kind3[Kind3[\"Zap\"] = 9735] = \"Zap\";\r\n  Kind3[Kind3[\"RelayList\"] = 10002] = \"RelayList\";\r\n  Kind3[Kind3[\"ClientAuth\"] = 22242] = \"ClientAuth\";\r\n  Kind3[Kind3[\"NwcRequest\"] = 23194] = \"NwcRequest\";\r\n  Kind3[Kind3[\"HttpAuth\"] = 27235] = \"HttpAuth\";\r\n  Kind3[Kind3[\"ProfileBadge\"] = 30008] = \"ProfileBadge\";\r\n  Kind3[Kind3[\"BadgeDefinition\"] = 30009] = \"BadgeDefinition\";\r\n  Kind3[Kind3[\"Article\"] = 30023] = \"Article\";\r\n  Kind3[Kind3[\"FileMetadata\"] = 1063] = \"FileMetadata\";\r\n  return Kind3;\r\n})(Kind || {});\r\nfunction getBlankEvent(kind = 255 /* Blank */) {\r\n  return {\r\n    kind,\r\n    content: \"\",\r\n    tags: [],\r\n    created_at: 0\r\n  };\r\n}\r\nfunction finishEvent(t, privateKey) {\r\n  const event = t;\r\n  event.pubkey = getPublicKey(privateKey);\r\n  event.id = getEventHash(event);\r\n  event.sig = getSignature(event, privateKey);\r\n  event[verifiedSymbol] = true;\r\n  return event;\r\n}\r\nfunction serializeEvent(evt) {\r\n  if (!validateEvent(evt))\r\n    throw new Error(\"can't serialize event with wrong or missing properties\");\r\n  return JSON.stringify([0, evt.pubkey, evt.created_at, evt.kind, evt.tags, evt.content]);\r\n}\r\nfunction getEventHash(event) {\r\n  let eventHash = sha256(utf8Encoder.encode(serializeEvent(event)));\r\n  return bytesToHex2(eventHash);\r\n}\r\nvar isRecord = (obj) => obj instanceof Object;\r\nfunction validateEvent(event) {\r\n  if (!isRecord(event))\r\n    return false;\r\n  if (typeof event.kind !== \"number\")\r\n    return false;\r\n  if (typeof event.content !== \"string\")\r\n    return false;\r\n  if (typeof event.created_at !== \"number\")\r\n    return false;\r\n  if (typeof event.pubkey !== \"string\")\r\n    return false;\r\n  if (!event.pubkey.match(/^[a-f0-9]{64}$/))\r\n    return false;\r\n  if (!Array.isArray(event.tags))\r\n    return false;\r\n  for (let i = 0; i < event.tags.length; i++) {\r\n    let tag = event.tags[i];\r\n    if (!Array.isArray(tag))\r\n      return false;\r\n    for (let j = 0; j < tag.length; j++) {\r\n      if (typeof tag[j] === \"object\")\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction verifySignature(event) {\r\n  if (typeof event[verifiedSymbol] === \"boolean\")\r\n    return event[verifiedSymbol];\r\n  const hash = getEventHash(event);\r\n  if (hash !== event.id) {\r\n    return event[verifiedSymbol] = false;\r\n  }\r\n  try {\r\n    return event[verifiedSymbol] = schnorr2.verify(event.sig, hash, event.pubkey);\r\n  } catch (err) {\r\n    return event[verifiedSymbol] = false;\r\n  }\r\n}\r\nfunction signEvent(event, key) {\r\n  console.warn(\r\n    \"nostr-tools: `signEvent` is deprecated and will be removed or changed in the future. Please use `getSignature` instead.\"\r\n  );\r\n  return getSignature(event, key);\r\n}\r\nfunction getSignature(event, key) {\r\n  return bytesToHex2(schnorr2.sign(getEventHash(event), key));\r\n}\r\n\r\n// filter.ts\r\nfunction matchFilter(filter, event) {\r\n  if (filter.ids && filter.ids.indexOf(event.id) === -1) {\r\n    if (!filter.ids.some((prefix) => event.id.startsWith(prefix))) {\r\n      return false;\r\n    }\r\n  }\r\n  if (filter.kinds && filter.kinds.indexOf(event.kind) === -1)\r\n    return false;\r\n  if (filter.authors && filter.authors.indexOf(event.pubkey) === -1) {\r\n    if (!filter.authors.some((prefix) => event.pubkey.startsWith(prefix))) {\r\n      return false;\r\n    }\r\n  }\r\n  for (let f in filter) {\r\n    if (f[0] === \"#\") {\r\n      let tagName = f.slice(1);\r\n      let values = filter[`#${tagName}`];\r\n      if (values && !event.tags.find(([t, v]) => t === f.slice(1) && values.indexOf(v) !== -1))\r\n        return false;\r\n    }\r\n  }\r\n  if (filter.since && event.created_at < filter.since)\r\n    return false;\r\n  if (filter.until && event.created_at > filter.until)\r\n    return false;\r\n  return true;\r\n}\r\nfunction matchFilters(filters, event) {\r\n  for (let i = 0; i < filters.length; i++) {\r\n    if (matchFilter(filters[i], event))\r\n      return true;\r\n  }\r\n  return false;\r\n}\r\nfunction mergeFilters(...filters) {\r\n  let result = {};\r\n  for (let i = 0; i < filters.length; i++) {\r\n    let filter = filters[i];\r\n    Object.entries(filter).forEach(([property, values]) => {\r\n      if (property === \"kinds\" || property === \"ids\" || property === \"authors\" || property[0] === \"#\") {\r\n        result[property] = result[property] || [];\r\n        for (let v = 0; v < values.length; v++) {\r\n          let value = values[v];\r\n          if (!result[property].includes(value))\r\n            result[property].push(value);\r\n        }\r\n      }\r\n    });\r\n    if (filter.limit && (!result.limit || filter.limit > result.limit))\r\n      result.limit = filter.limit;\r\n    if (filter.until && (!result.until || filter.until > result.until))\r\n      result.until = filter.until;\r\n    if (filter.since && (!result.since || filter.since < result.since))\r\n      result.since = filter.since;\r\n  }\r\n  return result;\r\n}\r\n\r\n// fakejson.ts\r\nvar fakejson_exports = {};\r\n__export(fakejson_exports, {\r\n  getHex64: () => getHex64,\r\n  getInt: () => getInt,\r\n  getSubscriptionId: () => getSubscriptionId,\r\n  matchEventId: () => matchEventId,\r\n  matchEventKind: () => matchEventKind,\r\n  matchEventPubkey: () => matchEventPubkey\r\n});\r\nfunction getHex64(json, field) {\r\n  let len = field.length + 3;\r\n  let idx = json.indexOf(`\"${field}\":`) + len;\r\n  let s = json.slice(idx).indexOf(`\"`) + idx + 1;\r\n  return json.slice(s, s + 64);\r\n}\r\nfunction getInt(json, field) {\r\n  let len = field.length;\r\n  let idx = json.indexOf(`\"${field}\":`) + len + 3;\r\n  let sliced = json.slice(idx);\r\n  let end = Math.min(sliced.indexOf(\",\"), sliced.indexOf(\"}\"));\r\n  return parseInt(sliced.slice(0, end), 10);\r\n}\r\nfunction getSubscriptionId(json) {\r\n  let idx = json.slice(0, 22).indexOf(`\"EVENT\"`);\r\n  if (idx === -1)\r\n    return null;\r\n  let pstart = json.slice(idx + 7 + 1).indexOf(`\"`);\r\n  if (pstart === -1)\r\n    return null;\r\n  let start = idx + 7 + 1 + pstart;\r\n  let pend = json.slice(start + 1, 80).indexOf(`\"`);\r\n  if (pend === -1)\r\n    return null;\r\n  let end = start + 1 + pend;\r\n  return json.slice(start + 1, end);\r\n}\r\nfunction matchEventId(json, id) {\r\n  return id === getHex64(json, \"id\");\r\n}\r\nfunction matchEventPubkey(json, pubkey) {\r\n  return pubkey === getHex64(json, \"pubkey\");\r\n}\r\nfunction matchEventKind(json, kind) {\r\n  return kind === getInt(json, \"kind\");\r\n}\r\n\r\n// relay.ts\r\nvar newListeners = () => ({\r\n  connect: [],\r\n  disconnect: [],\r\n  error: [],\r\n  notice: [],\r\n  auth: []\r\n});\r\nfunction relayInit(url, options = {}) {\r\n  let { listTimeout = 3e3, getTimeout = 3e3, countTimeout = 3e3 } = options;\r\n  var ws;\r\n  var openSubs = {};\r\n  var listeners = newListeners();\r\n  var subListeners = {};\r\n  var pubListeners = {};\r\n  var connectionPromise;\r\n  async function connectRelay() {\r\n    if (connectionPromise)\r\n      return connectionPromise;\r\n    connectionPromise = new Promise((resolve, reject) => {\r\n      try {\r\n        ws = new WebSocket(url);\r\n      } catch (err) {\r\n        reject(err);\r\n      }\r\n      ws.onopen = () => {\r\n        listeners.connect.forEach((cb) => cb());\r\n        resolve();\r\n      };\r\n      ws.onerror = () => {\r\n        connectionPromise = void 0;\r\n        listeners.error.forEach((cb) => cb());\r\n        reject();\r\n      };\r\n      ws.onclose = async () => {\r\n        connectionPromise = void 0;\r\n        listeners.disconnect.forEach((cb) => cb());\r\n      };\r\n      let incomingMessageQueue = new MessageQueue();\r\n      let handleNextInterval;\r\n      ws.onmessage = (e) => {\r\n        incomingMessageQueue.enqueue(e.data);\r\n        if (!handleNextInterval) {\r\n          handleNextInterval = setInterval(handleNext, 0);\r\n        }\r\n      };\r\n      function handleNext() {\r\n        if (incomingMessageQueue.size === 0) {\r\n          clearInterval(handleNextInterval);\r\n          handleNextInterval = null;\r\n          return;\r\n        }\r\n        var json = incomingMessageQueue.dequeue();\r\n        if (!json)\r\n          return;\r\n        let subid = getSubscriptionId(json);\r\n        if (subid) {\r\n          let so = openSubs[subid];\r\n          if (so && so.alreadyHaveEvent && so.alreadyHaveEvent(getHex64(json, \"id\"), url)) {\r\n            return;\r\n          }\r\n        }\r\n        try {\r\n          let data = JSON.parse(json);\r\n          switch (data[0]) {\r\n            case \"EVENT\": {\r\n              let id2 = data[1];\r\n              let event = data[2];\r\n              if (validateEvent(event) && openSubs[id2] && (openSubs[id2].skipVerification || verifySignature(event)) && matchFilters(openSubs[id2].filters, event)) {\r\n                openSubs[id2];\r\n                (subListeners[id2]?.event || []).forEach((cb) => cb(event));\r\n              }\r\n              return;\r\n            }\r\n            case \"COUNT\":\r\n              let id = data[1];\r\n              let payload = data[2];\r\n              if (openSubs[id]) {\r\n                ;\r\n                (subListeners[id]?.count || []).forEach((cb) => cb(payload));\r\n              }\r\n              return;\r\n            case \"EOSE\": {\r\n              let id2 = data[1];\r\n              if (id2 in subListeners) {\r\n                subListeners[id2].eose.forEach((cb) => cb());\r\n                subListeners[id2].eose = [];\r\n              }\r\n              return;\r\n            }\r\n            case \"OK\": {\r\n              let id2 = data[1];\r\n              let ok = data[2];\r\n              let reason = data[3] || \"\";\r\n              if (id2 in pubListeners) {\r\n                let { resolve: resolve2, reject: reject2 } = pubListeners[id2];\r\n                if (ok)\r\n                  resolve2(null);\r\n                else\r\n                  reject2(new Error(reason));\r\n              }\r\n              return;\r\n            }\r\n            case \"NOTICE\":\r\n              let notice = data[1];\r\n              listeners.notice.forEach((cb) => cb(notice));\r\n              return;\r\n            case \"AUTH\": {\r\n              let challenge = data[1];\r\n              listeners.auth?.forEach((cb) => cb(challenge));\r\n              return;\r\n            }\r\n          }\r\n        } catch (err) {\r\n          return;\r\n        }\r\n      }\r\n    });\r\n    return connectionPromise;\r\n  }\r\n  function connected() {\r\n    return ws?.readyState === 1;\r\n  }\r\n  async function connect() {\r\n    if (connected())\r\n      return;\r\n    await connectRelay();\r\n  }\r\n  async function trySend(params) {\r\n    let msg = JSON.stringify(params);\r\n    if (!connected()) {\r\n      await new Promise((resolve) => setTimeout(resolve, 1e3));\r\n      if (!connected()) {\r\n        return;\r\n      }\r\n    }\r\n    try {\r\n      ws.send(msg);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n  const sub = (filters, {\r\n    verb = \"REQ\",\r\n    skipVerification = false,\r\n    alreadyHaveEvent = null,\r\n    id = Math.random().toString().slice(2)\r\n  } = {}) => {\r\n    let subid = id;\r\n    openSubs[subid] = {\r\n      id: subid,\r\n      filters,\r\n      skipVerification,\r\n      alreadyHaveEvent\r\n    };\r\n    trySend([verb, subid, ...filters]);\r\n    let subscription = {\r\n      sub: (newFilters, newOpts = {}) => sub(newFilters || filters, {\r\n        skipVerification: newOpts.skipVerification || skipVerification,\r\n        alreadyHaveEvent: newOpts.alreadyHaveEvent || alreadyHaveEvent,\r\n        id: subid\r\n      }),\r\n      unsub: () => {\r\n        delete openSubs[subid];\r\n        delete subListeners[subid];\r\n        trySend([\"CLOSE\", subid]);\r\n      },\r\n      on: (type, cb) => {\r\n        subListeners[subid] = subListeners[subid] || {\r\n          event: [],\r\n          count: [],\r\n          eose: []\r\n        };\r\n        subListeners[subid][type].push(cb);\r\n      },\r\n      off: (type, cb) => {\r\n        let listeners2 = subListeners[subid];\r\n        let idx = listeners2[type].indexOf(cb);\r\n        if (idx >= 0)\r\n          listeners2[type].splice(idx, 1);\r\n      },\r\n      get events() {\r\n        return eventsGenerator(subscription);\r\n      }\r\n    };\r\n    return subscription;\r\n  };\r\n  function _publishEvent(event, type) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!event.id) {\r\n        reject(new Error(`event ${event} has no id`));\r\n        return;\r\n      }\r\n      let id = event.id;\r\n      trySend([type, event]);\r\n      pubListeners[id] = { resolve, reject };\r\n    });\r\n  }\r\n  return {\r\n    url,\r\n    sub,\r\n    on: (type, cb) => {\r\n      listeners[type].push(cb);\r\n      if (type === \"connect\" && ws?.readyState === 1) {\r\n        ;\r\n        cb();\r\n      }\r\n    },\r\n    off: (type, cb) => {\r\n      let index = listeners[type].indexOf(cb);\r\n      if (index !== -1)\r\n        listeners[type].splice(index, 1);\r\n    },\r\n    list: (filters, opts) => new Promise((resolve) => {\r\n      let s = sub(filters, opts);\r\n      let events = [];\r\n      let timeout = setTimeout(() => {\r\n        s.unsub();\r\n        resolve(events);\r\n      }, listTimeout);\r\n      s.on(\"eose\", () => {\r\n        s.unsub();\r\n        clearTimeout(timeout);\r\n        resolve(events);\r\n      });\r\n      s.on(\"event\", (event) => {\r\n        events.push(event);\r\n      });\r\n    }),\r\n    get: (filter, opts) => new Promise((resolve) => {\r\n      let s = sub([filter], opts);\r\n      let timeout = setTimeout(() => {\r\n        s.unsub();\r\n        resolve(null);\r\n      }, getTimeout);\r\n      s.on(\"event\", (event) => {\r\n        s.unsub();\r\n        clearTimeout(timeout);\r\n        resolve(event);\r\n      });\r\n    }),\r\n    count: (filters) => new Promise((resolve) => {\r\n      let s = sub(filters, { ...sub, verb: \"COUNT\" });\r\n      let timeout = setTimeout(() => {\r\n        s.unsub();\r\n        resolve(null);\r\n      }, countTimeout);\r\n      s.on(\"count\", (event) => {\r\n        s.unsub();\r\n        clearTimeout(timeout);\r\n        resolve(event);\r\n      });\r\n    }),\r\n    async publish(event) {\r\n      await _publishEvent(event, \"EVENT\");\r\n    },\r\n    async auth(event) {\r\n      await _publishEvent(event, \"AUTH\");\r\n    },\r\n    connect,\r\n    close() {\r\n      listeners = newListeners();\r\n      subListeners = {};\r\n      pubListeners = {};\r\n      if (ws?.readyState === WebSocket.OPEN) {\r\n        ws.close();\r\n      }\r\n    },\r\n    get status() {\r\n      return ws?.readyState ?? 3;\r\n    }\r\n  };\r\n}\r\nasync function* eventsGenerator(sub) {\r\n  let nextResolve;\r\n  const eventQueue = [];\r\n  const pushToQueue = (event) => {\r\n    if (nextResolve) {\r\n      nextResolve(event);\r\n      nextResolve = void 0;\r\n    } else {\r\n      eventQueue.push(event);\r\n    }\r\n  };\r\n  sub.on(\"event\", pushToQueue);\r\n  try {\r\n    while (true) {\r\n      if (eventQueue.length > 0) {\r\n        yield eventQueue.shift();\r\n      } else {\r\n        const event = await new Promise((resolve) => {\r\n          nextResolve = resolve;\r\n        });\r\n        yield event;\r\n      }\r\n    }\r\n  } finally {\r\n    sub.off(\"event\", pushToQueue);\r\n  }\r\n}\r\n\r\n// pool.ts\r\nvar SimplePool = class {\r\n  _conn;\r\n  _seenOn = {};\r\n  batchedByKey = {};\r\n  eoseSubTimeout;\r\n  getTimeout;\r\n  seenOnEnabled = true;\r\n  batchInterval = 100;\r\n  constructor(options = {}) {\r\n    this._conn = {};\r\n    this.eoseSubTimeout = options.eoseSubTimeout || 3400;\r\n    this.getTimeout = options.getTimeout || 3400;\r\n    this.seenOnEnabled = options.seenOnEnabled !== false;\r\n    this.batchInterval = options.batchInterval || 100;\r\n  }\r\n  close(relays) {\r\n    relays.forEach((url) => {\r\n      let relay = this._conn[normalizeURL(url)];\r\n      if (relay)\r\n        relay.close();\r\n    });\r\n  }\r\n  async ensureRelay(url) {\r\n    const nm = normalizeURL(url);\r\n    if (!this._conn[nm]) {\r\n      this._conn[nm] = relayInit(nm, {\r\n        getTimeout: this.getTimeout * 0.9,\r\n        listTimeout: this.getTimeout * 0.9\r\n      });\r\n    }\r\n    const relay = this._conn[nm];\r\n    await relay.connect();\r\n    return relay;\r\n  }\r\n  sub(relays, filters, opts) {\r\n    let _knownIds = /* @__PURE__ */ new Set();\r\n    let modifiedOpts = { ...opts || {} };\r\n    modifiedOpts.alreadyHaveEvent = (id, url) => {\r\n      if (opts?.alreadyHaveEvent?.(id, url)) {\r\n        return true;\r\n      }\r\n      if (this.seenOnEnabled) {\r\n        let set = this._seenOn[id] || /* @__PURE__ */ new Set();\r\n        set.add(url);\r\n        this._seenOn[id] = set;\r\n      }\r\n      return _knownIds.has(id);\r\n    };\r\n    let subs = [];\r\n    let eventListeners = /* @__PURE__ */ new Set();\r\n    let eoseListeners = /* @__PURE__ */ new Set();\r\n    let eosesMissing = relays.length;\r\n    let eoseSent = false;\r\n    let eoseTimeout = setTimeout(\r\n      () => {\r\n        eoseSent = true;\r\n        for (let cb of eoseListeners.values())\r\n          cb();\r\n      },\r\n      opts?.eoseSubTimeout || this.eoseSubTimeout\r\n    );\r\n    relays.filter((r, i, a) => a.indexOf(r) === i).forEach(async (relay) => {\r\n      let r;\r\n      try {\r\n        r = await this.ensureRelay(relay);\r\n      } catch (err) {\r\n        handleEose();\r\n        return;\r\n      }\r\n      if (!r)\r\n        return;\r\n      let s = r.sub(filters, modifiedOpts);\r\n      s.on(\"event\", (event) => {\r\n        _knownIds.add(event.id);\r\n        for (let cb of eventListeners.values())\r\n          cb(event);\r\n      });\r\n      s.on(\"eose\", () => {\r\n        if (eoseSent)\r\n          return;\r\n        handleEose();\r\n      });\r\n      subs.push(s);\r\n      function handleEose() {\r\n        eosesMissing--;\r\n        if (eosesMissing === 0) {\r\n          clearTimeout(eoseTimeout);\r\n          for (let cb of eoseListeners.values())\r\n            cb();\r\n        }\r\n      }\r\n    });\r\n    let greaterSub = {\r\n      sub(filters2, opts2) {\r\n        subs.forEach((sub) => sub.sub(filters2, opts2));\r\n        return greaterSub;\r\n      },\r\n      unsub() {\r\n        subs.forEach((sub) => sub.unsub());\r\n      },\r\n      on(type, cb) {\r\n        if (type === \"event\") {\r\n          eventListeners.add(cb);\r\n        } else if (type === \"eose\") {\r\n          eoseListeners.add(cb);\r\n        }\r\n      },\r\n      off(type, cb) {\r\n        if (type === \"event\") {\r\n          eventListeners.delete(cb);\r\n        } else if (type === \"eose\")\r\n          eoseListeners.delete(cb);\r\n      },\r\n      get events() {\r\n        return eventsGenerator(greaterSub);\r\n      }\r\n    };\r\n    return greaterSub;\r\n  }\r\n  get(relays, filter, opts) {\r\n    return new Promise((resolve) => {\r\n      let sub = this.sub(relays, [filter], opts);\r\n      let timeout = setTimeout(() => {\r\n        sub.unsub();\r\n        resolve(null);\r\n      }, this.getTimeout);\r\n      sub.on(\"event\", (event) => {\r\n        resolve(event);\r\n        clearTimeout(timeout);\r\n        sub.unsub();\r\n      });\r\n    });\r\n  }\r\n  list(relays, filters, opts) {\r\n    return new Promise((resolve) => {\r\n      let events = [];\r\n      let sub = this.sub(relays, filters, opts);\r\n      sub.on(\"event\", (event) => {\r\n        events.push(event);\r\n      });\r\n      sub.on(\"eose\", () => {\r\n        sub.unsub();\r\n        resolve(events);\r\n      });\r\n    });\r\n  }\r\n  batchedList(batchKey, relays, filters) {\r\n    return new Promise((resolve) => {\r\n      if (!this.batchedByKey[batchKey]) {\r\n        this.batchedByKey[batchKey] = [\r\n          {\r\n            filters,\r\n            relays,\r\n            resolve,\r\n            events: []\r\n          }\r\n        ];\r\n        setTimeout(() => {\r\n          Object.keys(this.batchedByKey).forEach(async (batchKey2) => {\r\n            const batchedRequests = this.batchedByKey[batchKey2];\r\n            const filters2 = [];\r\n            const relays2 = [];\r\n            batchedRequests.forEach((br) => {\r\n              filters2.push(...br.filters);\r\n              relays2.push(...br.relays);\r\n            });\r\n            const sub = this.sub(relays2, [mergeFilters(...filters2)]);\r\n            sub.on(\"event\", (event) => {\r\n              batchedRequests.forEach((br) => matchFilters(br.filters, event) && br.events.push(event));\r\n            });\r\n            sub.on(\"eose\", () => {\r\n              sub.unsub();\r\n              batchedRequests.forEach((br) => br.resolve(br.events));\r\n            });\r\n            delete this.batchedByKey[batchKey2];\r\n          });\r\n        }, this.batchInterval);\r\n      } else {\r\n        this.batchedByKey[batchKey].push({\r\n          filters,\r\n          relays,\r\n          resolve,\r\n          events: []\r\n        });\r\n      }\r\n    });\r\n  }\r\n  publish(relays, event) {\r\n    return relays.map(async (relay) => {\r\n      let r = await this.ensureRelay(relay);\r\n      return r.publish(event);\r\n    });\r\n  }\r\n  seenOn(id) {\r\n    return Array.from(this._seenOn[id]?.values?.() || []);\r\n  }\r\n};\r\n\r\n// nip19.ts\r\nvar nip19_exports = {};\r\n__export(nip19_exports, {\r\n  BECH32_REGEX: () => BECH32_REGEX,\r\n  decode: () => decode,\r\n  naddrEncode: () => naddrEncode,\r\n  neventEncode: () => neventEncode,\r\n  noteEncode: () => noteEncode,\r\n  nprofileEncode: () => nprofileEncode,\r\n  npubEncode: () => npubEncode,\r\n  nrelayEncode: () => nrelayEncode,\r\n  nsecEncode: () => nsecEncode\r\n});\r\nimport { bytesToHex as bytesToHex3, concatBytes, hexToBytes } from \"@noble/hashes/utils\";\r\nimport { bech32 } from \"@scure/base\";\r\nvar Bech32MaxSize = 5e3;\r\nvar BECH32_REGEX = /[\\x21-\\x7E]{1,83}1[023456789acdefghjklmnpqrstuvwxyz]{6,}/;\r\nfunction integerToUint8Array(number) {\r\n  const uint8Array = new Uint8Array(4);\r\n  uint8Array[0] = number >> 24 & 255;\r\n  uint8Array[1] = number >> 16 & 255;\r\n  uint8Array[2] = number >> 8 & 255;\r\n  uint8Array[3] = number & 255;\r\n  return uint8Array;\r\n}\r\nfunction decode(nip19) {\r\n  let { prefix, words } = bech32.decode(nip19, Bech32MaxSize);\r\n  let data = new Uint8Array(bech32.fromWords(words));\r\n  switch (prefix) {\r\n    case \"nprofile\": {\r\n      let tlv = parseTLV(data);\r\n      if (!tlv[0]?.[0])\r\n        throw new Error(\"missing TLV 0 for nprofile\");\r\n      if (tlv[0][0].length !== 32)\r\n        throw new Error(\"TLV 0 should be 32 bytes\");\r\n      return {\r\n        type: \"nprofile\",\r\n        data: {\r\n          pubkey: bytesToHex3(tlv[0][0]),\r\n          relays: tlv[1] ? tlv[1].map((d) => utf8Decoder.decode(d)) : []\r\n        }\r\n      };\r\n    }\r\n    case \"nevent\": {\r\n      let tlv = parseTLV(data);\r\n      if (!tlv[0]?.[0])\r\n        throw new Error(\"missing TLV 0 for nevent\");\r\n      if (tlv[0][0].length !== 32)\r\n        throw new Error(\"TLV 0 should be 32 bytes\");\r\n      if (tlv[2] && tlv[2][0].length !== 32)\r\n        throw new Error(\"TLV 2 should be 32 bytes\");\r\n      if (tlv[3] && tlv[3][0].length !== 4)\r\n        throw new Error(\"TLV 3 should be 4 bytes\");\r\n      return {\r\n        type: \"nevent\",\r\n        data: {\r\n          id: bytesToHex3(tlv[0][0]),\r\n          relays: tlv[1] ? tlv[1].map((d) => utf8Decoder.decode(d)) : [],\r\n          author: tlv[2]?.[0] ? bytesToHex3(tlv[2][0]) : void 0,\r\n          kind: tlv[3]?.[0] ? parseInt(bytesToHex3(tlv[3][0]), 16) : void 0\r\n        }\r\n      };\r\n    }\r\n    case \"naddr\": {\r\n      let tlv = parseTLV(data);\r\n      if (!tlv[0]?.[0])\r\n        throw new Error(\"missing TLV 0 for naddr\");\r\n      if (!tlv[2]?.[0])\r\n        throw new Error(\"missing TLV 2 for naddr\");\r\n      if (tlv[2][0].length !== 32)\r\n        throw new Error(\"TLV 2 should be 32 bytes\");\r\n      if (!tlv[3]?.[0])\r\n        throw new Error(\"missing TLV 3 for naddr\");\r\n      if (tlv[3][0].length !== 4)\r\n        throw new Error(\"TLV 3 should be 4 bytes\");\r\n      return {\r\n        type: \"naddr\",\r\n        data: {\r\n          identifier: utf8Decoder.decode(tlv[0][0]),\r\n          pubkey: bytesToHex3(tlv[2][0]),\r\n          kind: parseInt(bytesToHex3(tlv[3][0]), 16),\r\n          relays: tlv[1] ? tlv[1].map((d) => utf8Decoder.decode(d)) : []\r\n        }\r\n      };\r\n    }\r\n    case \"nrelay\": {\r\n      let tlv = parseTLV(data);\r\n      if (!tlv[0]?.[0])\r\n        throw new Error(\"missing TLV 0 for nrelay\");\r\n      return {\r\n        type: \"nrelay\",\r\n        data: utf8Decoder.decode(tlv[0][0])\r\n      };\r\n    }\r\n    case \"nsec\":\r\n    case \"npub\":\r\n    case \"note\":\r\n      return { type: prefix, data: bytesToHex3(data) };\r\n    default:\r\n      throw new Error(`unknown prefix ${prefix}`);\r\n  }\r\n}\r\nfunction parseTLV(data) {\r\n  let result = {};\r\n  let rest = data;\r\n  while (rest.length > 0) {\r\n    let t = rest[0];\r\n    let l = rest[1];\r\n    if (!l)\r\n      throw new Error(`malformed TLV ${t}`);\r\n    let v = rest.slice(2, 2 + l);\r\n    rest = rest.slice(2 + l);\r\n    if (v.length < l)\r\n      throw new Error(`not enough data to read on TLV ${t}`);\r\n    result[t] = result[t] || [];\r\n    result[t].push(v);\r\n  }\r\n  return result;\r\n}\r\nfunction nsecEncode(hex) {\r\n  return encodeBytes(\"nsec\", hex);\r\n}\r\nfunction npubEncode(hex) {\r\n  return encodeBytes(\"npub\", hex);\r\n}\r\nfunction noteEncode(hex) {\r\n  return encodeBytes(\"note\", hex);\r\n}\r\nfunction encodeBech32(prefix, data) {\r\n  let words = bech32.toWords(data);\r\n  return bech32.encode(prefix, words, Bech32MaxSize);\r\n}\r\nfunction encodeBytes(prefix, hex) {\r\n  let data = hexToBytes(hex);\r\n  return encodeBech32(prefix, data);\r\n}\r\nfunction nprofileEncode(profile) {\r\n  let data = encodeTLV({\r\n    0: [hexToBytes(profile.pubkey)],\r\n    1: (profile.relays || []).map((url) => utf8Encoder.encode(url))\r\n  });\r\n  return encodeBech32(\"nprofile\", data);\r\n}\r\nfunction neventEncode(event) {\r\n  let kindArray;\r\n  if (event.kind != void 0) {\r\n    kindArray = integerToUint8Array(event.kind);\r\n  }\r\n  let data = encodeTLV({\r\n    0: [hexToBytes(event.id)],\r\n    1: (event.relays || []).map((url) => utf8Encoder.encode(url)),\r\n    2: event.author ? [hexToBytes(event.author)] : [],\r\n    3: kindArray ? [new Uint8Array(kindArray)] : []\r\n  });\r\n  return encodeBech32(\"nevent\", data);\r\n}\r\nfunction naddrEncode(addr) {\r\n  let kind = new ArrayBuffer(4);\r\n  new DataView(kind).setUint32(0, addr.kind, false);\r\n  let data = encodeTLV({\r\n    0: [utf8Encoder.encode(addr.identifier)],\r\n    1: (addr.relays || []).map((url) => utf8Encoder.encode(url)),\r\n    2: [hexToBytes(addr.pubkey)],\r\n    3: [new Uint8Array(kind)]\r\n  });\r\n  return encodeBech32(\"naddr\", data);\r\n}\r\nfunction nrelayEncode(url) {\r\n  let data = encodeTLV({\r\n    0: [utf8Encoder.encode(url)]\r\n  });\r\n  return encodeBech32(\"nrelay\", data);\r\n}\r\nfunction encodeTLV(tlv) {\r\n  let entries = [];\r\n  Object.entries(tlv).forEach(([t, vs]) => {\r\n    vs.forEach((v) => {\r\n      let entry = new Uint8Array(v.length + 2);\r\n      entry.set([parseInt(t)], 0);\r\n      entry.set([v.length], 1);\r\n      entry.set(v, 2);\r\n      entries.push(entry);\r\n    });\r\n  });\r\n  return concatBytes(...entries);\r\n}\r\n\r\n// references.ts\r\nvar mentionRegex = /\\bnostr:((note|npub|naddr|nevent|nprofile)1\\w+)\\b|#\\[(\\d+)\\]/g;\r\nfunction parseReferences(evt) {\r\n  let references = [];\r\n  for (let ref of evt.content.matchAll(mentionRegex)) {\r\n    if (ref[2]) {\r\n      try {\r\n        let { type, data } = decode(ref[1]);\r\n        switch (type) {\r\n          case \"npub\": {\r\n            references.push({\r\n              text: ref[0],\r\n              profile: { pubkey: data, relays: [] }\r\n            });\r\n            break;\r\n          }\r\n          case \"nprofile\": {\r\n            references.push({\r\n              text: ref[0],\r\n              profile: data\r\n            });\r\n            break;\r\n          }\r\n          case \"note\": {\r\n            references.push({\r\n              text: ref[0],\r\n              event: { id: data, relays: [] }\r\n            });\r\n            break;\r\n          }\r\n          case \"nevent\": {\r\n            references.push({\r\n              text: ref[0],\r\n              event: data\r\n            });\r\n            break;\r\n          }\r\n          case \"naddr\": {\r\n            references.push({\r\n              text: ref[0],\r\n              address: data\r\n            });\r\n            break;\r\n          }\r\n        }\r\n      } catch (err) {\r\n      }\r\n    } else if (ref[3]) {\r\n      let idx = parseInt(ref[3], 10);\r\n      let tag = evt.tags[idx];\r\n      if (!tag)\r\n        continue;\r\n      switch (tag[0]) {\r\n        case \"p\": {\r\n          references.push({\r\n            text: ref[0],\r\n            profile: { pubkey: tag[1], relays: tag[2] ? [tag[2]] : [] }\r\n          });\r\n          break;\r\n        }\r\n        case \"e\": {\r\n          references.push({\r\n            text: ref[0],\r\n            event: { id: tag[1], relays: tag[2] ? [tag[2]] : [] }\r\n          });\r\n          break;\r\n        }\r\n        case \"a\": {\r\n          try {\r\n            let [kind, pubkey, identifier] = tag[1].split(\":\");\r\n            references.push({\r\n              text: ref[0],\r\n              address: {\r\n                identifier,\r\n                pubkey,\r\n                kind: parseInt(kind, 10),\r\n                relays: tag[2] ? [tag[2]] : []\r\n              }\r\n            });\r\n          } catch (err) {\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return references;\r\n}\r\n\r\n// nip04.ts\r\nvar nip04_exports = {};\r\n__export(nip04_exports, {\r\n  decrypt: () => decrypt,\r\n  encrypt: () => encrypt\r\n});\r\nimport { randomBytes } from \"@noble/hashes/utils\";\r\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\r\nimport { base64 } from \"@scure/base\";\r\nif (typeof crypto !== \"undefined\" && !crypto.subtle && crypto.webcrypto) {\r\n  crypto.subtle = crypto.webcrypto.subtle;\r\n}\r\nasync function encrypt(privkey, pubkey, text) {\r\n  const key = secp256k1.getSharedSecret(privkey, \"02\" + pubkey);\r\n  const normalizedKey = getNormalizedX(key);\r\n  let iv = Uint8Array.from(randomBytes(16));\r\n  let plaintext = utf8Encoder.encode(text);\r\n  let cryptoKey = await crypto.subtle.importKey(\"raw\", normalizedKey, { name: \"AES-CBC\" }, false, [\"encrypt\"]);\r\n  let ciphertext = await crypto.subtle.encrypt({ name: \"AES-CBC\", iv }, cryptoKey, plaintext);\r\n  let ctb64 = base64.encode(new Uint8Array(ciphertext));\r\n  let ivb64 = base64.encode(new Uint8Array(iv.buffer));\r\n  return `${ctb64}?iv=${ivb64}`;\r\n}\r\nasync function decrypt(privkey, pubkey, data) {\r\n  let [ctb64, ivb64] = data.split(\"?iv=\");\r\n  let key = secp256k1.getSharedSecret(privkey, \"02\" + pubkey);\r\n  let normalizedKey = getNormalizedX(key);\r\n  let cryptoKey = await crypto.subtle.importKey(\"raw\", normalizedKey, { name: \"AES-CBC\" }, false, [\"decrypt\"]);\r\n  let ciphertext = base64.decode(ctb64);\r\n  let iv = base64.decode(ivb64);\r\n  let plaintext = await crypto.subtle.decrypt({ name: \"AES-CBC\", iv }, cryptoKey, ciphertext);\r\n  let text = utf8Decoder.decode(plaintext);\r\n  return text;\r\n}\r\nfunction getNormalizedX(key) {\r\n  return key.slice(1, 33);\r\n}\r\n\r\n// nip05.ts\r\nvar nip05_exports = {};\r\n__export(nip05_exports, {\r\n  NIP05_REGEX: () => NIP05_REGEX,\r\n  queryProfile: () => queryProfile,\r\n  searchDomain: () => searchDomain,\r\n  useFetchImplementation: () => useFetchImplementation\r\n});\r\nvar NIP05_REGEX = /^(?:([\\w.+-]+)@)?([\\w.-]+)$/;\r\nvar _fetch;\r\ntry {\r\n  _fetch = fetch;\r\n} catch {\r\n}\r\nfunction useFetchImplementation(fetchImplementation) {\r\n  _fetch = fetchImplementation;\r\n}\r\nasync function searchDomain(domain, query = \"\") {\r\n  try {\r\n    let res = await (await _fetch(`https://${domain}/.well-known/nostr.json?name=${query}`)).json();\r\n    return res.names;\r\n  } catch (_) {\r\n    return {};\r\n  }\r\n}\r\nasync function queryProfile(fullname) {\r\n  const match = fullname.match(NIP05_REGEX);\r\n  if (!match)\r\n    return null;\r\n  const [_, name = \"_\", domain] = match;\r\n  try {\r\n    const res = await _fetch(`https://${domain}/.well-known/nostr.json?name=${name}`);\r\n    const { names, relays } = parseNIP05Result(await res.json());\r\n    const pubkey = names[name];\r\n    return pubkey ? { pubkey, relays: relays?.[pubkey] } : null;\r\n  } catch (_e) {\r\n    return null;\r\n  }\r\n}\r\nfunction parseNIP05Result(json) {\r\n  const result = {\r\n    names: {}\r\n  };\r\n  for (const [name, pubkey] of Object.entries(json.names)) {\r\n    if (typeof name === \"string\" && typeof pubkey === \"string\") {\r\n      result.names[name] = pubkey;\r\n    }\r\n  }\r\n  if (json.relays) {\r\n    result.relays = {};\r\n    for (const [pubkey, relays] of Object.entries(json.relays)) {\r\n      if (typeof pubkey === \"string\" && Array.isArray(relays)) {\r\n        result.relays[pubkey] = relays.filter((relay) => typeof relay === \"string\");\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n// nip06.ts\r\nvar nip06_exports = {};\r\n__export(nip06_exports, {\r\n  generateSeedWords: () => generateSeedWords,\r\n  privateKeyFromSeedWords: () => privateKeyFromSeedWords,\r\n  validateWords: () => validateWords\r\n});\r\nimport { bytesToHex as bytesToHex4 } from \"@noble/hashes/utils\";\r\nimport { wordlist } from \"@scure/bip39/wordlists/english\";\r\nimport { generateMnemonic, mnemonicToSeedSync, validateMnemonic } from \"@scure/bip39\";\r\nimport { HDKey } from \"@scure/bip32\";\r\nfunction privateKeyFromSeedWords(mnemonic, passphrase) {\r\n  let root = HDKey.fromMasterSeed(mnemonicToSeedSync(mnemonic, passphrase));\r\n  let privateKey = root.derive(`m/44'/1237'/0'/0/0`).privateKey;\r\n  if (!privateKey)\r\n    throw new Error(\"could not derive private key\");\r\n  return bytesToHex4(privateKey);\r\n}\r\nfunction generateSeedWords() {\r\n  return generateMnemonic(wordlist);\r\n}\r\nfunction validateWords(words) {\r\n  return validateMnemonic(words, wordlist);\r\n}\r\n\r\n// nip10.ts\r\nvar nip10_exports = {};\r\n__export(nip10_exports, {\r\n  parse: () => parse\r\n});\r\nfunction parse(event) {\r\n  const result = {\r\n    reply: void 0,\r\n    root: void 0,\r\n    mentions: [],\r\n    profiles: []\r\n  };\r\n  const eTags = [];\r\n  for (const tag of event.tags) {\r\n    if (tag[0] === \"e\" && tag[1]) {\r\n      eTags.push(tag);\r\n    }\r\n    if (tag[0] === \"p\" && tag[1]) {\r\n      result.profiles.push({\r\n        pubkey: tag[1],\r\n        relays: tag[2] ? [tag[2]] : []\r\n      });\r\n    }\r\n  }\r\n  for (let eTagIndex = 0; eTagIndex < eTags.length; eTagIndex++) {\r\n    const eTag = eTags[eTagIndex];\r\n    const [_, eTagEventId, eTagRelayUrl, eTagMarker] = eTag;\r\n    const eventPointer = {\r\n      id: eTagEventId,\r\n      relays: eTagRelayUrl ? [eTagRelayUrl] : []\r\n    };\r\n    const isFirstETag = eTagIndex === 0;\r\n    const isLastETag = eTagIndex === eTags.length - 1;\r\n    if (eTagMarker === \"root\") {\r\n      result.root = eventPointer;\r\n      continue;\r\n    }\r\n    if (eTagMarker === \"reply\") {\r\n      result.reply = eventPointer;\r\n      continue;\r\n    }\r\n    if (eTagMarker === \"mention\") {\r\n      result.mentions.push(eventPointer);\r\n      continue;\r\n    }\r\n    if (isFirstETag) {\r\n      result.root = eventPointer;\r\n      continue;\r\n    }\r\n    if (isLastETag) {\r\n      result.reply = eventPointer;\r\n      continue;\r\n    }\r\n    result.mentions.push(eventPointer);\r\n  }\r\n  return result;\r\n}\r\n\r\n// nip13.ts\r\nvar nip13_exports = {};\r\n__export(nip13_exports, {\r\n  getPow: () => getPow,\r\n  minePow: () => minePow\r\n});\r\nfunction getPow(hex) {\r\n  let count = 0;\r\n  for (let i = 0; i < hex.length; i++) {\r\n    const nibble = parseInt(hex[i], 16);\r\n    if (nibble === 0) {\r\n      count += 4;\r\n    } else {\r\n      count += Math.clz32(nibble) - 28;\r\n      break;\r\n    }\r\n  }\r\n  return count;\r\n}\r\nfunction minePow(unsigned, difficulty) {\r\n  let count = 0;\r\n  const event = unsigned;\r\n  const tag = [\"nonce\", count.toString(), difficulty.toString()];\r\n  event.tags.push(tag);\r\n  while (true) {\r\n    const now = Math.floor(new Date().getTime() / 1e3);\r\n    if (now !== event.created_at) {\r\n      count = 0;\r\n      event.created_at = now;\r\n    }\r\n    tag[1] = (++count).toString();\r\n    event.id = getEventHash(event);\r\n    if (getPow(event.id) >= difficulty) {\r\n      break;\r\n    }\r\n  }\r\n  return event;\r\n}\r\n\r\n// nip18.ts\r\nvar nip18_exports = {};\r\n__export(nip18_exports, {\r\n  finishRepostEvent: () => finishRepostEvent,\r\n  getRepostedEvent: () => getRepostedEvent,\r\n  getRepostedEventPointer: () => getRepostedEventPointer\r\n});\r\nfunction finishRepostEvent(t, reposted, relayUrl, privateKey) {\r\n  return finishEvent(\r\n    {\r\n      kind: 6 /* Repost */,\r\n      tags: [...t.tags ?? [], [\"e\", reposted.id, relayUrl], [\"p\", reposted.pubkey]],\r\n      content: t.content === \"\" ? \"\" : JSON.stringify(reposted),\r\n      created_at: t.created_at\r\n    },\r\n    privateKey\r\n  );\r\n}\r\nfunction getRepostedEventPointer(event) {\r\n  if (event.kind !== 6 /* Repost */) {\r\n    return void 0;\r\n  }\r\n  let lastETag;\r\n  let lastPTag;\r\n  for (let i = event.tags.length - 1; i >= 0 && (lastETag === void 0 || lastPTag === void 0); i--) {\r\n    const tag = event.tags[i];\r\n    if (tag.length >= 2) {\r\n      if (tag[0] === \"e\" && lastETag === void 0) {\r\n        lastETag = tag;\r\n      } else if (tag[0] === \"p\" && lastPTag === void 0) {\r\n        lastPTag = tag;\r\n      }\r\n    }\r\n  }\r\n  if (lastETag === void 0) {\r\n    return void 0;\r\n  }\r\n  return {\r\n    id: lastETag[1],\r\n    relays: [lastETag[2], lastPTag?.[2]].filter((x) => typeof x === \"string\"),\r\n    author: lastPTag?.[1]\r\n  };\r\n}\r\nfunction getRepostedEvent(event, { skipVerification } = {}) {\r\n  const pointer = getRepostedEventPointer(event);\r\n  if (pointer === void 0 || event.content === \"\") {\r\n    return void 0;\r\n  }\r\n  let repostedEvent;\r\n  try {\r\n    repostedEvent = JSON.parse(event.content);\r\n  } catch (error) {\r\n    return void 0;\r\n  }\r\n  if (repostedEvent.id !== pointer.id) {\r\n    return void 0;\r\n  }\r\n  if (!skipVerification && !verifySignature(repostedEvent)) {\r\n    return void 0;\r\n  }\r\n  return repostedEvent;\r\n}\r\n\r\n// nip21.ts\r\nvar nip21_exports = {};\r\n__export(nip21_exports, {\r\n  NOSTR_URI_REGEX: () => NOSTR_URI_REGEX,\r\n  parse: () => parse2,\r\n  test: () => test\r\n});\r\nvar NOSTR_URI_REGEX = new RegExp(`nostr:(${BECH32_REGEX.source})`);\r\nfunction test(value) {\r\n  return typeof value === \"string\" && new RegExp(`^${NOSTR_URI_REGEX.source}$`).test(value);\r\n}\r\nfunction parse2(uri) {\r\n  const match = uri.match(new RegExp(`^${NOSTR_URI_REGEX.source}$`));\r\n  if (!match)\r\n    throw new Error(`Invalid Nostr URI: ${uri}`);\r\n  return {\r\n    uri: match[0],\r\n    value: match[1],\r\n    decoded: decode(match[1])\r\n  };\r\n}\r\n\r\n// nip25.ts\r\nvar nip25_exports = {};\r\n__export(nip25_exports, {\r\n  finishReactionEvent: () => finishReactionEvent,\r\n  getReactedEventPointer: () => getReactedEventPointer\r\n});\r\nfunction finishReactionEvent(t, reacted, privateKey) {\r\n  const inheritedTags = reacted.tags.filter((tag) => tag.length >= 2 && (tag[0] === \"e\" || tag[0] === \"p\"));\r\n  return finishEvent(\r\n    {\r\n      ...t,\r\n      kind: 7 /* Reaction */,\r\n      tags: [...t.tags ?? [], ...inheritedTags, [\"e\", reacted.id], [\"p\", reacted.pubkey]],\r\n      content: t.content ?? \"+\"\r\n    },\r\n    privateKey\r\n  );\r\n}\r\nfunction getReactedEventPointer(event) {\r\n  if (event.kind !== 7 /* Reaction */) {\r\n    return void 0;\r\n  }\r\n  let lastETag;\r\n  let lastPTag;\r\n  for (let i = event.tags.length - 1; i >= 0 && (lastETag === void 0 || lastPTag === void 0); i--) {\r\n    const tag = event.tags[i];\r\n    if (tag.length >= 2) {\r\n      if (tag[0] === \"e\" && lastETag === void 0) {\r\n        lastETag = tag;\r\n      } else if (tag[0] === \"p\" && lastPTag === void 0) {\r\n        lastPTag = tag;\r\n      }\r\n    }\r\n  }\r\n  if (lastETag === void 0 || lastPTag === void 0) {\r\n    return void 0;\r\n  }\r\n  return {\r\n    id: lastETag[1],\r\n    relays: [lastETag[2], lastPTag[2]].filter((x) => x !== void 0),\r\n    author: lastPTag[1]\r\n  };\r\n}\r\n\r\n// nip26.ts\r\nvar nip26_exports = {};\r\n__export(nip26_exports, {\r\n  createDelegation: () => createDelegation,\r\n  getDelegator: () => getDelegator\r\n});\r\nimport { schnorr as schnorr3 } from \"@noble/curves/secp256k1\";\r\nimport { bytesToHex as bytesToHex5 } from \"@noble/hashes/utils\";\r\nimport { sha256 as sha2562 } from \"@noble/hashes/sha256\";\r\nfunction createDelegation(privateKey, parameters) {\r\n  let conditions = [];\r\n  if ((parameters.kind || -1) >= 0)\r\n    conditions.push(`kind=${parameters.kind}`);\r\n  if (parameters.until)\r\n    conditions.push(`created_at<${parameters.until}`);\r\n  if (parameters.since)\r\n    conditions.push(`created_at>${parameters.since}`);\r\n  let cond = conditions.join(\"&\");\r\n  if (cond === \"\")\r\n    throw new Error(\"refusing to create a delegation without any conditions\");\r\n  let sighash = sha2562(utf8Encoder.encode(`nostr:delegation:${parameters.pubkey}:${cond}`));\r\n  let sig = bytesToHex5(schnorr3.sign(sighash, privateKey));\r\n  return {\r\n    from: getPublicKey(privateKey),\r\n    to: parameters.pubkey,\r\n    cond,\r\n    sig\r\n  };\r\n}\r\nfunction getDelegator(event) {\r\n  let tag = event.tags.find((tag2) => tag2[0] === \"delegation\" && tag2.length >= 4);\r\n  if (!tag)\r\n    return null;\r\n  let pubkey = tag[1];\r\n  let cond = tag[2];\r\n  let sig = tag[3];\r\n  let conditions = cond.split(\"&\");\r\n  for (let i = 0; i < conditions.length; i++) {\r\n    let [key, operator, value] = conditions[i].split(/\\b/);\r\n    if (key === \"kind\" && operator === \"=\" && event.kind === parseInt(value))\r\n      continue;\r\n    else if (key === \"created_at\" && operator === \"<\" && event.created_at < parseInt(value))\r\n      continue;\r\n    else if (key === \"created_at\" && operator === \">\" && event.created_at > parseInt(value))\r\n      continue;\r\n    else\r\n      return null;\r\n  }\r\n  let sighash = sha2562(utf8Encoder.encode(`nostr:delegation:${event.pubkey}:${cond}`));\r\n  if (!schnorr3.verify(sig, sighash, pubkey))\r\n    return null;\r\n  return pubkey;\r\n}\r\n\r\n// nip27.ts\r\nvar nip27_exports = {};\r\n__export(nip27_exports, {\r\n  matchAll: () => matchAll,\r\n  regex: () => regex,\r\n  replaceAll: () => replaceAll\r\n});\r\nvar regex = () => new RegExp(`\\\\b${NOSTR_URI_REGEX.source}\\\\b`, \"g\");\r\nfunction* matchAll(content) {\r\n  const matches = content.matchAll(regex());\r\n  for (const match of matches) {\r\n    try {\r\n      const [uri, value] = match;\r\n      yield {\r\n        uri,\r\n        value,\r\n        decoded: decode(value),\r\n        start: match.index,\r\n        end: match.index + uri.length\r\n      };\r\n    } catch (_e) {\r\n    }\r\n  }\r\n}\r\nfunction replaceAll(content, replacer) {\r\n  return content.replaceAll(regex(), (uri, value) => {\r\n    return replacer({\r\n      uri,\r\n      value,\r\n      decoded: decode(value)\r\n    });\r\n  });\r\n}\r\n\r\n// nip28.ts\r\nvar nip28_exports = {};\r\n__export(nip28_exports, {\r\n  channelCreateEvent: () => channelCreateEvent,\r\n  channelHideMessageEvent: () => channelHideMessageEvent,\r\n  channelMessageEvent: () => channelMessageEvent,\r\n  channelMetadataEvent: () => channelMetadataEvent,\r\n  channelMuteUserEvent: () => channelMuteUserEvent\r\n});\r\nvar channelCreateEvent = (t, privateKey) => {\r\n  let content;\r\n  if (typeof t.content === \"object\") {\r\n    content = JSON.stringify(t.content);\r\n  } else if (typeof t.content === \"string\") {\r\n    content = t.content;\r\n  } else {\r\n    return void 0;\r\n  }\r\n  return finishEvent(\r\n    {\r\n      kind: 40 /* ChannelCreation */,\r\n      tags: [...t.tags ?? []],\r\n      content,\r\n      created_at: t.created_at\r\n    },\r\n    privateKey\r\n  );\r\n};\r\nvar channelMetadataEvent = (t, privateKey) => {\r\n  let content;\r\n  if (typeof t.content === \"object\") {\r\n    content = JSON.stringify(t.content);\r\n  } else if (typeof t.content === \"string\") {\r\n    content = t.content;\r\n  } else {\r\n    return void 0;\r\n  }\r\n  return finishEvent(\r\n    {\r\n      kind: 41 /* ChannelMetadata */,\r\n      tags: [[\"e\", t.channel_create_event_id], ...t.tags ?? []],\r\n      content,\r\n      created_at: t.created_at\r\n    },\r\n    privateKey\r\n  );\r\n};\r\nvar channelMessageEvent = (t, privateKey) => {\r\n  const tags = [[\"e\", t.channel_create_event_id, t.relay_url, \"root\"]];\r\n  if (t.reply_to_channel_message_event_id) {\r\n    tags.push([\"e\", t.reply_to_channel_message_event_id, t.relay_url, \"reply\"]);\r\n  }\r\n  return finishEvent(\r\n    {\r\n      kind: 42 /* ChannelMessage */,\r\n      tags: [...tags, ...t.tags ?? []],\r\n      content: t.content,\r\n      created_at: t.created_at\r\n    },\r\n    privateKey\r\n  );\r\n};\r\nvar channelHideMessageEvent = (t, privateKey) => {\r\n  let content;\r\n  if (typeof t.content === \"object\") {\r\n    content = JSON.stringify(t.content);\r\n  } else if (typeof t.content === \"string\") {\r\n    content = t.content;\r\n  } else {\r\n    return void 0;\r\n  }\r\n  return finishEvent(\r\n    {\r\n      kind: 43 /* ChannelHideMessage */,\r\n      tags: [[\"e\", t.channel_message_event_id], ...t.tags ?? []],\r\n      content,\r\n      created_at: t.created_at\r\n    },\r\n    privateKey\r\n  );\r\n};\r\nvar channelMuteUserEvent = (t, privateKey) => {\r\n  let content;\r\n  if (typeof t.content === \"object\") {\r\n    content = JSON.stringify(t.content);\r\n  } else if (typeof t.content === \"string\") {\r\n    content = t.content;\r\n  } else {\r\n    return void 0;\r\n  }\r\n  return finishEvent(\r\n    {\r\n      kind: 44 /* ChannelMuteUser */,\r\n      tags: [[\"p\", t.pubkey_to_mute], ...t.tags ?? []],\r\n      content,\r\n      created_at: t.created_at\r\n    },\r\n    privateKey\r\n  );\r\n};\r\n\r\n// nip39.ts\r\nvar nip39_exports = {};\r\n__export(nip39_exports, {\r\n  useFetchImplementation: () => useFetchImplementation2,\r\n  validateGithub: () => validateGithub\r\n});\r\nvar _fetch2;\r\ntry {\r\n  _fetch2 = fetch;\r\n} catch {\r\n}\r\nfunction useFetchImplementation2(fetchImplementation) {\r\n  _fetch2 = fetchImplementation;\r\n}\r\nasync function validateGithub(pubkey, username, proof) {\r\n  try {\r\n    let res = await (await _fetch2(`https://gist.github.com/${username}/${proof}/raw`)).text();\r\n    return res === `Verifying that I control the following Nostr public key: ${pubkey}`;\r\n  } catch (_) {\r\n    return false;\r\n  }\r\n}\r\n\r\n// nip42.ts\r\nvar nip42_exports = {};\r\n__export(nip42_exports, {\r\n  authenticate: () => authenticate\r\n});\r\nvar authenticate = async ({\r\n  challenge,\r\n  relay,\r\n  sign\r\n}) => {\r\n  const e = {\r\n    kind: 22242 /* ClientAuth */,\r\n    created_at: Math.floor(Date.now() / 1e3),\r\n    tags: [\r\n      [\"relay\", relay.url],\r\n      [\"challenge\", challenge]\r\n    ],\r\n    content: \"\"\r\n  };\r\n  return relay.auth(await sign(e));\r\n};\r\n\r\n// nip44.ts\r\nvar nip44_exports = {};\r\n__export(nip44_exports, {\r\n  decrypt: () => decrypt2,\r\n  encrypt: () => encrypt2,\r\n  utils: () => utils\r\n});\r\nimport { chacha20 } from \"@noble/ciphers/chacha\";\r\nimport { ensureBytes, equalBytes } from \"@noble/ciphers/utils\";\r\nimport { secp256k1 as secp256k12 } from \"@noble/curves/secp256k1\";\r\nimport { hkdf } from \"@noble/hashes/hkdf\";\r\nimport { hmac } from \"@noble/hashes/hmac\";\r\nimport { sha256 as sha2563 } from \"@noble/hashes/sha256\";\r\nimport { concatBytes as concatBytes2, randomBytes as randomBytes2 } from \"@noble/hashes/utils\";\r\nimport { base64 as base642 } from \"@scure/base\";\r\nvar utils = {\r\n  v2: {\r\n    maxPlaintextSize: 65536 - 128,\r\n    minCiphertextSize: 100,\r\n    maxCiphertextSize: 102400,\r\n    getConversationKey(privkeyA, pubkeyB) {\r\n      const key = secp256k12.getSharedSecret(privkeyA, \"02\" + pubkeyB);\r\n      return key.subarray(1, 33);\r\n    },\r\n    getMessageKeys(conversationKey, salt) {\r\n      const keys = hkdf(sha2563, conversationKey, salt, \"nip44-v2\", 76);\r\n      return {\r\n        encryption: keys.subarray(0, 32),\r\n        nonce: keys.subarray(32, 44),\r\n        auth: keys.subarray(44, 76)\r\n      };\r\n    },\r\n    calcPadding(len) {\r\n      if (!Number.isSafeInteger(len) || len < 0)\r\n        throw new Error(\"expected positive integer\");\r\n      if (len <= 32)\r\n        return 32;\r\n      const nextpower = 1 << Math.floor(Math.log2(len - 1)) + 1;\r\n      const chunk = nextpower <= 256 ? 32 : nextpower / 8;\r\n      return chunk * (Math.floor((len - 1) / chunk) + 1);\r\n    },\r\n    pad(unpadded) {\r\n      const unpaddedB = utf8Encoder.encode(unpadded);\r\n      const len = unpaddedB.length;\r\n      if (len < 1 || len >= utils.v2.maxPlaintextSize)\r\n        throw new Error(\"invalid plaintext length: must be between 1b and 64KB\");\r\n      const paddedLen = utils.v2.calcPadding(len);\r\n      const zeros = new Uint8Array(paddedLen - len);\r\n      const lenBuf = new Uint8Array(2);\r\n      new DataView(lenBuf.buffer).setUint16(0, len);\r\n      return concatBytes2(lenBuf, unpaddedB, zeros);\r\n    },\r\n    unpad(padded) {\r\n      const unpaddedLen = new DataView(padded.buffer).getUint16(0);\r\n      const unpadded = padded.subarray(2, 2 + unpaddedLen);\r\n      if (unpaddedLen === 0 || unpadded.length !== unpaddedLen || padded.length !== 2 + utils.v2.calcPadding(unpaddedLen))\r\n        throw new Error(\"invalid padding\");\r\n      return utf8Decoder.decode(unpadded);\r\n    }\r\n  }\r\n};\r\nfunction encrypt2(key, plaintext, options = {}) {\r\n  const version = options.version ?? 2;\r\n  if (version !== 2)\r\n    throw new Error(\"unknown encryption version \" + version);\r\n  const salt = options.salt ?? randomBytes2(32);\r\n  ensureBytes(salt, 32);\r\n  const keys = utils.v2.getMessageKeys(key, salt);\r\n  const padded = utils.v2.pad(plaintext);\r\n  const ciphertext = chacha20(keys.encryption, keys.nonce, padded);\r\n  const mac = hmac(sha2563, keys.auth, ciphertext);\r\n  return base642.encode(concatBytes2(new Uint8Array([version]), salt, ciphertext, mac));\r\n}\r\nfunction decrypt2(key, ciphertext) {\r\n  const u = utils.v2;\r\n  ensureBytes(key, 32);\r\n  const clen = ciphertext.length;\r\n  if (clen < u.minCiphertextSize || clen >= u.maxCiphertextSize)\r\n    throw new Error(\"invalid ciphertext length: \" + clen);\r\n  if (ciphertext[0] === \"#\")\r\n    throw new Error(\"unknown encryption version\");\r\n  let data;\r\n  try {\r\n    data = base642.decode(ciphertext);\r\n  } catch (error) {\r\n    throw new Error(\"invalid base64: \" + error.message);\r\n  }\r\n  const vers = data.subarray(0, 1)[0];\r\n  if (vers !== 2)\r\n    throw new Error(\"unknown encryption version \" + vers);\r\n  const salt = data.subarray(1, 33);\r\n  const ciphertext_ = data.subarray(33, -32);\r\n  const mac = data.subarray(-32);\r\n  const keys = u.getMessageKeys(key, salt);\r\n  const calculatedMac = hmac(sha2563, keys.auth, ciphertext_);\r\n  if (!equalBytes(calculatedMac, mac))\r\n    throw new Error(\"invalid MAC\");\r\n  const padded = chacha20(keys.encryption, keys.nonce, ciphertext_);\r\n  return u.unpad(padded);\r\n}\r\n\r\n// nip47.ts\r\nvar nip47_exports = {};\r\n__export(nip47_exports, {\r\n  makeNwcRequestEvent: () => makeNwcRequestEvent,\r\n  parseConnectionString: () => parseConnectionString\r\n});\r\nfunction parseConnectionString(connectionString) {\r\n  const { pathname, searchParams } = new URL(connectionString);\r\n  const pubkey = pathname;\r\n  const relay = searchParams.get(\"relay\");\r\n  const secret = searchParams.get(\"secret\");\r\n  if (!pubkey || !relay || !secret) {\r\n    throw new Error(\"invalid connection string\");\r\n  }\r\n  return { pubkey, relay, secret };\r\n}\r\nasync function makeNwcRequestEvent({\r\n  pubkey,\r\n  secret,\r\n  invoice\r\n}) {\r\n  const content = {\r\n    method: \"pay_invoice\",\r\n    params: {\r\n      invoice\r\n    }\r\n  };\r\n  const encryptedContent = await encrypt(secret, pubkey, JSON.stringify(content));\r\n  const eventTemplate = {\r\n    kind: 23194 /* NwcRequest */,\r\n    created_at: Math.round(Date.now() / 1e3),\r\n    content: encryptedContent,\r\n    tags: [[\"p\", pubkey]]\r\n  };\r\n  return finishEvent(eventTemplate, secret);\r\n}\r\n\r\n// nip57.ts\r\nvar nip57_exports = {};\r\n__export(nip57_exports, {\r\n  getZapEndpoint: () => getZapEndpoint,\r\n  makeZapReceipt: () => makeZapReceipt,\r\n  makeZapRequest: () => makeZapRequest,\r\n  useFetchImplementation: () => useFetchImplementation3,\r\n  validateZapRequest: () => validateZapRequest\r\n});\r\nimport { bech32 as bech322 } from \"@scure/base\";\r\nvar _fetch3;\r\ntry {\r\n  _fetch3 = fetch;\r\n} catch {\r\n}\r\nfunction useFetchImplementation3(fetchImplementation) {\r\n  _fetch3 = fetchImplementation;\r\n}\r\nasync function getZapEndpoint(metadata) {\r\n  try {\r\n    let lnurl = \"\";\r\n    let { lud06, lud16 } = JSON.parse(metadata.content);\r\n    if (lud06) {\r\n      let { words } = bech322.decode(lud06, 1e3);\r\n      let data = bech322.fromWords(words);\r\n      lnurl = utf8Decoder.decode(data);\r\n    } else if (lud16) {\r\n      let [name, domain] = lud16.split(\"@\");\r\n      lnurl = `https://${domain}/.well-known/lnurlp/${name}`;\r\n    } else {\r\n      return null;\r\n    }\r\n    let res = await _fetch3(lnurl);\r\n    let body = await res.json();\r\n    if (body.allowsNostr && body.nostrPubkey) {\r\n      return body.callback;\r\n    }\r\n  } catch (err) {\r\n  }\r\n  return null;\r\n}\r\nfunction makeZapRequest({\r\n  profile,\r\n  event,\r\n  amount,\r\n  relays,\r\n  comment = \"\"\r\n}) {\r\n  if (!amount)\r\n    throw new Error(\"amount not given\");\r\n  if (!profile)\r\n    throw new Error(\"profile not given\");\r\n  let zr = {\r\n    kind: 9734,\r\n    created_at: Math.round(Date.now() / 1e3),\r\n    content: comment,\r\n    tags: [\r\n      [\"p\", profile],\r\n      [\"amount\", amount.toString()],\r\n      [\"relays\", ...relays]\r\n    ]\r\n  };\r\n  if (event) {\r\n    zr.tags.push([\"e\", event]);\r\n  }\r\n  return zr;\r\n}\r\nfunction validateZapRequest(zapRequestString) {\r\n  let zapRequest;\r\n  try {\r\n    zapRequest = JSON.parse(zapRequestString);\r\n  } catch (err) {\r\n    return \"Invalid zap request JSON.\";\r\n  }\r\n  if (!validateEvent(zapRequest))\r\n    return \"Zap request is not a valid Nostr event.\";\r\n  if (!verifySignature(zapRequest))\r\n    return \"Invalid signature on zap request.\";\r\n  let p = zapRequest.tags.find(([t, v]) => t === \"p\" && v);\r\n  if (!p)\r\n    return \"Zap request doesn't have a 'p' tag.\";\r\n  if (!p[1].match(/^[a-f0-9]{64}$/))\r\n    return \"Zap request 'p' tag is not valid hex.\";\r\n  let e = zapRequest.tags.find(([t, v]) => t === \"e\" && v);\r\n  if (e && !e[1].match(/^[a-f0-9]{64}$/))\r\n    return \"Zap request 'e' tag is not valid hex.\";\r\n  let relays = zapRequest.tags.find(([t, v]) => t === \"relays\" && v);\r\n  if (!relays)\r\n    return \"Zap request doesn't have a 'relays' tag.\";\r\n  return null;\r\n}\r\nfunction makeZapReceipt({\r\n  zapRequest,\r\n  preimage,\r\n  bolt11,\r\n  paidAt\r\n}) {\r\n  let zr = JSON.parse(zapRequest);\r\n  let tagsFromZapRequest = zr.tags.filter(([t]) => t === \"e\" || t === \"p\" || t === \"a\");\r\n  let zap = {\r\n    kind: 9735,\r\n    created_at: Math.round(paidAt.getTime() / 1e3),\r\n    content: \"\",\r\n    tags: [...tagsFromZapRequest, [\"bolt11\", bolt11], [\"description\", zapRequest]]\r\n  };\r\n  if (preimage) {\r\n    zap.tags.push([\"preimage\", preimage]);\r\n  }\r\n  return zap;\r\n}\r\n\r\n// nip98.ts\r\nvar nip98_exports = {};\r\n__export(nip98_exports, {\r\n  getToken: () => getToken,\r\n  unpackEventFromToken: () => unpackEventFromToken,\r\n  validateEvent: () => validateEvent2,\r\n  validateToken: () => validateToken\r\n});\r\nimport { base64 as base643 } from \"@scure/base\";\r\nvar _authorizationScheme = \"Nostr \";\r\nasync function getToken(loginUrl, httpMethod, sign, includeAuthorizationScheme = false) {\r\n  if (!loginUrl || !httpMethod)\r\n    throw new Error(\"Missing loginUrl or httpMethod\");\r\n  const event = getBlankEvent(27235 /* HttpAuth */);\r\n  event.tags = [\r\n    [\"u\", loginUrl],\r\n    [\"method\", httpMethod]\r\n  ];\r\n  event.created_at = Math.round(new Date().getTime() / 1e3);\r\n  const signedEvent = await sign(event);\r\n  const authorizationScheme = includeAuthorizationScheme ? _authorizationScheme : \"\";\r\n  return authorizationScheme + base643.encode(utf8Encoder.encode(JSON.stringify(signedEvent)));\r\n}\r\nasync function validateToken(token, url, method) {\r\n  const event = await unpackEventFromToken(token).catch((error) => {\r\n    throw error;\r\n  });\r\n  const valid = await validateEvent2(event, url, method).catch((error) => {\r\n    throw error;\r\n  });\r\n  return valid;\r\n}\r\nasync function unpackEventFromToken(token) {\r\n  if (!token) {\r\n    throw new Error(\"Missing token\");\r\n  }\r\n  token = token.replace(_authorizationScheme, \"\");\r\n  const eventB64 = utf8Decoder.decode(base643.decode(token));\r\n  if (!eventB64 || eventB64.length === 0 || !eventB64.startsWith(\"{\")) {\r\n    throw new Error(\"Invalid token\");\r\n  }\r\n  const event = JSON.parse(eventB64);\r\n  return event;\r\n}\r\nasync function validateEvent2(event, url, method) {\r\n  if (!event) {\r\n    throw new Error(\"Invalid nostr event\");\r\n  }\r\n  if (!verifySignature(event)) {\r\n    throw new Error(\"Invalid nostr event, signature invalid\");\r\n  }\r\n  if (event.kind !== 27235 /* HttpAuth */) {\r\n    throw new Error(\"Invalid nostr event, kind invalid\");\r\n  }\r\n  if (!event.created_at) {\r\n    throw new Error(\"Invalid nostr event, created_at invalid\");\r\n  }\r\n  if (Math.round(new Date().getTime() / 1e3) - event.created_at > 60) {\r\n    throw new Error(\"Invalid nostr event, expired\");\r\n  }\r\n  const urlTag = event.tags.find((t) => t[0] === \"u\");\r\n  if (urlTag?.length !== 1 && urlTag?.[1] !== url) {\r\n    throw new Error(\"Invalid nostr event, url tag invalid\");\r\n  }\r\n  const methodTag = event.tags.find((t) => t[0] === \"method\");\r\n  if (methodTag?.length !== 1 && methodTag?.[1].toLowerCase() !== method.toLowerCase()) {\r\n    throw new Error(\"Invalid nostr event, method tag invalid\");\r\n  }\r\n  return true;\r\n}\r\nexport {\r\n  Kind,\r\n  SimplePool,\r\n  eventsGenerator,\r\n  finishEvent,\r\n  fakejson_exports as fj,\r\n  generatePrivateKey,\r\n  getBlankEvent,\r\n  getEventHash,\r\n  getPublicKey,\r\n  getSignature,\r\n  matchFilter,\r\n  matchFilters,\r\n  mergeFilters,\r\n  nip04_exports as nip04,\r\n  nip05_exports as nip05,\r\n  nip06_exports as nip06,\r\n  nip10_exports as nip10,\r\n  nip13_exports as nip13,\r\n  nip18_exports as nip18,\r\n  nip19_exports as nip19,\r\n  nip21_exports as nip21,\r\n  nip25_exports as nip25,\r\n  nip26_exports as nip26,\r\n  nip27_exports as nip27,\r\n  nip28_exports as nip28,\r\n  nip39_exports as nip39,\r\n  nip42_exports as nip42,\r\n  nip44_exports as nip44,\r\n  nip47_exports as nip47,\r\n  nip57_exports as nip57,\r\n  nip98_exports as nip98,\r\n  parseReferences,\r\n  relayInit,\r\n  serializeEvent,\r\n  signEvent,\r\n  utils_exports as utils,\r\n  validateEvent,\r\n  verifiedSymbol,\r\n  verifySignature\r\n};\r\n", "// src/user/index.ts\r\nimport { nip19 as nip194 } from \"nostr-tools\";\r\n\r\n// src/events/index.ts\r\nimport { EventEmitter as EventEmitter4 } from \"tseep\";\r\n\r\n// src/outbox/relay-ranking.ts\r\nfunction getTopRelaysForAuthors(ndk, authors) {\r\n  const relaysWithCount = /* @__PURE__ */ new Map();\r\n  authors.forEach((author) => {\r\n    const writeRelays = getWriteRelaysFor(ndk, author);\r\n    if (writeRelays) {\r\n      writeRelays.forEach((relay) => {\r\n        const count = relaysWithCount.get(relay) || 0;\r\n        relaysWithCount.set(relay, count + 1);\r\n      });\r\n    }\r\n  });\r\n  let sortedRelays = Array.from(relaysWithCount.entries()).sort((a, b) => b[1] - a[1]);\r\n  return sortedRelays.map((entry) => entry[0]);\r\n}\r\n\r\n// src/outbox/read/with-authors.ts\r\nfunction getWriteRelaysFor(ndk, author) {\r\n  if (!ndk.outboxTracker)\r\n    return void 0;\r\n  return ndk.outboxTracker.data.get(author)?.writeRelays;\r\n}\r\nfunction getAllRelaysForAllPubkeys(ndk, pubkeys) {\r\n  const pubkeysToRelays = /* @__PURE__ */ new Map();\r\n  const authorsMissingRelays = /* @__PURE__ */ new Set();\r\n  pubkeys.forEach((author) => {\r\n    const writeRelays = getWriteRelaysFor(ndk, author);\r\n    if (writeRelays && writeRelays.size > 0) {\r\n      writeRelays.forEach((relay) => {\r\n        const pubkeysInRelay = pubkeysToRelays.get(relay) || /* @__PURE__ */ new Set();\r\n        pubkeysInRelay.add(author);\r\n        pubkeysToRelays.set(relay, pubkeysInRelay);\r\n      });\r\n      pubkeysToRelays.set(author, writeRelays);\r\n    } else {\r\n      authorsMissingRelays.add(author);\r\n    }\r\n  });\r\n  return { pubkeysToRelays, authorsMissingRelays };\r\n}\r\nfunction getRelaysForFilterWithAuthors(ndk, authors, pool, relayGoalPerAuthor = 2) {\r\n  const relayToAuthorsMap = /* @__PURE__ */ new Map();\r\n  const { pubkeysToRelays, authorsMissingRelays } = getAllRelaysForAllPubkeys(ndk, authors);\r\n  const sortedRelays = getTopRelaysForAuthors(ndk, authors);\r\n  const addAuthorToRelay = (author, relay) => {\r\n    const authorsInRelay = relayToAuthorsMap.get(relay) || [];\r\n    authorsInRelay.push(author);\r\n    relayToAuthorsMap.set(relay, authorsInRelay);\r\n  };\r\n  for (const [author, authorRelays] of pubkeysToRelays.entries()) {\r\n    let missingRelaysForThisAuthor = relayGoalPerAuthor;\r\n    const connectedRelays = pool.connectedRelays();\r\n    for (const relay of connectedRelays) {\r\n      if (authorRelays.has(relay.url)) {\r\n        addAuthorToRelay(author, relay.url);\r\n        missingRelaysForThisAuthor--;\r\n      }\r\n    }\r\n    for (const authorRelay of authorRelays) {\r\n      if (relayToAuthorsMap.has(authorRelay)) {\r\n        addAuthorToRelay(author, authorRelay);\r\n        missingRelaysForThisAuthor--;\r\n      }\r\n    }\r\n    if (missingRelaysForThisAuthor <= 0)\r\n      continue;\r\n    for (const relay of sortedRelays) {\r\n      if (missingRelaysForThisAuthor <= 0)\r\n        break;\r\n      if (authorRelays.has(relay)) {\r\n        addAuthorToRelay(author, relay);\r\n        missingRelaysForThisAuthor--;\r\n      }\r\n    }\r\n  }\r\n  for (const author of authorsMissingRelays) {\r\n    pool.permanentAndConnectedRelays().forEach((relay) => {\r\n      const authorsInRelay = relayToAuthorsMap.get(relay.url) || [];\r\n      authorsInRelay.push(author);\r\n      relayToAuthorsMap.set(relay.url, authorsInRelay);\r\n    });\r\n  }\r\n  return relayToAuthorsMap;\r\n}\r\n\r\n// src/relay/index.ts\r\nimport debug from \"debug\";\r\nimport { EventEmitter as EventEmitter2 } from \"tseep\";\r\n\r\n// src/relay/connectivity.ts\r\nimport { relayInit } from \"nostr-tools\";\r\n\r\n// src/utils/timeout.ts\r\nasync function runWithTimeout(fn, timeoutMs, timeoutMessage) {\r\n  if (!timeoutMs)\r\n    return fn();\r\n  return new Promise((resolve, reject) => {\r\n    const timeout = setTimeout(() => {\r\n      reject(new Error(timeoutMessage || `Timed out after ${timeoutMs}ms`));\r\n    }, timeoutMs);\r\n    fn().then(resolve, reject).finally(() => clearTimeout(timeout));\r\n  });\r\n}\r\n\r\n// src/relay/connectivity.ts\r\nvar MAX_RECONNECT_ATTEMPTS = 5;\r\nvar NDKRelayConnectivity = class {\r\n  ndkRelay;\r\n  _status;\r\n  relay;\r\n  timeoutMs;\r\n  connectedAt;\r\n  _connectionStats = {\r\n    attempts: 0,\r\n    success: 0,\r\n    durations: []\r\n  };\r\n  debug;\r\n  reconnectTimeout;\r\n  constructor(ndkRelay) {\r\n    this.ndkRelay = ndkRelay;\r\n    this._status = 3 /* DISCONNECTED */;\r\n    this.relay = relayInit(this.ndkRelay.url);\r\n    this.debug = this.ndkRelay.debug.extend(\"connectivity\");\r\n    this.relay.on(\"notice\", (notice) => this.handleNotice(notice));\r\n  }\r\n  async connect(timeoutMs, reconnect = true) {\r\n    if (this.reconnectTimeout) {\r\n      clearTimeout(this.reconnectTimeout);\r\n      this.reconnectTimeout = void 0;\r\n    }\r\n    timeoutMs ??= this.timeoutMs;\r\n    if (!this.timeoutMs && timeoutMs)\r\n      this.timeoutMs = timeoutMs;\r\n    const connectHandler = () => {\r\n      this.updateConnectionStats.connected();\r\n      this._status = 1 /* CONNECTED */;\r\n      this.ndkRelay.emit(\"connect\");\r\n      this.ndkRelay.emit(\"ready\");\r\n    };\r\n    const disconnectHandler = () => {\r\n      this.updateConnectionStats.disconnected();\r\n      if (this._status === 1 /* CONNECTED */) {\r\n        this._status = 3 /* DISCONNECTED */;\r\n        this.handleReconnection();\r\n      }\r\n      this.ndkRelay.emit(\"disconnect\");\r\n    };\r\n    const authHandler = async (challenge) => {\r\n      this.debug(\"Relay requested authentication\", {\r\n        havePolicy: !!this.ndkRelay.authPolicy\r\n      });\r\n      if (this.ndkRelay.authPolicy) {\r\n        if (this._status !== 7 /* AUTHENTICATING */) {\r\n          this._status = 7 /* AUTHENTICATING */;\r\n          await this.ndkRelay.authPolicy(this.ndkRelay, challenge);\r\n          if (this._status === 7 /* AUTHENTICATING */) {\r\n            this.debug(\"Authentication policy finished\");\r\n            this._status = 1 /* CONNECTED */;\r\n            this.ndkRelay.emit(\"authed\");\r\n          }\r\n        }\r\n      } else {\r\n        await this.ndkRelay.emit(\"auth\", challenge);\r\n      }\r\n    };\r\n    try {\r\n      this.updateConnectionStats.attempt();\r\n      if (this._status === 3 /* DISCONNECTED */)\r\n        this._status = 0 /* CONNECTING */;\r\n      else\r\n        this._status = 4 /* RECONNECTING */;\r\n      this.relay.off(\"connect\", connectHandler);\r\n      this.relay.off(\"disconnect\", disconnectHandler);\r\n      this.relay.on(\"connect\", connectHandler);\r\n      this.relay.on(\"disconnect\", disconnectHandler);\r\n      this.relay.on(\"auth\", authHandler);\r\n      await runWithTimeout(this.relay.connect, timeoutMs, \"Timed out while connecting\");\r\n    } catch (e) {\r\n      this._status = 3 /* DISCONNECTED */;\r\n      if (reconnect)\r\n        this.handleReconnection();\r\n      else\r\n        this.ndkRelay.emit(\"delayed-connect\", 2 * 24 * 60 * 60 * 1e3);\r\n      throw e;\r\n    }\r\n  }\r\n  disconnect() {\r\n    this._status = 2 /* DISCONNECTING */;\r\n    this.relay.close();\r\n  }\r\n  get status() {\r\n    return this._status;\r\n  }\r\n  isAvailable() {\r\n    return this._status === 1 /* CONNECTED */;\r\n  }\r\n  /**\r\n   * Evaluates the connection stats to determine if the relay is flapping.\r\n   */\r\n  isFlapping() {\r\n    const durations = this._connectionStats.durations;\r\n    if (durations.length % 3 !== 0)\r\n      return false;\r\n    const sum = durations.reduce((a, b) => a + b, 0);\r\n    const avg = sum / durations.length;\r\n    const variance = durations.map((x) => Math.pow(x - avg, 2)).reduce((a, b) => a + b, 0) / durations.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    const isFlapping = stdDev < 1e3;\r\n    return isFlapping;\r\n  }\r\n  async handleNotice(notice) {\r\n    if (notice.includes(\"oo many\") || notice.includes(\"aximum\")) {\r\n      this.disconnect();\r\n      setTimeout(() => this.connect(), 2e3);\r\n      this.debug(this.relay.url, \"Relay complaining?\", notice);\r\n    }\r\n    this.ndkRelay.emit(\"notice\", notice);\r\n  }\r\n  /**\r\n   * Called when the relay is unexpectedly disconnected.\r\n   */\r\n  handleReconnection(attempt = 0) {\r\n    if (this.reconnectTimeout)\r\n      return;\r\n    this.debug(\"Attempting to reconnect\", { attempt });\r\n    if (this.isFlapping()) {\r\n      this.ndkRelay.emit(\"flapping\", this._connectionStats);\r\n      this._status = 5 /* FLAPPING */;\r\n      return;\r\n    }\r\n    const reconnectDelay = this.connectedAt ? Math.max(0, 6e4 - (Date.now() - this.connectedAt)) : 5e3 * (this._connectionStats.attempts + 1);\r\n    this.reconnectTimeout = setTimeout(() => {\r\n      this.reconnectTimeout = void 0;\r\n      this._status = 4 /* RECONNECTING */;\r\n      this.connect().then(() => {\r\n        this.debug(\"Reconnected\");\r\n      }).catch((err) => {\r\n        if (attempt < MAX_RECONNECT_ATTEMPTS) {\r\n          setTimeout(() => {\r\n            this.handleReconnection(attempt + 1);\r\n          }, 1e3 * (attempt + 1) ^ 4);\r\n        } else {\r\n          this.debug(\"Reconnect failed\");\r\n        }\r\n      });\r\n    }, reconnectDelay);\r\n    this.ndkRelay.emit(\"delayed-connect\", reconnectDelay);\r\n    this.debug(\"Reconnecting in\", reconnectDelay);\r\n    this._connectionStats.nextReconnectAt = Date.now() + reconnectDelay;\r\n  }\r\n  /**\r\n   * Utility functions to update the connection stats.\r\n   */\r\n  updateConnectionStats = {\r\n    connected: () => {\r\n      this._connectionStats.success++;\r\n      this._connectionStats.connectedAt = Date.now();\r\n    },\r\n    disconnected: () => {\r\n      if (this._connectionStats.connectedAt) {\r\n        this._connectionStats.durations.push(\r\n          Date.now() - this._connectionStats.connectedAt\r\n        );\r\n        if (this._connectionStats.durations.length > 100) {\r\n          this._connectionStats.durations.shift();\r\n        }\r\n      }\r\n      this._connectionStats.connectedAt = void 0;\r\n    },\r\n    attempt: () => {\r\n      this._connectionStats.attempts++;\r\n    }\r\n  };\r\n  /**\r\n   * Returns the connection stats.\r\n   */\r\n  get connectionStats() {\r\n    return this._connectionStats;\r\n  }\r\n};\r\n\r\n// src/relay/publisher.ts\r\nvar NDKRelayPublisher = class {\r\n  ndkRelay;\r\n  constructor(ndkRelay) {\r\n    this.ndkRelay = ndkRelay;\r\n  }\r\n  /**\r\n   * Published an event to the relay; if the relay is not connected, it will\r\n   * wait for the relay to connect before publishing the event.\r\n   *\r\n   * If the relay does not connect within the timeout, the publish operation\r\n   * will fail.\r\n   * @param event  The event to publish\r\n   * @param timeoutMs  The timeout for the publish operation in milliseconds\r\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\r\n   */\r\n  async publish(event, timeoutMs = 2500) {\r\n    const publishWhenConnected = () => {\r\n      return new Promise((resolve, reject) => {\r\n        try {\r\n          this.publishEvent(event, timeoutMs).then((result) => resolve(result)).catch((err) => reject(err));\r\n        } catch (err) {\r\n          reject(err);\r\n        }\r\n      });\r\n    };\r\n    const timeoutPromise = new Promise((_, reject) => {\r\n      setTimeout(() => reject(new Error(\"Timeout\")), timeoutMs);\r\n    });\r\n    const onConnectHandler = () => {\r\n      publishWhenConnected().then((result) => connectResolve(result)).catch((err) => connectReject(err));\r\n    };\r\n    let connectResolve;\r\n    let connectReject;\r\n    if (this.ndkRelay.status === 1 /* CONNECTED */) {\r\n      return Promise.race([publishWhenConnected(), timeoutPromise]);\r\n    } else {\r\n      return Promise.race([\r\n        new Promise((resolve, reject) => {\r\n          connectResolve = resolve;\r\n          connectReject = reject;\r\n          this.ndkRelay.once(\"connect\", onConnectHandler);\r\n        }),\r\n        timeoutPromise\r\n      ]).finally(() => {\r\n        this.ndkRelay.removeListener(\"connect\", onConnectHandler);\r\n      });\r\n    }\r\n  }\r\n  async publishEvent(event, timeoutMs) {\r\n    const nostrEvent = await event.toNostrEvent();\r\n    const publish = this.ndkRelay.connectivity.relay.publish(nostrEvent);\r\n    let publishTimeout;\r\n    const publishPromise = new Promise((resolve, reject) => {\r\n      publish.then(() => {\r\n        clearTimeout(publishTimeout);\r\n        this.ndkRelay.emit(\"published\", event);\r\n        resolve(true);\r\n      }).catch((err) => {\r\n        clearTimeout(publishTimeout);\r\n        this.ndkRelay.debug(\"Publish failed\", err, event.id);\r\n        this.ndkRelay.emit(\"publish:failed\", event, err);\r\n        reject(err);\r\n      });\r\n    });\r\n    if (!timeoutMs || event.isEphemeral()) {\r\n      return publishPromise;\r\n    }\r\n    const timeoutPromise = new Promise((_, reject) => {\r\n      publishTimeout = setTimeout(() => {\r\n        this.ndkRelay.debug(\"Publish timed out\", event.rawEvent());\r\n        this.ndkRelay.emit(\"publish:failed\", event, \"Timeout\");\r\n        reject(new Error(\"Publish operation timed out\"));\r\n      }, timeoutMs);\r\n    });\r\n    return Promise.race([publishPromise, timeoutPromise]);\r\n  }\r\n  async auth(event) {\r\n    return this.ndkRelay.connectivity.relay.auth(event.rawEvent());\r\n  }\r\n};\r\n\r\n// src/relay/subscriptions.ts\r\nimport { EventEmitter } from \"tseep\";\r\nimport { matchFilter } from \"nostr-tools\";\r\n\r\n// src/subscription/grouping.ts\r\nfunction calculateGroupableId(filters, closeOnEose) {\r\n  const elements = [];\r\n  for (const filter of filters) {\r\n    const hasTimeConstraints = filter.since || filter.until;\r\n    if (hasTimeConstraints)\r\n      return null;\r\n    const keys = Object.keys(filter || {}).sort().join(\"-\");\r\n    elements.push(keys);\r\n  }\r\n  let id = closeOnEose ? \"+\" : \"\";\r\n  id += elements.join(\"|\");\r\n  return id;\r\n}\r\nfunction mergeFilters(filters) {\r\n  const result = {};\r\n  filters.forEach((filter) => {\r\n    Object.entries(filter).forEach(([key, value]) => {\r\n      if (Array.isArray(value)) {\r\n        if (result[key] === void 0) {\r\n          result[key] = [...value];\r\n        } else {\r\n          result[key] = Array.from(/* @__PURE__ */ new Set([...result[key], ...value]));\r\n        }\r\n      } else {\r\n        result[key] = value;\r\n      }\r\n    });\r\n  });\r\n  return result;\r\n}\r\n\r\n// src/subscription/utils.ts\r\nimport { nip19 } from \"nostr-tools\";\r\nvar MAX_SUBID_LENGTH = 20;\r\nfunction queryFullyFilled(subscription) {\r\n  if (filterIncludesIds(subscription.filter)) {\r\n    if (resultHasAllRequestedIds(subscription)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\nfunction compareFilter(filter1, filter2) {\r\n  if (Object.keys(filter1).length !== Object.keys(filter2).length)\r\n    return false;\r\n  for (const [key, value] of Object.entries(filter1)) {\r\n    const valuesInFilter2 = filter2[key];\r\n    if (!valuesInFilter2)\r\n      return false;\r\n    if (Array.isArray(value) && Array.isArray(valuesInFilter2)) {\r\n      const v = value;\r\n      for (const valueInFilter2 of valuesInFilter2) {\r\n        const val = valueInFilter2;\r\n        if (!v.includes(val)) {\r\n          return false;\r\n        }\r\n      }\r\n    } else {\r\n      if (valuesInFilter2 !== value)\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction filterIncludesIds(filter) {\r\n  return !!filter[\"ids\"];\r\n}\r\nfunction resultHasAllRequestedIds(subscription) {\r\n  const ids = subscription.filter[\"ids\"];\r\n  return !!ids && ids.length === subscription.eventFirstSeen.size;\r\n}\r\nfunction generateSubId(subscriptions, filters) {\r\n  const subIds = subscriptions.map((sub) => sub.subId).filter(Boolean);\r\n  const subIdParts = [];\r\n  const filterNonKindKeys = /* @__PURE__ */ new Set();\r\n  const filterKinds = /* @__PURE__ */ new Set();\r\n  if (subIds.length > 0) {\r\n    subIdParts.push(Array.from(new Set(subIds)).join(\",\"));\r\n  } else {\r\n    for (const filter of filters) {\r\n      for (const key of Object.keys(filter)) {\r\n        if (key === \"kinds\") {\r\n          filter.kinds?.forEach((k) => filterKinds.add(k));\r\n        } else {\r\n          filterNonKindKeys.add(key);\r\n        }\r\n      }\r\n    }\r\n    if (filterKinds.size > 0) {\r\n      subIdParts.push(\"kinds:\" + Array.from(filterKinds).join(\",\"));\r\n    }\r\n    if (filterNonKindKeys.size > 0) {\r\n      subIdParts.push(Array.from(filterNonKindKeys).join(\",\"));\r\n    }\r\n  }\r\n  let subId = subIdParts.join(\"-\");\r\n  if (subId.length > MAX_SUBID_LENGTH)\r\n    subId = subId.substring(0, MAX_SUBID_LENGTH);\r\n  subId += \"-\" + Math.floor(Math.random() * 999).toString();\r\n  return subId;\r\n}\r\nfunction filterFromId(id) {\r\n  let decoded;\r\n  if (id.match(NIP33_A_REGEX)) {\r\n    const [kind, pubkey, identifier] = id.split(\":\");\r\n    const filter = {\r\n      authors: [pubkey],\r\n      kinds: [parseInt(kind)]\r\n    };\r\n    if (identifier) {\r\n      filter[\"#d\"] = [identifier];\r\n    }\r\n    return filter;\r\n  }\r\n  if (id.match(BECH32_REGEX)) {\r\n    try {\r\n      decoded = nip19.decode(id);\r\n      switch (decoded.type) {\r\n        case \"nevent\":\r\n          return { ids: [decoded.data.id] };\r\n        case \"note\":\r\n          return { ids: [decoded.data] };\r\n        case \"naddr\":\r\n          const filter = {\r\n            authors: [decoded.data.pubkey],\r\n            kinds: [decoded.data.kind]\r\n          };\r\n          if (decoded.data.identifier)\r\n            filter[\"#d\"] = [decoded.data.identifier];\r\n          return filter;\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error decoding\", id, e);\r\n    }\r\n  }\r\n  return { ids: [id] };\r\n}\r\nfunction isNip33AValue(value) {\r\n  return value.match(NIP33_A_REGEX) !== null;\r\n}\r\nvar NIP33_A_REGEX = /^(\\d+):([0-9A-Fa-f]+)(?::(.*))?$/;\r\nvar BECH32_REGEX = /^n(event|ote|profile|pub|addr)1[\\d\\w]+$/;\r\nfunction relaysFromBech32(bech322) {\r\n  try {\r\n    const decoded = nip19.decode(bech322);\r\n    if ([\"naddr\", \"nevent\"].includes(decoded?.type)) {\r\n      const data = decoded.data;\r\n      if (data?.relays) {\r\n        return data.relays.map((r) => new NDKRelay(r));\r\n      }\r\n    }\r\n  } catch (e) {\r\n  }\r\n  return [];\r\n}\r\n\r\n// src/relay/subscriptions.ts\r\nvar NDKGroupedSubscriptions = class extends EventEmitter {\r\n  subscriptions;\r\n  req;\r\n  debug;\r\n  constructor(subscriptions, debug7) {\r\n    super();\r\n    this.subscriptions = subscriptions;\r\n    this.debug = debug7 || this.subscriptions[0].subscription.debug.extend(\"grouped\");\r\n    for (const subscription of subscriptions) {\r\n      this.handleSubscriptionClosure(subscription);\r\n    }\r\n  }\r\n  /**\r\n   * Adds a subscription to this group.\r\n   * @param subscription\r\n   */\r\n  addSubscription(subscription) {\r\n    this.subscriptions.push(subscription);\r\n    this.handleSubscriptionClosure(subscription);\r\n  }\r\n  eventReceived(rawEvent) {\r\n    for (const subscription of this.subscriptions) {\r\n      subscription.eventReceived(rawEvent);\r\n    }\r\n  }\r\n  eoseReceived(relay) {\r\n    const subscriptionsToInform = Array.from(this.subscriptions);\r\n    subscriptionsToInform.forEach(async (subscription) => {\r\n      subscription.subscription.eoseReceived(relay);\r\n    });\r\n  }\r\n  handleSubscriptionClosure(subscription) {\r\n    subscription.subscription.on(\"close\", () => {\r\n      const index = this.subscriptions.findIndex(\r\n        (i) => i.subscription === subscription.subscription\r\n      );\r\n      this.subscriptions.splice(index, 1);\r\n      if (this.subscriptions.length <= 0) {\r\n        this.emit(\"close\");\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * Maps each subscription through a transformation function.\r\n   * @param fn - The transformation function.\r\n   * @returns A new array with each subscription transformed by fn.\r\n   */\r\n  map(fn) {\r\n    return this.subscriptions.map(fn);\r\n  }\r\n  [Symbol.iterator]() {\r\n    let index = 0;\r\n    const subscriptions = this.subscriptions;\r\n    return {\r\n      next() {\r\n        if (index < subscriptions.length) {\r\n          return { value: subscriptions[index++], done: false };\r\n        } else {\r\n          return { value: null, done: true };\r\n        }\r\n      }\r\n    };\r\n  }\r\n};\r\nvar NDKSubscriptionFilters = class {\r\n  subscription;\r\n  filters = [];\r\n  ndkRelay;\r\n  constructor(subscription, filters, ndkRelay) {\r\n    this.subscription = subscription;\r\n    this.filters = filters;\r\n    this.ndkRelay = ndkRelay;\r\n  }\r\n  eventReceived(rawEvent) {\r\n    if (!this.eventMatchesLocalFilter(rawEvent))\r\n      return;\r\n    const event = new NDKEvent(void 0, rawEvent);\r\n    event.relay = this.ndkRelay;\r\n    this.subscription.eventReceived(event, this.ndkRelay, false);\r\n  }\r\n  eventMatchesLocalFilter(rawEvent) {\r\n    return this.filters.some((filter) => matchFilter(filter, rawEvent));\r\n  }\r\n};\r\nfunction findMatchingActiveSubscriptions(activeSubscriptions, filters) {\r\n  if (activeSubscriptions.length !== filters.length)\r\n    return false;\r\n  for (let i = 0; i < activeSubscriptions.length; i++) {\r\n    if (!compareFilter(activeSubscriptions[i], filters[i])) {\r\n      break;\r\n    }\r\n    return activeSubscriptions[i];\r\n  }\r\n  return void 0;\r\n}\r\nvar NDKRelaySubscriptions = class {\r\n  ndkRelay;\r\n  delayedItems = /* @__PURE__ */ new Map();\r\n  delayedTimers = /* @__PURE__ */ new Map();\r\n  /**\r\n   * Active subscriptions this relay is connected to\r\n   */\r\n  activeSubscriptions = /* @__PURE__ */ new Map();\r\n  activeSubscriptionsByGroupId = /* @__PURE__ */ new Map();\r\n  executionTimeoutsByGroupId = /* @__PURE__ */ new Map();\r\n  debug;\r\n  groupingDebug;\r\n  conn;\r\n  constructor(ndkRelay) {\r\n    this.ndkRelay = ndkRelay;\r\n    this.conn = ndkRelay.connectivity;\r\n    this.debug = ndkRelay.debug.extend(\"subscriptions\");\r\n    this.groupingDebug = ndkRelay.debug.extend(\"grouping\");\r\n  }\r\n  /**\r\n   * Creates or queues a subscription to the relay.\r\n   */\r\n  subscribe(subscription, filters) {\r\n    const groupableId = calculateGroupableId(filters, subscription.closeOnEose);\r\n    const subscriptionFilters = new NDKSubscriptionFilters(\r\n      subscription,\r\n      filters,\r\n      this.ndkRelay\r\n    );\r\n    const isNotGroupable = !groupableId || !subscription.isGroupable();\r\n    if (isNotGroupable) {\r\n      this.executeSubscriptions(\r\n        groupableId,\r\n        // hacky\r\n        new NDKGroupedSubscriptions([subscriptionFilters]),\r\n        filters\r\n      );\r\n      return;\r\n    }\r\n    const activeSubscriptions = this.activeSubscriptionsByGroupId.get(groupableId);\r\n    if (activeSubscriptions) {\r\n      const matchingSubscription = findMatchingActiveSubscriptions(\r\n        activeSubscriptions.filters,\r\n        filters\r\n      );\r\n      if (matchingSubscription) {\r\n        const activeSubscription = this.activeSubscriptions.get(activeSubscriptions.sub);\r\n        activeSubscription?.addSubscription(\r\n          new NDKSubscriptionFilters(subscription, filters, this.ndkRelay)\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    let delayedItem = this.delayedItems.get(groupableId);\r\n    if (!delayedItem) {\r\n      delayedItem = new NDKGroupedSubscriptions([subscriptionFilters]);\r\n      this.delayedItems.set(groupableId, delayedItem);\r\n      delayedItem.once(\"close\", () => {\r\n        const delayedItem2 = this.delayedItems.get(groupableId);\r\n        if (!delayedItem2)\r\n          return;\r\n        this.delayedItems.delete(groupableId);\r\n      });\r\n    } else {\r\n      delayedItem.addSubscription(subscriptionFilters);\r\n    }\r\n    let timeout = this.executionTimeoutsByGroupId.get(groupableId);\r\n    if (!timeout || subscription.opts.groupableDelayType === \"at-most\") {\r\n      timeout = setTimeout(() => {\r\n        this.executeGroup(groupableId, subscription);\r\n      }, subscription.opts.groupableDelay);\r\n      this.executionTimeoutsByGroupId.set(groupableId, timeout);\r\n    }\r\n    if (this.delayedTimers.has(groupableId)) {\r\n      this.delayedTimers.get(groupableId).push(timeout);\r\n    } else {\r\n      this.delayedTimers.set(groupableId, [timeout]);\r\n    }\r\n  }\r\n  /**\r\n   * Executes a delayed subscription via its groupable ID.\r\n   * @param groupableId\r\n   */\r\n  executeGroup(groupableId, triggeredBy) {\r\n    const delayedItem = this.delayedItems.get(groupableId);\r\n    this.delayedItems.delete(groupableId);\r\n    const timeouts = this.delayedTimers.get(groupableId);\r\n    this.delayedTimers.delete(groupableId);\r\n    if (timeouts) {\r\n      for (const timeout of timeouts) {\r\n        clearTimeout(timeout);\r\n      }\r\n    }\r\n    if (delayedItem) {\r\n      const filterCount = delayedItem.subscriptions[0].filters.length;\r\n      const mergedFilters = [];\r\n      for (let i = 0; i < filterCount; i++) {\r\n        const allFiltersAtIndex = delayedItem.map((di) => di.filters[i]);\r\n        mergedFilters.push(mergeFilters(allFiltersAtIndex));\r\n      }\r\n      this.executeSubscriptions(groupableId, delayedItem, mergedFilters);\r\n    }\r\n  }\r\n  executeSubscriptionsWhenConnected(groupableId, groupedSubscriptions, mergedFilters) {\r\n    const readyListener = () => {\r\n      this.executeSubscriptionsConnected(groupableId, groupedSubscriptions, mergedFilters);\r\n    };\r\n    this.ndkRelay.once(\"ready\", readyListener);\r\n    groupedSubscriptions.once(\"close\", () => {\r\n      this.ndkRelay.removeListener(\"ready\", readyListener);\r\n    });\r\n  }\r\n  /**\r\n   * Executes one or more subscriptions.\r\n   *\r\n   * If the relay is not connected, subscriptions will be queued\r\n   * until the relay connects.\r\n   *\r\n   * @param groupableId\r\n   * @param subscriptionFilters\r\n   * @param mergedFilters\r\n   */\r\n  executeSubscriptions(groupableId, groupedSubscriptions, mergedFilters) {\r\n    if (this.conn.isAvailable()) {\r\n      this.executeSubscriptionsConnected(groupableId, groupedSubscriptions, mergedFilters);\r\n    } else {\r\n      this.executeSubscriptionsWhenConnected(\r\n        groupableId,\r\n        groupedSubscriptions,\r\n        mergedFilters\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   * Executes one or more subscriptions.\r\n   *\r\n   * When there are more than one subscription, results\r\n   * will be sent to the right subscription\r\n   *\r\n   * @param subscriptions\r\n   * @param filters The filters as they should be sent to the relay\r\n   */\r\n  executeSubscriptionsConnected(groupableId, groupedSubscriptions, mergedFilters) {\r\n    const subscriptions = [];\r\n    for (const { subscription } of groupedSubscriptions) {\r\n      subscriptions.push(subscription);\r\n    }\r\n    const subId = generateSubId(subscriptions, mergedFilters);\r\n    groupedSubscriptions.req = mergedFilters;\r\n    const subOptions = { id: subId };\r\n    subOptions.skipVerification = true;\r\n    const sub = this.conn.relay.sub(mergedFilters, subOptions);\r\n    this.activeSubscriptions.set(sub, groupedSubscriptions);\r\n    if (groupableId) {\r\n      this.activeSubscriptionsByGroupId.set(groupableId, { filters: mergedFilters, sub });\r\n    }\r\n    sub.on(\"event\", (rawEvent) => {\r\n      const subFilters = this.activeSubscriptions.get(sub);\r\n      subFilters?.eventReceived(rawEvent);\r\n    });\r\n    sub.on(\"eose\", () => {\r\n      const subFilters = this.activeSubscriptions.get(sub);\r\n      subFilters?.eoseReceived(this.ndkRelay);\r\n    });\r\n    groupedSubscriptions.once(\"close\", () => {\r\n      sub.unsub();\r\n      this.activeSubscriptions.delete(sub);\r\n      if (groupableId) {\r\n        this.activeSubscriptionsByGroupId.delete(groupableId);\r\n      }\r\n    });\r\n    this.executeSubscriptionsWhenConnected(groupableId, groupedSubscriptions, mergedFilters);\r\n    return sub;\r\n  }\r\n  executedFilters() {\r\n    const ret = /* @__PURE__ */ new Map();\r\n    for (const [, groupedSubscriptions] of this.activeSubscriptions) {\r\n      ret.set(\r\n        groupedSubscriptions.req,\r\n        groupedSubscriptions.map((sub) => sub.subscription)\r\n      );\r\n    }\r\n    return ret;\r\n  }\r\n};\r\n\r\n// ../../../node_modules/.pnpm/normalize-url@8.0.1/node_modules/normalize-url/index.js\r\nvar DATA_URL_DEFAULT_MIME_TYPE = \"text/plain\";\r\nvar DATA_URL_DEFAULT_CHARSET = \"us-ascii\";\r\nvar testParameter = (name, filters) => filters.some((filter) => filter instanceof RegExp ? filter.test(name) : filter === name);\r\nvar supportedProtocols = /* @__PURE__ */ new Set([\r\n  \"https:\",\r\n  \"http:\",\r\n  \"file:\"\r\n]);\r\nvar hasCustomProtocol = (urlString) => {\r\n  try {\r\n    const { protocol } = new URL(urlString);\r\n    return protocol.endsWith(\":\") && !protocol.includes(\".\") && !supportedProtocols.has(protocol);\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\nvar normalizeDataURL = (urlString, { stripHash }) => {\r\n  const match = /^data:(?<type>[^,]*?),(?<data>[^#]*?)(?:#(?<hash>.*))?$/.exec(urlString);\r\n  if (!match) {\r\n    throw new Error(`Invalid URL: ${urlString}`);\r\n  }\r\n  let { type, data, hash } = match.groups;\r\n  const mediaType = type.split(\";\");\r\n  hash = stripHash ? \"\" : hash;\r\n  let isBase64 = false;\r\n  if (mediaType[mediaType.length - 1] === \"base64\") {\r\n    mediaType.pop();\r\n    isBase64 = true;\r\n  }\r\n  const mimeType = mediaType.shift()?.toLowerCase() ?? \"\";\r\n  const attributes = mediaType.map((attribute) => {\r\n    let [key, value = \"\"] = attribute.split(\"=\").map((string) => string.trim());\r\n    if (key === \"charset\") {\r\n      value = value.toLowerCase();\r\n      if (value === DATA_URL_DEFAULT_CHARSET) {\r\n        return \"\";\r\n      }\r\n    }\r\n    return `${key}${value ? `=${value}` : \"\"}`;\r\n  }).filter(Boolean);\r\n  const normalizedMediaType = [\r\n    ...attributes\r\n  ];\r\n  if (isBase64) {\r\n    normalizedMediaType.push(\"base64\");\r\n  }\r\n  if (normalizedMediaType.length > 0 || mimeType && mimeType !== DATA_URL_DEFAULT_MIME_TYPE) {\r\n    normalizedMediaType.unshift(mimeType);\r\n  }\r\n  return `data:${normalizedMediaType.join(\";\")},${isBase64 ? data.trim() : data}${hash ? `#${hash}` : \"\"}`;\r\n};\r\nfunction normalizeUrl(urlString, options) {\r\n  options = {\r\n    defaultProtocol: \"http\",\r\n    normalizeProtocol: true,\r\n    forceHttp: false,\r\n    forceHttps: false,\r\n    stripAuthentication: true,\r\n    stripHash: false,\r\n    stripTextFragment: true,\r\n    stripWWW: true,\r\n    removeQueryParameters: [/^utm_\\w+/i],\r\n    removeTrailingSlash: true,\r\n    removeSingleSlash: true,\r\n    removeDirectoryIndex: false,\r\n    removeExplicitPort: false,\r\n    sortQueryParameters: true,\r\n    ...options\r\n  };\r\n  if (typeof options.defaultProtocol === \"string\" && !options.defaultProtocol.endsWith(\":\")) {\r\n    options.defaultProtocol = `${options.defaultProtocol}:`;\r\n  }\r\n  urlString = urlString.trim();\r\n  if (/^data:/i.test(urlString)) {\r\n    return normalizeDataURL(urlString, options);\r\n  }\r\n  if (hasCustomProtocol(urlString)) {\r\n    return urlString;\r\n  }\r\n  const hasRelativeProtocol = urlString.startsWith(\"//\");\r\n  const isRelativeUrl = !hasRelativeProtocol && /^\\.*\\//.test(urlString);\r\n  if (!isRelativeUrl) {\r\n    urlString = urlString.replace(/^(?!(?:\\w+:)?\\/\\/)|^\\/\\//, options.defaultProtocol);\r\n  }\r\n  const urlObject = new URL(urlString);\r\n  if (options.forceHttp && options.forceHttps) {\r\n    throw new Error(\"The `forceHttp` and `forceHttps` options cannot be used together\");\r\n  }\r\n  if (options.forceHttp && urlObject.protocol === \"https:\") {\r\n    urlObject.protocol = \"http:\";\r\n  }\r\n  if (options.forceHttps && urlObject.protocol === \"http:\") {\r\n    urlObject.protocol = \"https:\";\r\n  }\r\n  if (options.stripAuthentication) {\r\n    urlObject.username = \"\";\r\n    urlObject.password = \"\";\r\n  }\r\n  if (options.stripHash) {\r\n    urlObject.hash = \"\";\r\n  } else if (options.stripTextFragment) {\r\n    urlObject.hash = urlObject.hash.replace(/#?:~:text.*?$/i, \"\");\r\n  }\r\n  if (urlObject.pathname) {\r\n    const protocolRegex = /\\b[a-z][a-z\\d+\\-.]{1,50}:\\/\\//g;\r\n    let lastIndex = 0;\r\n    let result = \"\";\r\n    for (; ; ) {\r\n      const match = protocolRegex.exec(urlObject.pathname);\r\n      if (!match) {\r\n        break;\r\n      }\r\n      const protocol = match[0];\r\n      const protocolAtIndex = match.index;\r\n      const intermediate = urlObject.pathname.slice(lastIndex, protocolAtIndex);\r\n      result += intermediate.replace(/\\/{2,}/g, \"/\");\r\n      result += protocol;\r\n      lastIndex = protocolAtIndex + protocol.length;\r\n    }\r\n    const remnant = urlObject.pathname.slice(lastIndex, urlObject.pathname.length);\r\n    result += remnant.replace(/\\/{2,}/g, \"/\");\r\n    urlObject.pathname = result;\r\n  }\r\n  if (urlObject.pathname) {\r\n    try {\r\n      urlObject.pathname = decodeURI(urlObject.pathname);\r\n    } catch {\r\n    }\r\n  }\r\n  if (options.removeDirectoryIndex === true) {\r\n    options.removeDirectoryIndex = [/^index\\.[a-z]+$/];\r\n  }\r\n  if (Array.isArray(options.removeDirectoryIndex) && options.removeDirectoryIndex.length > 0) {\r\n    let pathComponents = urlObject.pathname.split(\"/\");\r\n    const lastComponent = pathComponents[pathComponents.length - 1];\r\n    if (testParameter(lastComponent, options.removeDirectoryIndex)) {\r\n      pathComponents = pathComponents.slice(0, -1);\r\n      urlObject.pathname = pathComponents.slice(1).join(\"/\") + \"/\";\r\n    }\r\n  }\r\n  if (urlObject.hostname) {\r\n    urlObject.hostname = urlObject.hostname.replace(/\\.$/, \"\");\r\n    if (options.stripWWW && /^www\\.(?!www\\.)[a-z\\-\\d]{1,63}\\.[a-z.\\-\\d]{2,63}$/.test(urlObject.hostname)) {\r\n      urlObject.hostname = urlObject.hostname.replace(/^www\\./, \"\");\r\n    }\r\n  }\r\n  if (Array.isArray(options.removeQueryParameters)) {\r\n    for (const key of [...urlObject.searchParams.keys()]) {\r\n      if (testParameter(key, options.removeQueryParameters)) {\r\n        urlObject.searchParams.delete(key);\r\n      }\r\n    }\r\n  }\r\n  if (!Array.isArray(options.keepQueryParameters) && options.removeQueryParameters === true) {\r\n    urlObject.search = \"\";\r\n  }\r\n  if (Array.isArray(options.keepQueryParameters) && options.keepQueryParameters.length > 0) {\r\n    for (const key of [...urlObject.searchParams.keys()]) {\r\n      if (!testParameter(key, options.keepQueryParameters)) {\r\n        urlObject.searchParams.delete(key);\r\n      }\r\n    }\r\n  }\r\n  if (options.sortQueryParameters) {\r\n    urlObject.searchParams.sort();\r\n    try {\r\n      urlObject.search = decodeURIComponent(urlObject.search);\r\n    } catch {\r\n    }\r\n  }\r\n  if (options.removeTrailingSlash) {\r\n    urlObject.pathname = urlObject.pathname.replace(/\\/$/, \"\");\r\n  }\r\n  if (options.removeExplicitPort && urlObject.port) {\r\n    urlObject.port = \"\";\r\n  }\r\n  const oldUrlString = urlString;\r\n  urlString = urlObject.toString();\r\n  if (!options.removeSingleSlash && urlObject.pathname === \"/\" && !oldUrlString.endsWith(\"/\") && urlObject.hash === \"\") {\r\n    urlString = urlString.replace(/\\/$/, \"\");\r\n  }\r\n  if ((options.removeTrailingSlash || urlObject.pathname === \"/\") && urlObject.hash === \"\" && options.removeSingleSlash) {\r\n    urlString = urlString.replace(/\\/$/, \"\");\r\n  }\r\n  if (hasRelativeProtocol && !options.normalizeProtocol) {\r\n    urlString = urlString.replace(/^http:\\/\\//, \"//\");\r\n  }\r\n  if (options.stripProtocol) {\r\n    urlString = urlString.replace(/^(?:https?:)?\\/\\//, \"\");\r\n  }\r\n  return urlString;\r\n}\r\n\r\n// src/utils/normalize-url.ts\r\nfunction normalizeRelayUrl(url) {\r\n  let r = normalizeUrl(url.toLowerCase(), {\r\n    stripAuthentication: false,\r\n    stripWWW: false,\r\n    stripHash: true\r\n  });\r\n  if (!r.endsWith(\"/\")) {\r\n    r += \"/\";\r\n  }\r\n  return r;\r\n}\r\nfunction normalize(urls) {\r\n  const normalized = /* @__PURE__ */ new Set();\r\n  for (const url of urls) {\r\n    try {\r\n      normalized.add(normalizeRelayUrl(url));\r\n    } catch {\r\n    }\r\n  }\r\n  return Array.from(normalized);\r\n}\r\n\r\n// src/relay/index.ts\r\nvar NDKRelayStatus = /* @__PURE__ */ ((NDKRelayStatus2) => {\r\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTING\"] = 0] = \"CONNECTING\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"CONNECTED\"] = 1] = \"CONNECTED\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTING\"] = 2] = \"DISCONNECTING\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"DISCONNECTED\"] = 3] = \"DISCONNECTED\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"RECONNECTING\"] = 4] = \"RECONNECTING\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"FLAPPING\"] = 5] = \"FLAPPING\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTH_REQUIRED\"] = 6] = \"AUTH_REQUIRED\";\r\n  NDKRelayStatus2[NDKRelayStatus2[\"AUTHENTICATING\"] = 7] = \"AUTHENTICATING\";\r\n  return NDKRelayStatus2;\r\n})(NDKRelayStatus || {});\r\nvar NDKRelay = class extends EventEmitter2 {\r\n  url;\r\n  scores;\r\n  connectivity;\r\n  subs;\r\n  publisher;\r\n  authPolicy;\r\n  validationRatio;\r\n  validatedEventCount = 0;\r\n  skippedEventCount = 0;\r\n  /**\r\n   * Whether this relay is trusted.\r\n   *\r\n   * Trusted relay's events do not get their signature verified.\r\n   */\r\n  trusted = false;\r\n  complaining = false;\r\n  debug;\r\n  constructor(url, authPolicy) {\r\n    super();\r\n    this.url = normalizeRelayUrl(url);\r\n    this.scores = /* @__PURE__ */ new Map();\r\n    this.debug = debug(`ndk:relay:${url}`);\r\n    this.connectivity = new NDKRelayConnectivity(this);\r\n    this.subs = new NDKRelaySubscriptions(this);\r\n    this.publisher = new NDKRelayPublisher(this);\r\n    this.authPolicy = authPolicy;\r\n    this.validationRatio = void 0;\r\n  }\r\n  get status() {\r\n    return this.connectivity.status;\r\n  }\r\n  get connectionStats() {\r\n    return this.connectivity.connectionStats;\r\n  }\r\n  /**\r\n   * Connects to the relay.\r\n   */\r\n  async connect(timeoutMs, reconnect = true) {\r\n    return this.connectivity.connect(timeoutMs, reconnect);\r\n  }\r\n  /**\r\n   * Disconnects from the relay.\r\n   */\r\n  disconnect() {\r\n    if (this.status === 3 /* DISCONNECTED */) {\r\n      return;\r\n    }\r\n    this.connectivity.disconnect();\r\n  }\r\n  /**\r\n   * Queues or executes the subscription of a specific set of filters\r\n   * within this relay.\r\n   *\r\n   * @param subscription NDKSubscription this filters belong to.\r\n   * @param filters Filters to execute\r\n   */\r\n  subscribe(subscription, filters) {\r\n    this.subs.subscribe(subscription, filters);\r\n  }\r\n  /**\r\n   * Publishes an event to the relay with an optional timeout.\r\n   *\r\n   * If the relay is not connected, the event will be published when the relay connects,\r\n   * unless the timeout is reached before the relay connects.\r\n   *\r\n   * @param event The event to publish\r\n   * @param timeoutMs The timeout for the publish operation in milliseconds\r\n   * @returns A promise that resolves when the event has been published or rejects if the operation times out\r\n   */\r\n  async publish(event, timeoutMs = 2500) {\r\n    return this.publisher.publish(event, timeoutMs);\r\n  }\r\n  async auth(event) {\r\n    return this.publisher.auth(event);\r\n  }\r\n  /**\r\n   * Called when this relay has responded with an event but\r\n   * wasn't the fastest one.\r\n   * @param timeDiffInMs The time difference in ms between the fastest and this relay in milliseconds\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  scoreSlowerEvent(timeDiffInMs) {\r\n  }\r\n  /** @deprecated Use referenceTags instead. */\r\n  tagReference(marker) {\r\n    const tag = [\"r\", this.url];\r\n    if (marker) {\r\n      tag.push(marker);\r\n    }\r\n    return tag;\r\n  }\r\n  referenceTags() {\r\n    return [[\"r\", this.url]];\r\n  }\r\n  activeSubscriptions() {\r\n    return this.subs.executedFilters();\r\n  }\r\n  addValidatedEvent() {\r\n    this.validatedEventCount++;\r\n  }\r\n  addSkippedEvent() {\r\n    this.skippedEventCount++;\r\n  }\r\n  getValidationRatio() {\r\n    if (this.skippedEventCount === 0) {\r\n      return 1;\r\n    }\r\n    return this.validatedEventCount / (this.validatedEventCount + this.skippedEventCount);\r\n  }\r\n  shouldValidateEvent() {\r\n    if (this.trusted) {\r\n      return false;\r\n    }\r\n    if (this.validationRatio === void 0) {\r\n      return true;\r\n    }\r\n    return this.getValidationRatio() < this.validationRatio;\r\n  }\r\n};\r\n\r\n// src/relay/sets/index.ts\r\nvar PublishError = class extends Error {\r\n  errors;\r\n  constructor(message, errors) {\r\n    super(message);\r\n    this.errors = errors;\r\n  }\r\n  get relayErrors() {\r\n    const errors = [];\r\n    for (const [relay, err] of this.errors) {\r\n      errors.push(`${relay.url}: ${err}`);\r\n    }\r\n    return errors.join(\"\\n\");\r\n  }\r\n};\r\nvar NDKRelaySet = class _NDKRelaySet {\r\n  relays;\r\n  debug;\r\n  ndk;\r\n  constructor(relays, ndk) {\r\n    this.relays = relays;\r\n    this.ndk = ndk;\r\n    this.debug = ndk.debug.extend(\"relayset\");\r\n  }\r\n  /**\r\n   * Adds a relay to this set.\r\n   */\r\n  addRelay(relay) {\r\n    this.relays.add(relay);\r\n  }\r\n  /**\r\n   * Creates a relay set from a list of relay URLs.\r\n   *\r\n   * If no connection to the relay is found in the pool it will temporarily\r\n   * connect to it.\r\n   *\r\n   * @param relayUrls - list of relay URLs to include in this set\r\n   * @param ndk\r\n   * @returns NDKRelaySet\r\n   */\r\n  static fromRelayUrls(relayUrls, ndk) {\r\n    const relays = /* @__PURE__ */ new Set();\r\n    for (const url of relayUrls) {\r\n      const relay = ndk.pool.relays.get(url);\r\n      if (relay) {\r\n        relays.add(relay);\r\n      } else {\r\n        const temporaryRelay = new NDKRelay(url);\r\n        ndk.pool.useTemporaryRelay(temporaryRelay);\r\n        relays.add(temporaryRelay);\r\n      }\r\n    }\r\n    return new _NDKRelaySet(new Set(relays), ndk);\r\n  }\r\n  /**\r\n   * Publish an event to all relays in this set. Returns the number of relays that have received the event.\r\n   * @param event\r\n   * @param timeoutMs - timeout in milliseconds for each publish operation and connection operation\r\n   * @returns A set where the event was successfully published to\r\n   * @throws PublishError if no relay was able to receive the event\r\n   * @example\r\n   * ```typescript\r\n   * const event = new NDKEvent(ndk, {kinds: [NDKKind.Message], \"#d\": [\"123\"]});\r\n   * try {\r\n   *    const publishedToRelays = await relaySet.publish(event);\r\n   *    console.log(`published to ${publishedToRelays.size} relays`)\r\n   * } catch (error) {\r\n   *   console.error(\"error publishing to relays\", error);\r\n   *\r\n   *   if (error instanceof PublishError) {\r\n   *      for (const [relay, err] of error.errors) {\r\n   *         console.error(`error publishing to relay ${relay.url}`, err);\r\n   *       }\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\r\n  async publish(event, timeoutMs) {\r\n    const publishedToRelays = /* @__PURE__ */ new Set();\r\n    const errors = /* @__PURE__ */ new Map();\r\n    const isEphemeral2 = event.isEphemeral();\r\n    const promises = Array.from(this.relays).map((relay) => {\r\n      return new Promise((resolve) => {\r\n        relay.publish(event, timeoutMs).then((e) => {\r\n          publishedToRelays.add(relay);\r\n          resolve();\r\n        }).catch((err) => {\r\n          if (!isEphemeral2) {\r\n            errors.set(relay, err);\r\n            this.debug(\"error publishing to relay\", {\r\n              relay: relay.url,\r\n              err\r\n            });\r\n          }\r\n          resolve();\r\n        });\r\n      });\r\n    });\r\n    await Promise.all(promises);\r\n    if (publishedToRelays.size === 0) {\r\n      if (!isEphemeral2) {\r\n        throw new PublishError(\"No relay was able to receive the event\", errors);\r\n      }\r\n    }\r\n    return publishedToRelays;\r\n  }\r\n  get size() {\r\n    return this.relays.size;\r\n  }\r\n};\r\n\r\n// src/relay/sets/calculate.ts\r\nfunction calculateRelaySetFromEvent(ndk, event) {\r\n  const relays = /* @__PURE__ */ new Set();\r\n  ndk.pool?.permanentAndConnectedRelays().forEach((relay) => relays.add(relay));\r\n  return new NDKRelaySet(relays, ndk);\r\n}\r\nfunction calculateRelaySetsFromFilter(ndk, filters, pool) {\r\n  const result = /* @__PURE__ */ new Map();\r\n  const authors = /* @__PURE__ */ new Set();\r\n  filters.forEach((filter) => {\r\n    if (filter.authors) {\r\n      filter.authors.forEach((author) => authors.add(author));\r\n    }\r\n  });\r\n  if (authors.size > 0) {\r\n    const authorToRelaysMap = getRelaysForFilterWithAuthors(ndk, Array.from(authors), pool);\r\n    for (const relayUrl of authorToRelaysMap.keys()) {\r\n      result.set(relayUrl, []);\r\n    }\r\n    for (const filter of filters) {\r\n      if (filter.authors) {\r\n        for (const [relayUrl, authors2] of authorToRelaysMap.entries()) {\r\n          const authorFilterAndRelayPubkeyIntersection = filter.authors.filter(\r\n            (author) => authors2.includes(author)\r\n          );\r\n          result.set(relayUrl, [\r\n            ...result.get(relayUrl),\r\n            {\r\n              ...filter,\r\n              // Overwrite authors sent to this relay with the authors that were\r\n              // present in the filter and are also present in the relay\r\n              authors: authorFilterAndRelayPubkeyIntersection\r\n            }\r\n          ]);\r\n        }\r\n      } else {\r\n        for (const relayUrl of authorToRelaysMap.keys()) {\r\n          result.set(relayUrl, [...result.get(relayUrl), filter]);\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    pool.permanentAndConnectedRelays().forEach((relay) => {\r\n      result.set(relay.url, filters);\r\n    });\r\n  }\r\n  return result;\r\n}\r\nfunction calculateRelaySetsFromFilters(ndk, filters, pool) {\r\n  return calculateRelaySetsFromFilter(ndk, filters, pool);\r\n}\r\n\r\n// src/events/content-tagger.ts\r\nimport { nip19 as nip192 } from \"nostr-tools\";\r\nfunction mergeTags(tags1, tags2) {\r\n  const tagMap = /* @__PURE__ */ new Map();\r\n  const generateKey = (tag) => tag.join(\",\");\r\n  const isContained = (smaller, larger) => {\r\n    return smaller.every((value, index) => value === larger[index]);\r\n  };\r\n  const processTag = (tag) => {\r\n    for (let [key, existingTag] of tagMap) {\r\n      if (isContained(existingTag, tag) || isContained(tag, existingTag)) {\r\n        if (tag.length >= existingTag.length) {\r\n          tagMap.set(key, tag);\r\n        }\r\n        return;\r\n      }\r\n    }\r\n    tagMap.set(generateKey(tag), tag);\r\n  };\r\n  tags1.concat(tags2).forEach(processTag);\r\n  return Array.from(tagMap.values());\r\n}\r\nasync function generateContentTags(content, tags = []) {\r\n  const tagRegex = /(@|nostr:)(npub|nprofile|note|nevent|naddr)[a-zA-Z0-9]+/g;\r\n  const hashtagRegex = /(?<=\\s|^)(#[^\\s!@#$%^&*()=+.\\/,\\[{\\]};:'\"?><]+)/g;\r\n  let promises = [];\r\n  const addTagIfNew = (t) => {\r\n    if (!tags.find((t2) => [\"q\", t[0]].includes(t2[0]) && t2[1] === t[1])) {\r\n      tags.push(t);\r\n    }\r\n  };\r\n  content = content.replace(tagRegex, (tag) => {\r\n    try {\r\n      const entity = tag.split(/(@|nostr:)/)[2];\r\n      const { type, data } = nip192.decode(entity);\r\n      let t;\r\n      switch (type) {\r\n        case \"npub\":\r\n          t = [\"p\", data];\r\n          break;\r\n        case \"nprofile\":\r\n          t = [\"p\", data.pubkey];\r\n          break;\r\n        case \"note\":\r\n          promises.push(\r\n            new Promise(async (resolve) => {\r\n              addTagIfNew([\r\n                \"e\",\r\n                data,\r\n                await maybeGetEventRelayUrl(entity),\r\n                \"mention\"\r\n              ]);\r\n              resolve();\r\n            })\r\n          );\r\n          break;\r\n        case \"nevent\":\r\n          promises.push(\r\n            new Promise(async (resolve) => {\r\n              let { id, relays, author } = data;\r\n              if (!relays || relays.length === 0) {\r\n                relays = [await maybeGetEventRelayUrl(entity)];\r\n              }\r\n              addTagIfNew([\"e\", id, relays[0], \"mention\"]);\r\n              if (author)\r\n                addTagIfNew([\"p\", author]);\r\n              resolve();\r\n            })\r\n          );\r\n          break;\r\n        case \"naddr\":\r\n          promises.push(\r\n            new Promise(async (resolve) => {\r\n              const id = [data.kind, data.pubkey, data.identifier].join(\":\");\r\n              let relays = data.relays ?? [];\r\n              if (relays.length === 0) {\r\n                relays = [await maybeGetEventRelayUrl(entity)];\r\n              }\r\n              addTagIfNew([\"a\", id, relays[0], \"mention\"]);\r\n              addTagIfNew([\"p\", data.pubkey]);\r\n              resolve();\r\n            })\r\n          );\r\n          break;\r\n        default:\r\n          return tag;\r\n      }\r\n      if (t)\r\n        addTagIfNew(t);\r\n      return `nostr:${entity}`;\r\n    } catch (error) {\r\n      return tag;\r\n    }\r\n  });\r\n  await Promise.all(promises);\r\n  content = content.replace(hashtagRegex, (tag, word) => {\r\n    const t = [\"t\", word];\r\n    if (!tags.find((t2) => t2[0] === t[0] && t2[1] === t[1])) {\r\n      tags.push(t);\r\n    }\r\n    return tag;\r\n  });\r\n  return { content, tags };\r\n}\r\nasync function maybeGetEventRelayUrl(nip19Id) {\r\n  return \"\";\r\n}\r\n\r\n// src/events/kind.ts\r\nfunction isReplaceable() {\r\n  if (this.kind === void 0)\r\n    throw new Error(\"Kind not set\");\r\n  return [0, 3].includes(this.kind) || this.kind >= 1e4 && this.kind < 2e4 || this.kind >= 3e4 && this.kind < 4e4;\r\n}\r\nfunction isEphemeral() {\r\n  if (this.kind === void 0)\r\n    throw new Error(\"Kind not set\");\r\n  return this.kind >= 2e4 && this.kind < 3e4;\r\n}\r\nfunction isParamReplaceable() {\r\n  if (this.kind === void 0)\r\n    throw new Error(\"Kind not set\");\r\n  return this.kind >= 3e4 && this.kind < 4e4;\r\n}\r\n\r\n// src/events/kinds/index.ts\r\nvar NDKKind = /* @__PURE__ */ ((NDKKind2) => {\r\n  NDKKind2[NDKKind2[\"Metadata\"] = 0] = \"Metadata\";\r\n  NDKKind2[NDKKind2[\"Text\"] = 1] = \"Text\";\r\n  NDKKind2[NDKKind2[\"RecommendRelay\"] = 2] = \"RecommendRelay\";\r\n  NDKKind2[NDKKind2[\"Contacts\"] = 3] = \"Contacts\";\r\n  NDKKind2[NDKKind2[\"EncryptedDirectMessage\"] = 4] = \"EncryptedDirectMessage\";\r\n  NDKKind2[NDKKind2[\"EventDeletion\"] = 5] = \"EventDeletion\";\r\n  NDKKind2[NDKKind2[\"Repost\"] = 6] = \"Repost\";\r\n  NDKKind2[NDKKind2[\"Reaction\"] = 7] = \"Reaction\";\r\n  NDKKind2[NDKKind2[\"BadgeAward\"] = 8] = \"BadgeAward\";\r\n  NDKKind2[NDKKind2[\"GroupChat\"] = 9] = \"GroupChat\";\r\n  NDKKind2[NDKKind2[\"GroupNote\"] = 11] = \"GroupNote\";\r\n  NDKKind2[NDKKind2[\"GroupReply\"] = 12] = \"GroupReply\";\r\n  NDKKind2[NDKKind2[\"GenericRepost\"] = 16] = \"GenericRepost\";\r\n  NDKKind2[NDKKind2[\"ChannelCreation\"] = 40] = \"ChannelCreation\";\r\n  NDKKind2[NDKKind2[\"ChannelMetadata\"] = 41] = \"ChannelMetadata\";\r\n  NDKKind2[NDKKind2[\"ChannelMessage\"] = 42] = \"ChannelMessage\";\r\n  NDKKind2[NDKKind2[\"ChannelHideMessage\"] = 43] = \"ChannelHideMessage\";\r\n  NDKKind2[NDKKind2[\"ChannelMuteUser\"] = 44] = \"ChannelMuteUser\";\r\n  NDKKind2[NDKKind2[\"Media\"] = 1063] = \"Media\";\r\n  NDKKind2[NDKKind2[\"Report\"] = 1984] = \"Report\";\r\n  NDKKind2[NDKKind2[\"Label\"] = 1985] = \"Label\";\r\n  NDKKind2[NDKKind2[\"DVMReqTextExtraction\"] = 5e3] = \"DVMReqTextExtraction\";\r\n  NDKKind2[NDKKind2[\"DVMReqTextSummarization\"] = 5001] = \"DVMReqTextSummarization\";\r\n  NDKKind2[NDKKind2[\"DVMReqTextTranslation\"] = 5002] = \"DVMReqTextTranslation\";\r\n  NDKKind2[NDKKind2[\"DVMReqTextGeneration\"] = 5050] = \"DVMReqTextGeneration\";\r\n  NDKKind2[NDKKind2[\"DVMReqImageGeneration\"] = 5100] = \"DVMReqImageGeneration\";\r\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrContent\"] = 5300] = \"DVMReqDiscoveryNostrContent\";\r\n  NDKKind2[NDKKind2[\"DVMReqDiscoveryNostrPeople\"] = 5301] = \"DVMReqDiscoveryNostrPeople\";\r\n  NDKKind2[NDKKind2[\"DVMReqTimestamping\"] = 5900] = \"DVMReqTimestamping\";\r\n  NDKKind2[NDKKind2[\"DVMEventSchedule\"] = 5905] = \"DVMEventSchedule\";\r\n  NDKKind2[NDKKind2[\"DVMJobFeedback\"] = 7e3] = \"DVMJobFeedback\";\r\n  NDKKind2[NDKKind2[\"Subscribe\"] = 7001] = \"Subscribe\";\r\n  NDKKind2[NDKKind2[\"Unsubscribe\"] = 7002] = \"Unsubscribe\";\r\n  NDKKind2[NDKKind2[\"SubscriptionReceipt\"] = 7003] = \"SubscriptionReceipt\";\r\n  NDKKind2[NDKKind2[\"GroupAdminAddUser\"] = 9e3] = \"GroupAdminAddUser\";\r\n  NDKKind2[NDKKind2[\"GroupAdminRemoveUser\"] = 9001] = \"GroupAdminRemoveUser\";\r\n  NDKKind2[NDKKind2[\"GroupAdminEditMetadata\"] = 9002] = \"GroupAdminEditMetadata\";\r\n  NDKKind2[NDKKind2[\"GroupAdminEditStatus\"] = 9006] = \"GroupAdminEditStatus\";\r\n  NDKKind2[NDKKind2[\"MuteList\"] = 1e4] = \"MuteList\";\r\n  NDKKind2[NDKKind2[\"PinList\"] = 10001] = \"PinList\";\r\n  NDKKind2[NDKKind2[\"RelayList\"] = 10002] = \"RelayList\";\r\n  NDKKind2[NDKKind2[\"BookmarkList\"] = 10003] = \"BookmarkList\";\r\n  NDKKind2[NDKKind2[\"CommunityList\"] = 10004] = \"CommunityList\";\r\n  NDKKind2[NDKKind2[\"PublicChatList\"] = 10005] = \"PublicChatList\";\r\n  NDKKind2[NDKKind2[\"BlockRelayList\"] = 10006] = \"BlockRelayList\";\r\n  NDKKind2[NDKKind2[\"SearchRelayList\"] = 10007] = \"SearchRelayList\";\r\n  NDKKind2[NDKKind2[\"SimpleGroupList\"] = 10009] = \"SimpleGroupList\";\r\n  NDKKind2[NDKKind2[\"InterestList\"] = 10015] = \"InterestList\";\r\n  NDKKind2[NDKKind2[\"EmojiList\"] = 10030] = \"EmojiList\";\r\n  NDKKind2[NDKKind2[\"BlossomList\"] = 10063] = \"BlossomList\";\r\n  NDKKind2[NDKKind2[\"NostrWaletConnectInfo\"] = 13194] = \"NostrWaletConnectInfo\";\r\n  NDKKind2[NDKKind2[\"TierList\"] = 17e3] = \"TierList\";\r\n  NDKKind2[NDKKind2[\"FollowSet\"] = 3e4] = \"FollowSet\";\r\n  NDKKind2[NDKKind2[\"CategorizedPeopleList\"] = 3e4 /* FollowSet */] = \"CategorizedPeopleList\";\r\n  NDKKind2[NDKKind2[\"CategorizedBookmarkList\"] = 30001] = \"CategorizedBookmarkList\";\r\n  NDKKind2[NDKKind2[\"RelaySet\"] = 30002] = \"RelaySet\";\r\n  NDKKind2[NDKKind2[\"CategorizedRelayList\"] = 30002 /* RelaySet */] = \"CategorizedRelayList\";\r\n  NDKKind2[NDKKind2[\"BookmarkSet\"] = 30003] = \"BookmarkSet\";\r\n  NDKKind2[NDKKind2[\"CurationSet\"] = 30004] = \"CurationSet\";\r\n  NDKKind2[NDKKind2[\"ArticleCurationSet\"] = 30004] = \"ArticleCurationSet\";\r\n  NDKKind2[NDKKind2[\"VideoCurationSet\"] = 30005] = \"VideoCurationSet\";\r\n  NDKKind2[NDKKind2[\"InterestSet\"] = 30015] = \"InterestSet\";\r\n  NDKKind2[NDKKind2[\"InterestsList\"] = 30015 /* InterestSet */] = \"InterestsList\";\r\n  NDKKind2[NDKKind2[\"EmojiSet\"] = 30030] = \"EmojiSet\";\r\n  NDKKind2[NDKKind2[\"HighlightSet\"] = 39802] = \"HighlightSet\";\r\n  NDKKind2[NDKKind2[\"SubscriptionTier\"] = 37001] = \"SubscriptionTier\";\r\n  NDKKind2[NDKKind2[\"CategorizedHighlightList\"] = 39802 /* HighlightSet */] = \"CategorizedHighlightList\";\r\n  NDKKind2[NDKKind2[\"ZapRequest\"] = 9734] = \"ZapRequest\";\r\n  NDKKind2[NDKKind2[\"Zap\"] = 9735] = \"Zap\";\r\n  NDKKind2[NDKKind2[\"Highlight\"] = 9802] = \"Highlight\";\r\n  NDKKind2[NDKKind2[\"ClientAuth\"] = 22242] = \"ClientAuth\";\r\n  NDKKind2[NDKKind2[\"NostrWalletConnectReq\"] = 23194] = \"NostrWalletConnectReq\";\r\n  NDKKind2[NDKKind2[\"NostrWalletConnectRes\"] = 23195] = \"NostrWalletConnectRes\";\r\n  NDKKind2[NDKKind2[\"NostrConnect\"] = 24133] = \"NostrConnect\";\r\n  NDKKind2[NDKKind2[\"HttpAuth\"] = 27235] = \"HttpAuth\";\r\n  NDKKind2[NDKKind2[\"ProfileBadge\"] = 30008] = \"ProfileBadge\";\r\n  NDKKind2[NDKKind2[\"BadgeDefinition\"] = 30009] = \"BadgeDefinition\";\r\n  NDKKind2[NDKKind2[\"MarketStall\"] = 30017] = \"MarketStall\";\r\n  NDKKind2[NDKKind2[\"MarketProduct\"] = 30018] = \"MarketProduct\";\r\n  NDKKind2[NDKKind2[\"Article\"] = 30023] = \"Article\";\r\n  NDKKind2[NDKKind2[\"AppSpecificData\"] = 30078] = \"AppSpecificData\";\r\n  NDKKind2[NDKKind2[\"Classified\"] = 30402] = \"Classified\";\r\n  NDKKind2[NDKKind2[\"HorizontalVideo\"] = 34235] = \"HorizontalVideo\";\r\n  NDKKind2[NDKKind2[\"GroupMetadata\"] = 39e3] = \"GroupMetadata\";\r\n  NDKKind2[NDKKind2[\"GroupMembers\"] = 39002] = \"GroupMembers\";\r\n  NDKKind2[NDKKind2[\"AppRecommendation\"] = 31989] = \"AppRecommendation\";\r\n  NDKKind2[NDKKind2[\"AppHandler\"] = 31990] = \"AppHandler\";\r\n  return NDKKind2;\r\n})(NDKKind || {});\r\nvar NDKListKinds = [\r\n  1e4 /* MuteList */,\r\n  10001 /* PinList */,\r\n  10002 /* RelayList */,\r\n  10003 /* BookmarkList */,\r\n  10004 /* CommunityList */,\r\n  10005 /* PublicChatList */,\r\n  10006 /* BlockRelayList */,\r\n  10007 /* SearchRelayList */,\r\n  10015 /* InterestList */,\r\n  10030 /* EmojiList */,\r\n  3e4 /* FollowSet */,\r\n  30003 /* BookmarkSet */,\r\n  30001 /* CategorizedBookmarkList */,\r\n  // Backwards compatibility\r\n  30002 /* RelaySet */,\r\n  30004 /* ArticleCurationSet */,\r\n  30005 /* VideoCurationSet */,\r\n  30015 /* InterestSet */,\r\n  30030 /* EmojiSet */,\r\n  39802 /* HighlightSet */\r\n];\r\n\r\n// src/events/nip04.ts\r\nasync function encrypt(recipient, signer) {\r\n  if (!this.ndk)\r\n    throw new Error(\"No NDK instance found!\");\r\n  if (!signer) {\r\n    await this.ndk.assertSigner();\r\n    signer = this.ndk.signer;\r\n  }\r\n  if (!recipient) {\r\n    const pTags = this.getMatchingTags(\"p\");\r\n    if (pTags.length !== 1) {\r\n      throw new Error(\r\n        \"No recipient could be determined and no explicit recipient was provided\"\r\n      );\r\n    }\r\n    recipient = this.ndk.getUser({ pubkey: pTags[0][1] });\r\n  }\r\n  this.content = await signer?.encrypt(recipient, this.content);\r\n}\r\nasync function decrypt(sender, signer) {\r\n  if (!this.ndk)\r\n    throw new Error(\"No NDK instance found!\");\r\n  if (!signer) {\r\n    await this.ndk.assertSigner();\r\n    signer = this.ndk.signer;\r\n  }\r\n  if (!sender) {\r\n    sender = this.author;\r\n  }\r\n  this.content = await signer?.decrypt(sender, this.content);\r\n}\r\n\r\n// src/events/nip19.ts\r\nimport { nip19 as nip193 } from \"nostr-tools\";\r\nfunction encode() {\r\n  let relays = [];\r\n  if (this.onRelays.length > 0) {\r\n    relays = this.onRelays.map((relay) => relay.url);\r\n  } else if (this.relay) {\r\n    relays = [this.relay.url];\r\n  }\r\n  if (this.isParamReplaceable()) {\r\n    return nip193.naddrEncode({\r\n      kind: this.kind,\r\n      pubkey: this.pubkey,\r\n      identifier: this.replaceableDTag(),\r\n      relays\r\n    });\r\n  } else if (relays.length > 0) {\r\n    return nip193.neventEncode({\r\n      id: this.tagId(),\r\n      relays,\r\n      author: this.pubkey\r\n    });\r\n  } else {\r\n    return nip193.noteEncode(this.tagId());\r\n  }\r\n}\r\n\r\n// src/events/repost.ts\r\nasync function repost(publish = true, signer) {\r\n  if (!signer && publish) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    this.ndk.assertSigner();\r\n    signer = this.ndk.signer;\r\n  }\r\n  const e = new NDKEvent(this.ndk, {\r\n    kind: getKind(this),\r\n    content: \"\"\r\n  });\r\n  e.tag(this);\r\n  if (e.kind === 16 /* GenericRepost */) {\r\n    e.tags.push([\"k\", `${this.kind}`]);\r\n  } else {\r\n    e.content = JSON.stringify(this.rawEvent());\r\n  }\r\n  if (signer)\r\n    await e.sign(signer);\r\n  if (publish)\r\n    await e.publish();\r\n  return e;\r\n}\r\nfunction getKind(event) {\r\n  if (event.kind === 1) {\r\n    return 6 /* Repost */;\r\n  }\r\n  return 16 /* GenericRepost */;\r\n}\r\n\r\n// src/thread/index.ts\r\nfunction eventsBySameAuthor(op, events) {\r\n  const eventsByAuthor = /* @__PURE__ */ new Map();\r\n  eventsByAuthor.set(op.id, op);\r\n  events.forEach((event) => {\r\n    if (event.pubkey === op.pubkey) {\r\n      eventsByAuthor.set(event.id, event);\r\n    }\r\n  });\r\n  return eventsByAuthor;\r\n}\r\nvar hasMarkers = (event, tagType) => {\r\n  return event.getMatchingTags(tagType).some((tag) => tag[3] && tag[3] !== \"\");\r\n};\r\nfunction eventIsReply(op, event, threadIds = /* @__PURE__ */ new Set(), tagType) {\r\n  tagType ??= op.tagType();\r\n  const tags = event.getMatchingTags(tagType);\r\n  threadIds.add(op.tagId());\r\n  if (threadIds.has(event.tagId()))\r\n    return false;\r\n  const heedExplicitReplyMarker = () => {\r\n    let eventIsTagged = false;\r\n    for (const tag of tags) {\r\n      if (tag[3] === \"reply\")\r\n        return threadIds.has(tag[1]);\r\n      const markerIsEmpty = tag[3] === \"\" || tag[3] === void 0;\r\n      const markerIsRoot = tag[3] === \"root\";\r\n      if (tag[1] === op.tagId() && (markerIsEmpty || markerIsRoot)) {\r\n        eventIsTagged = markerIsRoot ? \"root\" : true;\r\n      }\r\n    }\r\n    if (!eventIsTagged)\r\n      return false;\r\n    if (eventIsTagged === \"root\")\r\n      return true;\r\n  };\r\n  const explicitReplyMarker = heedExplicitReplyMarker();\r\n  if (explicitReplyMarker !== void 0)\r\n    return explicitReplyMarker;\r\n  if (hasMarkers(event, tagType))\r\n    return false;\r\n  const expectedTags = op.getMatchingTags(\"e\").map((tag) => tag[1]);\r\n  expectedTags.push(op.id);\r\n  return event.getMatchingTags(\"e\").every((tag) => expectedTags.includes(tag[1]));\r\n}\r\nfunction eventThreads(op, events) {\r\n  const eventsByAuthor = eventsBySameAuthor(op, events);\r\n  const threadEvents = events.filter((event) => eventIsPartOfThread(op, event, eventsByAuthor));\r\n  return threadEvents.sort((a, b) => a.created_at - b.created_at);\r\n}\r\nfunction getEventReplyIds(event) {\r\n  if (hasMarkers(event, event.tagType())) {\r\n    let rootTag;\r\n    let replyTags = [];\r\n    event.getMatchingTags(event.tagType()).forEach((tag) => {\r\n      if (tag[3] === \"root\")\r\n        rootTag = tag;\r\n      if (tag[3] === \"reply\")\r\n        replyTags.push(tag);\r\n    });\r\n    if (replyTags.length === 0) {\r\n      if (rootTag) {\r\n        replyTags.push(rootTag);\r\n      }\r\n    }\r\n    return replyTags.map((tag) => tag[1]);\r\n  } else {\r\n    return event.getMatchingTags(\"e\").map((tag) => tag[1]);\r\n  }\r\n}\r\nfunction isEventOriginalPost(event) {\r\n  return getEventReplyIds(event).length === 0;\r\n}\r\nfunction eventThreadIds(op, events) {\r\n  const threadIds = /* @__PURE__ */ new Map();\r\n  const threadEvents = eventThreads(op, events);\r\n  threadEvents.forEach((event) => threadIds.set(event.id, event));\r\n  return threadIds;\r\n}\r\nfunction eventReplies(op, events, threadEventIds) {\r\n  threadEventIds ??= new Set(eventThreadIds(op, events).keys());\r\n  return events.filter((event) => eventIsReply(op, event, threadEventIds));\r\n}\r\nfunction eventIsPartOfThread(op, event, eventsByAuthor) {\r\n  if (op.pubkey !== event.pubkey)\r\n    return false;\r\n  const taggedEventIds = event.getMatchingTags(\"e\").map((tag) => tag[1]);\r\n  const allTaggedEventsAreByOriginalAuthor = taggedEventIds.every((id) => eventsByAuthor.has(id));\r\n  return allTaggedEventsAreByOriginalAuthor;\r\n}\r\nfunction eventHasETagMarkers(event) {\r\n  return event.getMatchingTags(\"e\").some((tag) => tag[3]);\r\n}\r\nfunction getRootEventId(event, searchTag) {\r\n  searchTag ??= event.tagType();\r\n  const rootEventTag = getRootTag(event, searchTag);\r\n  return rootEventTag?.[1];\r\n}\r\nfunction getRootTag(event, searchTag) {\r\n  searchTag ??= event.tagType();\r\n  let rootEventTag = event.tags.find((tag) => tag[3] === \"root\");\r\n  if (!rootEventTag) {\r\n    if (eventHasETagMarkers(event))\r\n      return;\r\n    const matchingTags = event.getMatchingTags(searchTag);\r\n    if (matchingTags.length < 3)\r\n      return matchingTags[0];\r\n  }\r\n  return rootEventTag;\r\n}\r\nfunction getReplyTag(event, searchTag) {\r\n  searchTag ??= event.tagType();\r\n  let replyTag = event.tags.find((tag) => tag[3] === \"reply\");\r\n  if (replyTag)\r\n    return replyTag;\r\n  if (!replyTag)\r\n    replyTag = event.tags.find((tag) => tag[3] === \"root\");\r\n  if (!replyTag) {\r\n    if (eventHasETagMarkers(event))\r\n      return;\r\n    const matchingTags = event.getMatchingTags(searchTag);\r\n    if (matchingTags.length === 1)\r\n      return matchingTags[0];\r\n    if (matchingTags.length === 2)\r\n      return matchingTags[1];\r\n  }\r\n}\r\n\r\n// src/events/fetch-tagged-event.ts\r\nasync function fetchTaggedEvent(tag, marker) {\r\n  if (!this.ndk)\r\n    throw new Error(\"NDK instance not found\");\r\n  const t = this.getMatchingTags(tag, marker);\r\n  if (t.length === 0)\r\n    return void 0;\r\n  const [_, id, hint] = t[0];\r\n  let relay;\r\n  let event = await this.ndk.fetchEvent(id, {}, relay);\r\n  return event;\r\n}\r\nasync function fetchRootEvent() {\r\n  if (!this.ndk)\r\n    throw new Error(\"NDK instance not found\");\r\n  const rootTag = getRootTag(this);\r\n  if (!rootTag)\r\n    return void 0;\r\n  return this.ndk.fetchEventFromTag(rootTag);\r\n}\r\nasync function fetchReplyEvent() {\r\n  if (!this.ndk)\r\n    throw new Error(\"NDK instance not found\");\r\n  const replyTag = getReplyTag(this);\r\n  if (!replyTag)\r\n    return void 0;\r\n  return this.ndk.fetchEventFromTag(replyTag);\r\n}\r\n\r\n// src/events/serializer.ts\r\nfunction serialize(includeSig = false, includeId = false) {\r\n  const payload = [0, this.pubkey, this.created_at, this.kind, this.tags, this.content];\r\n  if (includeSig)\r\n    payload.push(this.sig);\r\n  if (includeId)\r\n    payload.push(this.id);\r\n  return JSON.stringify(payload);\r\n}\r\nfunction deserialize(serializedEvent) {\r\n  const eventArray = JSON.parse(serializedEvent);\r\n  const ret = {\r\n    pubkey: eventArray[1],\r\n    created_at: eventArray[2],\r\n    kind: eventArray[3],\r\n    tags: eventArray[4],\r\n    content: eventArray[5]\r\n  };\r\n  if (eventArray.length === 7)\r\n    ret.sig = eventArray[6];\r\n  if (eventArray.length === 8)\r\n    ret.id = eventArray[7];\r\n  return ret;\r\n}\r\n\r\n// src/events/validation.ts\r\nimport { sha256 } from \"@noble/hashes/sha256\";\r\nimport { bytesToHex } from \"@noble/hashes/utils\";\r\nimport { schnorr } from \"@noble/curves/secp256k1\";\r\n\r\n// src/events/signature.ts\r\nvar worker;\r\nvar processingQueue = {};\r\nfunction signatureVerificationInit(w) {\r\n  worker = w;\r\n  worker.onmessage = (msg) => {\r\n    const [eventId, result] = msg.data;\r\n    const record = processingQueue[eventId];\r\n    if (!record) {\r\n      console.error(\"No record found for event\", eventId);\r\n      return;\r\n    }\r\n    delete processingQueue[eventId];\r\n    for (const resolve of record.resolves) {\r\n      resolve(result);\r\n    }\r\n  };\r\n}\r\nasync function verifySignatureAsync(event, persist) {\r\n  const promise = new Promise((resolve) => {\r\n    const serialized = event.serialize();\r\n    let enqueue = false;\r\n    if (!processingQueue[event.id]) {\r\n      processingQueue[event.id] = { event, resolves: [] };\r\n      enqueue = true;\r\n    }\r\n    processingQueue[event.id].resolves.push(resolve);\r\n    if (!enqueue)\r\n      return;\r\n    worker.postMessage({\r\n      serialized,\r\n      id: event.id,\r\n      sig: event.sig,\r\n      pubkey: event.pubkey\r\n    });\r\n  });\r\n  return promise;\r\n}\r\n\r\n// src/events/validation.ts\r\nimport { LRUCache } from \"typescript-lru-cache\";\r\nvar PUBKEY_REGEX = /^[a-f0-9]{64}$/;\r\nfunction validate() {\r\n  if (typeof this.kind !== \"number\")\r\n    return false;\r\n  if (typeof this.content !== \"string\")\r\n    return false;\r\n  if (typeof this.created_at !== \"number\")\r\n    return false;\r\n  if (typeof this.pubkey !== \"string\")\r\n    return false;\r\n  if (!this.pubkey.match(PUBKEY_REGEX))\r\n    return false;\r\n  if (!Array.isArray(this.tags))\r\n    return false;\r\n  for (let i = 0; i < this.tags.length; i++) {\r\n    const tag = this.tags[i];\r\n    if (!Array.isArray(tag))\r\n      return false;\r\n    for (let j = 0; j < tag.length; j++) {\r\n      if (typeof tag[j] === \"object\")\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nvar verifiedEvents = new LRUCache({\r\n  maxSize: 1e3,\r\n  entryExpirationTimeInMS: 6e4\r\n});\r\nfunction verifySignature(persist) {\r\n  if (typeof this.signatureVerified === \"boolean\")\r\n    return this.signatureVerified;\r\n  const prevVerification = verifiedEvents.get(this.id);\r\n  if (prevVerification !== null) {\r\n    return this.signatureVerified = prevVerification;\r\n  }\r\n  try {\r\n    if (this.ndk?.asyncSigVerification) {\r\n      verifySignatureAsync(this, persist).then((result) => {\r\n        if (persist) {\r\n          this.signatureVerified = result;\r\n          verifiedEvents.set(this.id, result);\r\n        }\r\n        if (!result) {\r\n          this.ndk.emit(\"event:invalid-sig\", this);\r\n        }\r\n      });\r\n    } else {\r\n      const hash = sha256(new TextEncoder().encode(this.serialize()));\r\n      const res = schnorr.verify(this.sig, hash, this.pubkey);\r\n      verifiedEvents.set(this.id, res);\r\n      return this.signatureVerified = res;\r\n    }\r\n  } catch (err) {\r\n    console.error(\"Error verifying signature\", this.rawEvent(), err);\r\n    return this.signatureVerified = false;\r\n  }\r\n}\r\nfunction getEventHash() {\r\n  return getEventHashFromSerializedEvent(this.serialize());\r\n}\r\nfunction getEventHashFromSerializedEvent(serializedEvent) {\r\n  const eventHash = sha256(new TextEncoder().encode(serializedEvent));\r\n  return bytesToHex(eventHash);\r\n}\r\n\r\n// src/zap/index.ts\r\nimport { bech32 } from \"@scure/base\";\r\nimport { EventEmitter as EventEmitter3 } from \"tseep\";\r\nimport { nip57 } from \"nostr-tools\";\r\nimport createDebug from \"debug\";\r\nvar debug2 = createDebug(\"ndk:zap\");\r\nvar DEFAULT_RELAYS = [\r\n  \"wss://nos.lol\",\r\n  \"wss://relay.nostr.band\",\r\n  \"wss://relay.f7z.io\",\r\n  \"wss://relay.damus.io\",\r\n  \"wss://nostr.mom\",\r\n  \"wss://no.str.cr\"\r\n];\r\nvar NDKZap = class _NDKZap extends EventEmitter3 {\r\n  ndk;\r\n  zappedEvent;\r\n  zappedUser;\r\n  fetch = fetch;\r\n  constructor(args) {\r\n    super();\r\n    this.ndk = args.ndk;\r\n    this.zappedEvent = args.zappedEvent;\r\n    this.fetch = args._fetch || fetch;\r\n    this.zappedUser = args.zappedUser || this.ndk.getUser({ pubkey: this.zappedEvent?.pubkey });\r\n  }\r\n  /**\r\n   * Fetches the zapper's pubkey for the zapped user\r\n   */\r\n  static async getZapperPubkey(ndk, forUser) {\r\n    const zappedUser = ndk.getUser({ pubkey: forUser });\r\n    const zap = new _NDKZap({ ndk, zappedUser });\r\n    const lnurlspec = await zap.getZapSpec();\r\n    return lnurlspec?.nostrPubkey;\r\n  }\r\n  async getZapSpec() {\r\n    if (!this.zappedUser)\r\n      throw new Error(\"No user to zap was provided\");\r\n    return this.zappedUser.getZapConfiguration(this.ndk);\r\n  }\r\n  async getZapSpecWithoutCache() {\r\n    let lud06;\r\n    let lud16;\r\n    let zapEndpoint;\r\n    let profile;\r\n    if (this.zappedUser) {\r\n      if (!this.zappedUser.profile) {\r\n        await this.zappedUser.fetchProfile({ groupable: false });\r\n      }\r\n      profile = this.zappedUser.profile;\r\n      lud06 = (this.zappedUser.profile || {}).lud06;\r\n      lud16 = (this.zappedUser.profile || {}).lud16;\r\n    }\r\n    if (lud16 && !lud16.startsWith(\"LNURL\")) {\r\n      const [name, domain] = lud16.split(\"@\");\r\n      zapEndpoint = `https://${domain}/.well-known/lnurlp/${name}`;\r\n    } else if (lud06) {\r\n      const { words } = bech32.decode(lud06, 1e3);\r\n      const data = bech32.fromWords(words);\r\n      const utf8Decoder = new TextDecoder(\"utf-8\");\r\n      zapEndpoint = utf8Decoder.decode(data);\r\n    }\r\n    if (!zapEndpoint) {\r\n      debug2(\"No zap endpoint found\", profile, { lud06, lud16 });\r\n      throw new Error(\"No zap endpoint found\");\r\n    }\r\n    try {\r\n      const _fetch = this.fetch || this.ndk.httpFetch;\r\n      const response = await _fetch(zapEndpoint);\r\n      if (response.status !== 200) {\r\n        const text = await response.text();\r\n        throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\r\n      }\r\n      return await response.json();\r\n    } catch (e) {\r\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${e}`);\r\n    }\r\n  }\r\n  async getZapEndpoint() {\r\n    const zapSpec = await this.getZapSpec();\r\n    if (!zapSpec)\r\n      return;\r\n    let zapEndpointCallback;\r\n    if (zapSpec?.allowsNostr && (zapSpec?.nostrPubkey || zapSpec?.nostrPubkey)) {\r\n      zapEndpointCallback = zapSpec.callback;\r\n    }\r\n    return zapEndpointCallback;\r\n  }\r\n  /**\r\n   * Generates a kind:9734 zap request and returns the payment request\r\n   * @param amount amount to zap in millisatoshis\r\n   * @param comment optional comment to include in the zap request\r\n   * @param extraTags optional extra tags to include in the zap request\r\n   * @param relays optional relays to ask zapper to publish the zap to\r\n   * @returns the payment request\r\n   */\r\n  async createZapRequest(amount, comment, extraTags, relays, signer) {\r\n    const res = await this.generateZapRequest(amount, comment, extraTags, relays);\r\n    if (!res)\r\n      return null;\r\n    const { event, zapEndpoint } = res;\r\n    if (!event) {\r\n      throw new Error(\"No zap request event found\");\r\n    }\r\n    await event.sign(signer);\r\n    let invoice;\r\n    try {\r\n      debug2(`Getting invoice for zap request: ${zapEndpoint}`);\r\n      invoice = await this.getInvoice(event, amount, zapEndpoint);\r\n    } catch (e) {\r\n      throw new Error(\"Failed to get invoice: \" + e);\r\n    }\r\n    return invoice;\r\n  }\r\n  async getInvoice(event, amount, zapEndpoint) {\r\n    debug2(\r\n      `Fetching invoice from ${zapEndpoint}?` + new URLSearchParams({\r\n        amount: amount.toString(),\r\n        nostr: encodeURIComponent(JSON.stringify(event.rawEvent()))\r\n      })\r\n    );\r\n    const url = new URL(zapEndpoint);\r\n    url.searchParams.append(\"amount\", amount.toString());\r\n    url.searchParams.append(\"nostr\", JSON.stringify(event.rawEvent()));\r\n    debug2(`Fetching invoice from ${url.toString()}`);\r\n    const response = await fetch(url.toString());\r\n    debug2(`Got response from zap endpoint: ${zapEndpoint}`, { status: response.status });\r\n    if (response.status !== 200) {\r\n      debug2(`Received non-200 status from zap endpoint: ${zapEndpoint}`, {\r\n        status: response.status,\r\n        amount,\r\n        nostr: JSON.stringify(event.rawEvent())\r\n      });\r\n      const text = await response.text();\r\n      throw new Error(`Unable to fetch zap endpoint ${zapEndpoint}: ${text}`);\r\n    }\r\n    const body = await response.json();\r\n    return body.pr;\r\n  }\r\n  async generateZapRequest(amount, comment, extraTags, relays, signer) {\r\n    const zapEndpoint = await this.getZapEndpoint();\r\n    if (!zapEndpoint) {\r\n      throw new Error(\"No zap endpoint found\");\r\n    }\r\n    if (!this.zappedEvent && !this.zappedUser)\r\n      throw new Error(\"No zapped event or user found\");\r\n    const zapRequest = nip57.makeZapRequest({\r\n      profile: this.zappedUser.pubkey,\r\n      // set the event to null since nostr-tools doesn't support nip-33 zaps\r\n      event: null,\r\n      amount,\r\n      comment: comment || \"\",\r\n      relays: relays ?? this.relays()\r\n    });\r\n    if (this.zappedEvent) {\r\n      const tags = this.zappedEvent.referenceTags();\r\n      const nonPTags = tags.filter((tag) => tag[0] !== \"p\");\r\n      zapRequest.tags.push(...nonPTags);\r\n    }\r\n    zapRequest.tags.push([\"lnurl\", zapEndpoint]);\r\n    const event = new NDKEvent(this.ndk, zapRequest);\r\n    if (extraTags) {\r\n      event.tags = event.tags.concat(extraTags);\r\n    }\r\n    return { event, zapEndpoint };\r\n  }\r\n  /**\r\n   * @returns the relays to use for the zap request\r\n   */\r\n  relays() {\r\n    let r = [];\r\n    if (this.ndk?.pool?.relays) {\r\n      r = this.ndk.pool.urls();\r\n    }\r\n    if (!r.length) {\r\n      r = DEFAULT_RELAYS;\r\n    }\r\n    return r;\r\n  }\r\n};\r\n\r\n// src/events/index.ts\r\nvar NDKEvent = class _NDKEvent extends EventEmitter4 {\r\n  ndk;\r\n  created_at;\r\n  content = \"\";\r\n  tags = [];\r\n  kind;\r\n  id = \"\";\r\n  sig;\r\n  pubkey = \"\";\r\n  signatureVerified;\r\n  _author = void 0;\r\n  /**\r\n   * The relay that this event was first received from.\r\n   */\r\n  relay;\r\n  /**\r\n   * The relays that this event was received from and/or successfully published to.\r\n   */\r\n  onRelays = [];\r\n  constructor(ndk, event) {\r\n    super();\r\n    this.ndk = ndk;\r\n    this.created_at = event?.created_at;\r\n    this.content = event?.content || \"\";\r\n    this.tags = event?.tags || [];\r\n    this.id = event?.id || \"\";\r\n    this.sig = event?.sig;\r\n    this.pubkey = event?.pubkey || \"\";\r\n    this.kind = event?.kind;\r\n  }\r\n  /**\r\n   * Deserialize an NDKEvent from a serialized payload.\r\n   * @param ndk\r\n   * @param event\r\n   * @returns\r\n   */\r\n  static deserialize(ndk, event) {\r\n    return new _NDKEvent(ndk, deserialize(event));\r\n  }\r\n  /**\r\n   * Returns the event as is.\r\n   */\r\n  rawEvent() {\r\n    return {\r\n      created_at: this.created_at,\r\n      content: this.content,\r\n      tags: this.tags,\r\n      kind: this.kind,\r\n      pubkey: this.pubkey,\r\n      id: this.id,\r\n      sig: this.sig\r\n    };\r\n  }\r\n  set author(user) {\r\n    this.pubkey = user.pubkey;\r\n    this._author = void 0;\r\n  }\r\n  /**\r\n   * Returns an NDKUser for the author of the event.\r\n   */\r\n  get author() {\r\n    if (this._author)\r\n      return this._author;\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    const user = this.ndk.getUser({ pubkey: this.pubkey });\r\n    this._author = user;\r\n    return user;\r\n  }\r\n  tag(userOrTagOrEvent, marker, skipAuthorTag, forceTag) {\r\n    let tags = [];\r\n    const isNDKUser = userOrTagOrEvent.fetchProfile !== void 0;\r\n    if (isNDKUser) {\r\n      forceTag ??= \"p\";\r\n      const tag = [forceTag, userOrTagOrEvent.pubkey];\r\n      if (marker)\r\n        tag.push(...[\"\", marker]);\r\n      tags.push(tag);\r\n    } else if (userOrTagOrEvent instanceof _NDKEvent) {\r\n      const event = userOrTagOrEvent;\r\n      skipAuthorTag ??= event?.pubkey === this.pubkey;\r\n      tags = event.referenceTags(marker, skipAuthorTag, forceTag);\r\n      for (const pTag of event.getMatchingTags(\"p\")) {\r\n        if (pTag[1] === this.pubkey)\r\n          continue;\r\n        if (this.tags.find((t) => t[0] === \"p\" && t[1] === pTag[1]))\r\n          continue;\r\n        this.tags.push([\"p\", pTag[1]]);\r\n      }\r\n    } else if (Array.isArray(userOrTagOrEvent)) {\r\n      tags = [userOrTagOrEvent];\r\n    } else {\r\n      throw new Error(\"Invalid argument\", userOrTagOrEvent);\r\n    }\r\n    this.tags = mergeTags(this.tags, tags);\r\n  }\r\n  /**\r\n   * Return a NostrEvent object, trying to fill in missing fields\r\n   * when possible, adding tags when necessary.\r\n   * @param pubkey {string} The pubkey of the user who the event belongs to.\r\n   * @returns {Promise<NostrEvent>} A promise that resolves to a NostrEvent.\r\n   */\r\n  async toNostrEvent(pubkey) {\r\n    if (!pubkey && this.pubkey === \"\") {\r\n      const user = await this.ndk?.signer?.user();\r\n      this.pubkey = user?.pubkey || \"\";\r\n    }\r\n    if (!this.created_at) {\r\n      this.created_at = Math.floor(Date.now() / 1e3);\r\n    }\r\n    const { content, tags } = await this.generateTags();\r\n    this.content = content || \"\";\r\n    this.tags = tags;\r\n    try {\r\n      this.id = this.getEventHash();\r\n    } catch (e) {\r\n    }\r\n    return this.rawEvent();\r\n  }\r\n  serialize = serialize.bind(this);\r\n  getEventHash = getEventHash.bind(this);\r\n  validate = validate.bind(this);\r\n  verifySignature = verifySignature.bind(this);\r\n  isReplaceable = isReplaceable.bind(this);\r\n  isEphemeral = isEphemeral.bind(this);\r\n  isParamReplaceable = isParamReplaceable.bind(this);\r\n  /**\r\n   * Encodes a bech32 id.\r\n   *\r\n   * @param relays {string[]} The relays to encode in the id\r\n   * @returns {string} - Encoded naddr, note or nevent.\r\n   */\r\n  encode = encode.bind(this);\r\n  encrypt = encrypt.bind(this);\r\n  decrypt = decrypt.bind(this);\r\n  /**\r\n   * Get all tags with the given name\r\n   * @param tagName {string} The name of the tag to search for\r\n   * @returns {NDKTag[]} An array of the matching tags\r\n   */\r\n  getMatchingTags(tagName, marker) {\r\n    return this.tags.filter((tag) => tag[0] === tagName).filter((tag) => !marker || tag[3] === marker);\r\n  }\r\n  /**\r\n   * Get the first tag with the given name\r\n   * @param tagName Tag name to search for\r\n   * @returns The value of the first tag with the given name, or undefined if no such tag exists\r\n   */\r\n  tagValue(tagName) {\r\n    const tags = this.getMatchingTags(tagName);\r\n    if (tags.length === 0)\r\n      return void 0;\r\n    return tags[0][1];\r\n  }\r\n  /**\r\n   * Gets the NIP-31 \"alt\" tag of the event.\r\n   */\r\n  get alt() {\r\n    return this.tagValue(\"alt\");\r\n  }\r\n  /**\r\n   * Sets the NIP-31 \"alt\" tag of the event. Use this to set an alt tag so\r\n   * clients that don't handle a particular event kind can display something\r\n   * useful for users.\r\n   */\r\n  set alt(alt) {\r\n    this.removeTag(\"alt\");\r\n    if (alt)\r\n      this.tags.push([\"alt\", alt]);\r\n  }\r\n  /**\r\n   * Gets the NIP-33 \"d\" tag of the event.\r\n   */\r\n  get dTag() {\r\n    return this.tagValue(\"d\");\r\n  }\r\n  /**\r\n   * Sets the NIP-33 \"d\" tag of the event.\r\n   */\r\n  set dTag(value) {\r\n    this.removeTag(\"d\");\r\n    if (value)\r\n      this.tags.push([\"d\", value]);\r\n  }\r\n  /**\r\n   * Remove all tags with the given name (e.g. \"d\", \"a\", \"p\")\r\n   * @param tagName Tag name to search for and remove\r\n   * @returns {void}\r\n   */\r\n  removeTag(tagName) {\r\n    this.tags = this.tags.filter((tag) => tag[0] !== tagName);\r\n  }\r\n  /**\r\n   * Sign the event if a signer is present.\r\n   *\r\n   * It will generate tags.\r\n   * Repleacable events will have their created_at field set to the current time.\r\n   * @param signer {NDKSigner} The NDKSigner to use to sign the event\r\n   * @returns {Promise<string>} A Promise that resolves to the signature of the signed event.\r\n   */\r\n  async sign(signer) {\r\n    if (!signer) {\r\n      this.ndk?.assertSigner();\r\n      signer = this.ndk.signer;\r\n    } else {\r\n      this.author = await signer.user();\r\n    }\r\n    const nostrEvent = await this.toNostrEvent();\r\n    console.log(\"signing\", nostrEvent);\r\n    this.sig = await signer.sign(nostrEvent);\r\n    return this.sig;\r\n  }\r\n  /**\r\n   * Attempt to sign and then publish an NDKEvent to a given relaySet.\r\n   * If no relaySet is provided, the relaySet will be calculated by NDK.\r\n   * @param relaySet {NDKRelaySet} The relaySet to publish the even to.\r\n   * @returns A promise that resolves to the relays the event was published to.\r\n   */\r\n  async publish(relaySet, timeoutMs) {\r\n    if (!this.sig)\r\n      await this.sign();\r\n    if (!this.ndk)\r\n      throw new Error(\"NDKEvent must be associated with an NDK instance to publish\");\r\n    if (!relaySet) {\r\n      relaySet = this.ndk.devWriteRelaySet || calculateRelaySetFromEvent(this.ndk, this);\r\n    }\r\n    this.ndk.debug(`publish to ${relaySet.size} relays`, this.rawEvent());\r\n    if (this.kind === 5 /* EventDeletion */ && this.ndk.cacheAdapter?.deleteEvent) {\r\n      this.ndk.cacheAdapter.deleteEvent(this);\r\n    }\r\n    const relays = await relaySet.publish(this, timeoutMs);\r\n    this.onRelays = Array.from(relays);\r\n    return relays;\r\n  }\r\n  /**\r\n   * Generates tags for users, notes, and other events tagged in content.\r\n   * Will also generate random \"d\" tag for parameterized replaceable events where needed.\r\n   * @returns {ContentTag} The tags and content of the event.\r\n   */\r\n  async generateTags() {\r\n    let tags = [];\r\n    const g = await generateContentTags(this.content, this.tags);\r\n    const content = g.content;\r\n    tags = g.tags;\r\n    if (this.kind && this.isParamReplaceable()) {\r\n      const dTag = this.getMatchingTags(\"d\")[0];\r\n      if (!dTag) {\r\n        const title = this.tagValue(\"title\");\r\n        const randLength = title ? 6 : 16;\r\n        let str = [...Array(randLength)].map(() => Math.random().toString(36)[2]).join(\"\");\r\n        if (title && title.length > 0) {\r\n          str = title.replace(/[^a-z0-9]+/gi, \"-\").replace(/^-|-$/g, \"\") + \"-\" + str;\r\n        }\r\n        tags.push([\"d\", str]);\r\n      }\r\n    }\r\n    if ((this.ndk?.clientName || this.ndk?.clientNip89) && !this.tagValue(\"client\")) {\r\n      const clientTag = [\"client\", this.ndk.clientName ?? \"\"];\r\n      if (this.ndk.clientNip89)\r\n        clientTag.push(this.ndk.clientNip89);\r\n      tags.push(clientTag);\r\n    }\r\n    return { content: content || \"\", tags };\r\n  }\r\n  muted() {\r\n    const authorMutedEntry = this.ndk?.mutedIds.get(this.pubkey);\r\n    if (authorMutedEntry && authorMutedEntry === \"p\")\r\n      return \"author\";\r\n    const eventTagReference = this.tagReference();\r\n    const eventMutedEntry = this.ndk?.mutedIds.get(eventTagReference[1]);\r\n    if (eventMutedEntry && eventMutedEntry === eventTagReference[0])\r\n      return \"event\";\r\n    return null;\r\n  }\r\n  /**\r\n   * Returns the \"d\" tag of a parameterized replaceable event or throws an error if the event isn't\r\n   * a parameterized replaceable event.\r\n   * @returns {string} the \"d\" tag of the event.\r\n   */\r\n  replaceableDTag() {\r\n    if (this.kind && this.kind >= 3e4 && this.kind <= 4e4) {\r\n      const dTag = this.getMatchingTags(\"d\")[0];\r\n      const dTagId = dTag ? dTag[1] : \"\";\r\n      return dTagId;\r\n    }\r\n    throw new Error(\"Event is not a parameterized replaceable event\");\r\n  }\r\n  /**\r\n   * Provides a deduplication key for the event.\r\n   *\r\n   * For kinds 0, 3, 10k-20k this will be the event <kind>:<pubkey>\r\n   * For kinds 30k-40k this will be the event <kind>:<pubkey>:<d-tag>\r\n   * For all other kinds this will be the event id\r\n   */\r\n  deduplicationKey() {\r\n    if (this.kind === 0 || this.kind === 3 || this.kind && this.kind >= 1e4 && this.kind < 2e4) {\r\n      return `${this.kind}:${this.pubkey}`;\r\n    } else {\r\n      return this.tagId();\r\n    }\r\n  }\r\n  /**\r\n   * Returns the id of the event or, if it's a parameterized event, the generated id of the event using \"d\" tag, pubkey, and kind.\r\n   * @returns {string} The id\r\n   */\r\n  tagId() {\r\n    if (this.isParamReplaceable()) {\r\n      return this.tagAddress();\r\n    }\r\n    return this.id;\r\n  }\r\n  /**\r\n   * Returns the \"reference\" value (\"<kind>:<author-pubkey>:<d-tag>\") for this replaceable event.\r\n   * @returns {string} The id\r\n   */\r\n  tagAddress() {\r\n    if (!this.isParamReplaceable()) {\r\n      throw new Error(\"This must only be called on replaceable events\");\r\n    }\r\n    const dTagId = this.replaceableDTag();\r\n    return `${this.kind}:${this.pubkey}:${dTagId}`;\r\n  }\r\n  /**\r\n   * Determines the type of tag that can be used to reference this event from another event.\r\n   * @returns {string} The tag type\r\n   * @example\r\n   * event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\r\n   * event.tagType(); // \"a\"\r\n   */\r\n  tagType() {\r\n    return this.isParamReplaceable() ? \"a\" : \"e\";\r\n  }\r\n  /**\r\n   * Get the tag that can be used to reference this event from another event.\r\n   *\r\n   * Consider using referenceTags() instead (unless you have a good reason to use this)\r\n   *\r\n   * @example\r\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\r\n   *     event.tagReference(); // [\"a\", \"30000:pubkey:d-code\"]\r\n   *\r\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\r\n   *     event.tagReference(); // [\"e\", \"eventid\"]\r\n   * @returns {NDKTag} The NDKTag object referencing this event\r\n   */\r\n  tagReference(marker) {\r\n    let tag;\r\n    if (this.isParamReplaceable()) {\r\n      tag = [\"a\", this.tagAddress()];\r\n    } else {\r\n      tag = [\"e\", this.tagId()];\r\n    }\r\n    if (this.relay) {\r\n      tag.push(this.relay.url);\r\n    } else {\r\n      tag.push(\"\");\r\n    }\r\n    if (marker) {\r\n      tag.push(marker);\r\n    }\r\n    return tag;\r\n  }\r\n  /**\r\n   * Get the tags that can be used to reference this event from another event\r\n   * @param marker The marker to use in the tag\r\n   * @param skipAuthorTag Whether to explicitly skip adding the author tag of the event\r\n   * @param forceTag Force a specific tag to be used instead of the default \"e\" or \"a\" tag\r\n   * @example\r\n   *     event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\r\n   *     event.referenceTags(); // [[\"a\", \"30000:pubkey:d-code\"], [\"e\", \"parent-id\"]]\r\n   *\r\n   *     event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\r\n   *     event.referenceTags(); // [[\"e\", \"parent-id\"]]\r\n   * @returns {NDKTag} The NDKTag object referencing this event\r\n   */\r\n  referenceTags(marker, skipAuthorTag, forceTag) {\r\n    let tags = [];\r\n    if (this.isParamReplaceable()) {\r\n      tags = [\r\n        [forceTag ?? \"a\", this.tagAddress()],\r\n        [forceTag ?? \"e\", this.id]\r\n      ];\r\n    } else {\r\n      tags = [[forceTag ?? \"e\", this.id]];\r\n    }\r\n    if (this.relay?.url) {\r\n      tags = tags.map((tag) => {\r\n        tag.push(this.relay?.url);\r\n        return tag;\r\n      });\r\n    } else if (marker) {\r\n      tags = tags.map((tag) => {\r\n        tag.push(\"\");\r\n        return tag;\r\n      });\r\n    }\r\n    if (marker) {\r\n      tags.forEach((tag) => tag.push(marker));\r\n    }\r\n    if (!skipAuthorTag)\r\n      tags.push(...this.author.referenceTags());\r\n    return tags;\r\n  }\r\n  /**\r\n   * Provides the filter that will return matching events for this event.\r\n   *\r\n   * @example\r\n   *    event = new NDKEvent(ndk, { kind: 30000, pubkey: 'pubkey', tags: [ [\"d\", \"d-code\"] ] });\r\n   *    event.filter(); // { \"#a\": [\"30000:pubkey:d-code\"] }\r\n   * @example\r\n   *    event = new NDKEvent(ndk, { kind: 1, pubkey: 'pubkey', id: \"eventid\" });\r\n   *    event.filter(); // { \"#e\": [\"eventid\"] }\r\n   *\r\n   * @returns The filter that will return matching events for this event\r\n   */\r\n  filter() {\r\n    if (this.isParamReplaceable()) {\r\n      return { \"#a\": [this.tagId()] };\r\n    } else {\r\n      return { \"#e\": [this.tagId()] };\r\n    }\r\n  }\r\n  /**\r\n   * Create a zap request for an existing event\r\n   *\r\n   * @param amount The amount to zap in millisatoshis\r\n   * @param comment A comment to add to the zap request\r\n   * @param extraTags Extra tags to add to the zap request\r\n   * @param recipient The zap recipient (optional for events)\r\n   * @param signer The signer to use (will default to the NDK instance's signer)\r\n   */\r\n  async zap(amount, comment, extraTags, recipient, signer) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    if (!signer) {\r\n      this.ndk.assertSigner();\r\n    }\r\n    const zap = new NDKZap({\r\n      ndk: this.ndk,\r\n      zappedEvent: this,\r\n      zappedUser: recipient\r\n    });\r\n    const relays = Array.from(this.ndk.pool.relays.keys());\r\n    const paymentRequest = await zap.createZapRequest(\r\n      amount,\r\n      comment,\r\n      extraTags,\r\n      relays,\r\n      signer\r\n    );\r\n    return paymentRequest;\r\n  }\r\n  /**\r\n   * Generates a deletion event of the current event\r\n   *\r\n   * @param reason The reason for the deletion\r\n   * @param publish Whether to publish the deletion event automatically\r\n   * @returns The deletion event\r\n   */\r\n  async delete(reason, publish = true) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    this.ndk.assertSigner();\r\n    const e = new _NDKEvent(this.ndk, {\r\n      kind: 5 /* EventDeletion */,\r\n      content: reason || \"\"\r\n    });\r\n    e.tag(this);\r\n    if (publish)\r\n      await e.publish();\r\n    return e;\r\n  }\r\n  /**\r\n   * Fetch an event tagged with the given tag following relay hints if provided.\r\n   * @param tag The tag to search for\r\n   * @param marker The marker to use in the tag (e.g. \"root\")\r\n   * @returns The fetched event or null if no event was found, undefined if no matching tag was found in the event\r\n   * * @example\r\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\r\n   * const originalEvent = await replyEvent.fetchTaggedEvent(\"e\", \"reply\");\r\n   * console.log(replyEvent.encode() + \" is a reply to event \" + originalEvent?.encode());\r\n   */\r\n  fetchTaggedEvent = fetchTaggedEvent.bind(this);\r\n  /**\r\n   * Fetch the root event of the current event.\r\n   * @returns The fetched root event or null if no event was found\r\n   * @example\r\n   * const replyEvent = await ndk.fetchEvent(\"nevent1qqs8x8vnycyha73grv380gmvlury4wtmx0nr9a5ds2dngqwgu87wn6gpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3ql2vyh47mk2p0qlsku7hg0vn29faehy9hy34ygaclpn66ukqp3afqz4cwjd\")\r\n   * const rootEvent = await replyEvent.fetchRootEvent();\r\n   * console.log(replyEvent.encode() + \" is a reply in the thread \" + rootEvent?.encode());\r\n   */\r\n  fetchRootEvent = fetchRootEvent.bind(this);\r\n  /**\r\n   * Fetch the event the current event is replying to.\r\n   * @returns The fetched reply event or null if no event was found\r\n   */\r\n  fetchReplyEvent = fetchReplyEvent.bind(this);\r\n  /**\r\n   * NIP-18 reposting event.\r\n   *\r\n   * @param publish Whether to publish the reposted event automatically @default true\r\n   * @param signer The signer to use for signing the reposted event\r\n   * @returns The reposted event\r\n   *\r\n   * @function\r\n   */\r\n  repost = repost.bind(this);\r\n  /**\r\n   * React to an existing event\r\n   *\r\n   * @param content The content of the reaction\r\n   */\r\n  async react(content, publish = true) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    this.ndk.assertSigner();\r\n    const e = new _NDKEvent(this.ndk, {\r\n      kind: 7 /* Reaction */,\r\n      content\r\n    });\r\n    e.tag(this);\r\n    if (publish) {\r\n      await e.publish();\r\n    } else {\r\n      await e.sign();\r\n    }\r\n    return e;\r\n  }\r\n  /**\r\n   * Checks whether the event is valid per underlying NIPs.\r\n   *\r\n   * This method is meant to be overridden by subclasses that implement specific NIPs\r\n   * to allow the enforcement of NIP-specific validation rules.\r\n   *\r\n   * Otherwise, it will only check for basic event properties.\r\n   *\r\n   */\r\n  get isValid() {\r\n    return this.validate();\r\n  }\r\n};\r\n\r\n// src/subscription/index.ts\r\nimport { EventEmitter as EventEmitter5 } from \"tseep\";\r\nvar NDKSubscriptionCacheUsage = /* @__PURE__ */ ((NDKSubscriptionCacheUsage2) => {\r\n  NDKSubscriptionCacheUsage2[\"ONLY_CACHE\"] = \"ONLY_CACHE\";\r\n  NDKSubscriptionCacheUsage2[\"CACHE_FIRST\"] = \"CACHE_FIRST\";\r\n  NDKSubscriptionCacheUsage2[\"PARALLEL\"] = \"PARALLEL\";\r\n  NDKSubscriptionCacheUsage2[\"ONLY_RELAY\"] = \"ONLY_RELAY\";\r\n  return NDKSubscriptionCacheUsage2;\r\n})(NDKSubscriptionCacheUsage || {});\r\nvar defaultOpts = {\r\n  closeOnEose: false,\r\n  cacheUsage: \"CACHE_FIRST\" /* CACHE_FIRST */,\r\n  groupable: true,\r\n  groupableDelay: 100,\r\n  groupableDelayType: \"at-most\"\r\n};\r\nvar NDKSubscription = class extends EventEmitter5 {\r\n  subId;\r\n  filters;\r\n  opts;\r\n  pool;\r\n  skipVerification = false;\r\n  skipValidation = false;\r\n  /**\r\n   * Tracks the filters as they are executed on each relay\r\n   */\r\n  relayFilters;\r\n  relaySet;\r\n  ndk;\r\n  debug;\r\n  eoseDebug;\r\n  /**\r\n   * Events that have been seen by the subscription, with the time they were first seen.\r\n   */\r\n  eventFirstSeen = /* @__PURE__ */ new Map();\r\n  /**\r\n   * Relays that have sent an EOSE.\r\n   */\r\n  eosesSeen = /* @__PURE__ */ new Set();\r\n  /**\r\n   * Events that have been seen by the subscription per relay.\r\n   */\r\n  eventsPerRelay = /* @__PURE__ */ new Map();\r\n  /**\r\n   * The time the last event was received by the subscription.\r\n   * This is used to calculate when EOSE should be emitted.\r\n   */\r\n  lastEventReceivedAt;\r\n  internalId;\r\n  /**\r\n   * Whether the subscription should close when all relays have reached the end of the event stream.\r\n   */\r\n  closeOnEose;\r\n  constructor(ndk, filters, opts, relaySet, subId) {\r\n    super();\r\n    this.ndk = ndk;\r\n    this.pool = opts?.pool || ndk.pool;\r\n    this.opts = { ...defaultOpts, ...opts || {} };\r\n    this.filters = filters instanceof Array ? filters : [filters];\r\n    this.subId = subId || opts?.subId;\r\n    this.internalId = Math.random().toString(36).substring(7);\r\n    this.relaySet = relaySet;\r\n    this.debug = ndk.debug.extend(`subscription[${opts?.subId ?? this.internalId}]`);\r\n    this.eoseDebug = this.debug.extend(\"eose\");\r\n    this.skipVerification = opts?.skipVerification || false;\r\n    this.skipValidation = opts?.skipValidation || false;\r\n    this.closeOnEose = opts?.closeOnEose || false;\r\n    if (this.opts.cacheUsage === \"ONLY_CACHE\" /* ONLY_CACHE */ && !this.opts.closeOnEose) {\r\n      throw new Error(\"Cannot use cache-only options with a persistent subscription\");\r\n    }\r\n  }\r\n  /**\r\n   * Provides access to the first filter of the subscription for\r\n   * backwards compatibility.\r\n   */\r\n  get filter() {\r\n    return this.filters[0];\r\n  }\r\n  isGroupable() {\r\n    return this.opts?.groupable || false;\r\n  }\r\n  shouldQueryCache() {\r\n    return this.opts?.cacheUsage !== \"ONLY_RELAY\" /* ONLY_RELAY */;\r\n  }\r\n  shouldQueryRelays() {\r\n    return this.opts?.cacheUsage !== \"ONLY_CACHE\" /* ONLY_CACHE */;\r\n  }\r\n  shouldWaitForCache() {\r\n    return (\r\n      // Must want to close on EOSE; subscriptions\r\n      // that want to receive further updates must\r\n      // always hit the relay\r\n      this.opts.closeOnEose && // Cache adapter must claim to be fast\r\n      !!this.ndk.cacheAdapter?.locking && // If explicitly told to run in parallel, then\r\n      // we should not wait for the cache\r\n      this.opts.cacheUsage !== \"PARALLEL\" /* PARALLEL */\r\n    );\r\n  }\r\n  /**\r\n   * Start the subscription. This is the main method that should be called\r\n   * after creating a subscription.\r\n   */\r\n  async start() {\r\n    let cachePromise;\r\n    if (this.shouldQueryCache()) {\r\n      cachePromise = this.startWithCache();\r\n      if (this.shouldWaitForCache()) {\r\n        await cachePromise;\r\n        if (queryFullyFilled(this)) {\r\n          this.emit(\"eose\", this);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    if (this.shouldQueryRelays()) {\r\n      this.startWithRelays();\r\n    } else {\r\n      this.emit(\"eose\", this);\r\n    }\r\n    return;\r\n  }\r\n  stop() {\r\n    this.emit(\"close\", this);\r\n    this.removeAllListeners();\r\n  }\r\n  /**\r\n   * @returns Whether the subscription has an authors filter.\r\n   */\r\n  hasAuthorsFilter() {\r\n    return this.filters.some((f) => f.authors?.length);\r\n  }\r\n  async startWithCache() {\r\n    if (this.ndk.cacheAdapter?.query) {\r\n      const promise = this.ndk.cacheAdapter.query(this);\r\n      if (this.ndk.cacheAdapter.locking) {\r\n        await promise;\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Send REQ to relays\r\n   */\r\n  startWithRelays() {\r\n    if (!this.relaySet) {\r\n      this.relayFilters = calculateRelaySetsFromFilters(this.ndk, this.filters, this.pool);\r\n    } else {\r\n      this.relayFilters = /* @__PURE__ */ new Map();\r\n      for (const relay of this.relaySet.relays) {\r\n        this.relayFilters.set(relay.url, this.filters);\r\n      }\r\n    }\r\n    if (!this.relayFilters || this.relayFilters.size === 0) {\r\n      this.debug(`No relays to subscribe to`, this.pool.relays.size);\r\n      return;\r\n    }\r\n    for (const [relayUrl, filters] of this.relayFilters) {\r\n      const relay = this.pool.getRelay(relayUrl, true, true, filters);\r\n      relay.subscribe(this, filters);\r\n    }\r\n  }\r\n  // EVENT handling\r\n  /**\r\n   * Called when an event is received from a relay or the cache\r\n   * @param event\r\n   * @param relay\r\n   * @param fromCache Whether the event was received from the cache\r\n   */\r\n  eventReceived(event, relay, fromCache = false) {\r\n    if (relay) {\r\n      event.relay ??= relay;\r\n      event.onRelays.push(relay);\r\n    }\r\n    if (!relay)\r\n      relay = event.relay;\r\n    event.ndk ??= this.ndk;\r\n    if (!fromCache && relay) {\r\n      this.ndk.emit(\"event\", event, relay);\r\n    }\r\n    const eventAlreadySeen = this.eventFirstSeen.has(event.id);\r\n    if (eventAlreadySeen) {\r\n      const timeSinceFirstSeen = Date.now() - (this.eventFirstSeen.get(event.id) || 0);\r\n      if (relay) {\r\n        relay.scoreSlowerEvent(timeSinceFirstSeen);\r\n        this.trackPerRelay(event, relay);\r\n      }\r\n      this.emit(\"event:dup\", event, relay, timeSinceFirstSeen, this);\r\n      return;\r\n    }\r\n    if (!fromCache) {\r\n      if (!this.skipValidation) {\r\n        if (!event.isValid) {\r\n          this.debug(`Event failed validation`, event.rawEvent());\r\n          return;\r\n        }\r\n      }\r\n      if (event.relay?.shouldValidateEvent() !== false) {\r\n        if (!this.skipVerification) {\r\n          if (!event.verifySignature(true) && !this.ndk.asyncSigVerification) {\r\n            this.debug(`Event failed signature validation`, event);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!fromCache && relay) {\r\n      this.trackPerRelay(event, relay);\r\n      if (this.ndk.cacheAdapter) {\r\n        this.ndk.cacheAdapter.setEvent(event, this.filters, relay);\r\n      }\r\n      this.eventFirstSeen.set(event.id, Date.now());\r\n    } else {\r\n      this.eventFirstSeen.set(event.id, 0);\r\n    }\r\n    this.emit(\"event\", event, relay, this);\r\n    this.lastEventReceivedAt = Date.now();\r\n  }\r\n  trackPerRelay(event, relay) {\r\n    let events = this.eventsPerRelay.get(relay);\r\n    if (!events) {\r\n      events = /* @__PURE__ */ new Set();\r\n      this.eventsPerRelay.set(relay, events);\r\n    }\r\n    events.add(event.id);\r\n  }\r\n  // EOSE handling\r\n  eoseTimeout;\r\n  eoseReceived(relay) {\r\n    this.eosesSeen.add(relay);\r\n    let lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\r\n    const hasSeenAllEoses = this.eosesSeen.size === this.relayFilters?.size;\r\n    const queryFilled = queryFullyFilled(this);\r\n    if (queryFilled) {\r\n      this.emit(\"eose\");\r\n      if (this.opts?.closeOnEose) {\r\n        this.stop();\r\n      } else {\r\n      }\r\n    } else if (hasSeenAllEoses) {\r\n      this.emit(\"eose\");\r\n      this.eoseDebug(`All EOSEs seen`);\r\n      if (this.opts?.closeOnEose) {\r\n        this.stop();\r\n      } else {\r\n      }\r\n    } else {\r\n      let timeToWaitForNextEose = 1e3;\r\n      const percentageOfRelaysThatHaveSentEose = this.eosesSeen.size / this.relayFilters.size;\r\n      if (this.eosesSeen.size >= 2 && percentageOfRelaysThatHaveSentEose >= 0.5) {\r\n        timeToWaitForNextEose = timeToWaitForNextEose * (1 - percentageOfRelaysThatHaveSentEose);\r\n        if (this.eoseTimeout) {\r\n          clearTimeout(this.eoseTimeout);\r\n        }\r\n        const sendEoseTimeout = () => {\r\n          lastEventSeen = this.lastEventReceivedAt ? Date.now() - this.lastEventReceivedAt : void 0;\r\n          if (lastEventSeen !== void 0 && lastEventSeen < 20) {\r\n            this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\r\n          } else {\r\n            this.emit(\"eose\");\r\n            if (this.opts?.closeOnEose)\r\n              this.stop();\r\n          }\r\n        };\r\n        this.eoseTimeout = setTimeout(sendEoseTimeout, timeToWaitForNextEose);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// src/user/follows.ts\r\nasync function follows(opts, outbox, kind = 3 /* Contacts */) {\r\n  if (!this.ndk)\r\n    throw new Error(\"NDK not set\");\r\n  const contactListEvent = await this.ndk.fetchEvent(\r\n    { kinds: [kind], authors: [this.pubkey] },\r\n    opts || { groupable: false }\r\n  );\r\n  if (contactListEvent) {\r\n    const pubkeys = /* @__PURE__ */ new Set();\r\n    contactListEvent.tags.forEach((tag) => {\r\n      if (tag[0] === \"p\")\r\n        pubkeys.add(tag[1]);\r\n    });\r\n    if (outbox) {\r\n      this.ndk?.outboxTracker?.trackUsers(Array.from(pubkeys));\r\n    }\r\n    return [...pubkeys].reduce((acc, pubkey) => {\r\n      const user = new NDKUser({ pubkey });\r\n      user.ndk = this.ndk;\r\n      acc.add(user);\r\n      return acc;\r\n    }, /* @__PURE__ */ new Set());\r\n  }\r\n  return /* @__PURE__ */ new Set();\r\n}\r\n\r\n// src/user/profile.ts\r\nfunction profileFromEvent(event) {\r\n  const profile = {};\r\n  let payload;\r\n  try {\r\n    payload = JSON.parse(event.content);\r\n  } catch (error) {\r\n    throw new Error(`Failed to parse profile event: ${error}`);\r\n  }\r\n  Object.keys(payload).forEach((key) => {\r\n    switch (key) {\r\n      case \"name\":\r\n        profile.name = payload.name;\r\n        break;\r\n      case \"display_name\":\r\n        profile.displayName = payload.display_name;\r\n        break;\r\n      case \"image\":\r\n      case \"picture\":\r\n        profile.image = payload.picture || payload.image;\r\n        break;\r\n      case \"banner\":\r\n        profile.banner = payload.banner;\r\n        break;\r\n      case \"bio\":\r\n        profile.bio = payload.bio;\r\n        break;\r\n      case \"nip05\":\r\n        profile.nip05 = payload.nip05;\r\n        break;\r\n      case \"lud06\":\r\n        profile.lud06 = payload.lud06;\r\n        break;\r\n      case \"lud16\":\r\n        profile.lud16 = payload.lud16;\r\n        break;\r\n      case \"about\":\r\n        profile.about = payload.about;\r\n        break;\r\n      case \"zapService\":\r\n        profile.zapService = payload.zapService;\r\n        break;\r\n      case \"website\":\r\n        profile.website = payload.website;\r\n        break;\r\n      default:\r\n        profile[key] = payload[key];\r\n        break;\r\n    }\r\n  });\r\n  return profile;\r\n}\r\nfunction serializeProfile(profile) {\r\n  const payload = {};\r\n  for (const [key, val] of Object.entries(profile)) {\r\n    switch (key) {\r\n      case \"username\":\r\n      case \"name\":\r\n        payload.name = val;\r\n        break;\r\n      case \"displayName\":\r\n        payload.display_name = val;\r\n        break;\r\n      case \"image\":\r\n      case \"picture\":\r\n        payload.picture = val;\r\n        break;\r\n      case \"bio\":\r\n      case \"about\":\r\n        payload.about = val;\r\n        break;\r\n      default:\r\n        payload[key] = val;\r\n        break;\r\n    }\r\n  }\r\n  return JSON.stringify(payload);\r\n}\r\n\r\n// src/user/nip05.ts\r\nvar NIP05_REGEX = /^(?:([\\w.+-]+)@)?([\\w.-]+)$/;\r\nasync function getNip05For(ndk, fullname, _fetch = fetch, fetchOpts = {}) {\r\n  return await ndk.queuesNip05.add({\r\n    id: fullname,\r\n    func: async () => {\r\n      if (ndk.cacheAdapter && ndk.cacheAdapter.loadNip05) {\r\n        const profile = await ndk.cacheAdapter.loadNip05(fullname);\r\n        if (profile !== \"missing\") {\r\n          if (profile) {\r\n            const user = new NDKUser({\r\n              pubkey: profile.pubkey,\r\n              relayUrls: profile.relays,\r\n              nip46Urls: profile.nip46\r\n            });\r\n            user.ndk = ndk;\r\n            return user;\r\n          } else if (fetchOpts.cache !== \"no-cache\") {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      const match = fullname.match(NIP05_REGEX);\r\n      if (!match)\r\n        return null;\r\n      const [_, name = \"_\", domain] = match;\r\n      try {\r\n        const res = await _fetch(\r\n          `https://${domain}/.well-known/nostr.json?name=${name}`,\r\n          fetchOpts\r\n        );\r\n        const { names, relays, nip46 } = parseNIP05Result(await res.json());\r\n        const pubkey = names[name.toLowerCase()];\r\n        let profile = null;\r\n        if (pubkey) {\r\n          profile = { pubkey, relays: relays?.[pubkey], nip46: nip46?.[pubkey] };\r\n        }\r\n        if (ndk?.cacheAdapter && ndk.cacheAdapter.saveNip05) {\r\n          ndk.cacheAdapter.saveNip05(fullname, profile);\r\n        }\r\n        return profile;\r\n      } catch (_e) {\r\n        if (ndk?.cacheAdapter && ndk.cacheAdapter.saveNip05) {\r\n          ndk?.cacheAdapter.saveNip05(fullname, null);\r\n        }\r\n        console.error(\"Failed to fetch NIP05 for\", fullname, _e);\r\n        return null;\r\n      }\r\n    }\r\n  });\r\n}\r\nfunction parseNIP05Result(json) {\r\n  const result = {\r\n    names: {}\r\n  };\r\n  for (const [name, pubkey] of Object.entries(json.names)) {\r\n    if (typeof name === \"string\" && typeof pubkey === \"string\") {\r\n      result.names[name.toLowerCase()] = pubkey;\r\n    }\r\n  }\r\n  if (json.relays) {\r\n    result.relays = {};\r\n    for (const [pubkey, relays] of Object.entries(json.relays)) {\r\n      if (typeof pubkey === \"string\" && Array.isArray(relays)) {\r\n        result.relays[pubkey] = relays.filter(\r\n          (relay) => typeof relay === \"string\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n  if (json.nip46) {\r\n    result.nip46 = {};\r\n    for (const [pubkey, nip46] of Object.entries(json.nip46)) {\r\n      if (typeof pubkey === \"string\" && Array.isArray(nip46)) {\r\n        result.nip46[pubkey] = nip46.filter((relay) => typeof relay === \"string\");\r\n      }\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n// src/user/index.ts\r\nvar NDKUser = class _NDKUser {\r\n  ndk;\r\n  profile;\r\n  _npub;\r\n  _pubkey;\r\n  relayUrls = [];\r\n  nip46Urls = [];\r\n  constructor(opts) {\r\n    if (opts.npub)\r\n      this._npub = opts.npub;\r\n    if (opts.hexpubkey)\r\n      this._pubkey = opts.hexpubkey;\r\n    if (opts.pubkey)\r\n      this._pubkey = opts.pubkey;\r\n    if (opts.relayUrls)\r\n      this.relayUrls = opts.relayUrls;\r\n    if (opts.nip46Urls)\r\n      this.nip46Urls = opts.nip46Urls;\r\n  }\r\n  get npub() {\r\n    if (!this._npub) {\r\n      if (!this._pubkey)\r\n        throw new Error(\"pubkey not set\");\r\n      this._npub = nip194.npubEncode(this.pubkey);\r\n    }\r\n    return this._npub;\r\n  }\r\n  set npub(npub) {\r\n    this._npub = npub;\r\n  }\r\n  /**\r\n   * Get the user's hexpubkey\r\n   * @returns {Hexpubkey} The user's hexpubkey\r\n   *\r\n   * @deprecated Use `pubkey` instead\r\n   */\r\n  get hexpubkey() {\r\n    return this.pubkey;\r\n  }\r\n  /**\r\n   * Set the user's hexpubkey\r\n   * @param pubkey {Hexpubkey} The user's hexpubkey\r\n   * @deprecated Use `pubkey` instead\r\n   */\r\n  set hexpubkey(pubkey) {\r\n    this._pubkey = pubkey;\r\n  }\r\n  /**\r\n   * Get the user's pubkey\r\n   * @returns {string} The user's pubkey\r\n   */\r\n  get pubkey() {\r\n    if (!this._pubkey) {\r\n      if (!this._npub)\r\n        throw new Error(\"npub not set\");\r\n      this._pubkey = nip194.decode(this.npub).data;\r\n    }\r\n    return this._pubkey;\r\n  }\r\n  /**\r\n   * Set the user's pubkey\r\n   * @param pubkey {string} The user's pubkey\r\n   */\r\n  set pubkey(pubkey) {\r\n    this._pubkey = pubkey;\r\n  }\r\n  /**\r\n   * Retrieves the zapper this pubkey has designated as an issuer of zap receipts\r\n   */\r\n  async getZapConfiguration(ndk) {\r\n    ndk ??= this.ndk;\r\n    if (!ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    const process = async () => {\r\n      if (this.ndk?.cacheAdapter?.loadUsersLNURLDoc) {\r\n        const doc = await this.ndk.cacheAdapter.loadUsersLNURLDoc(this.pubkey);\r\n        if (doc !== \"missing\") {\r\n          if (doc === null)\r\n            return;\r\n          if (doc)\r\n            return doc;\r\n        }\r\n      }\r\n      const zap = new NDKZap({ ndk, zappedUser: this });\r\n      let lnurlspec;\r\n      try {\r\n        lnurlspec = await zap.getZapSpecWithoutCache();\r\n      } catch {\r\n      }\r\n      if (this.ndk?.cacheAdapter?.saveUsersLNURLDoc) {\r\n        this.ndk.cacheAdapter.saveUsersLNURLDoc(this.pubkey, lnurlspec || null);\r\n      }\r\n      if (!lnurlspec)\r\n        return;\r\n      return lnurlspec;\r\n    };\r\n    return await ndk.queuesZapConfig.add({\r\n      id: this.pubkey,\r\n      func: process\r\n    });\r\n  }\r\n  /**\r\n   * Fetches the zapper's pubkey for the zapped user\r\n   * @returns The zapper's pubkey if one can be found\r\n   */\r\n  async getZapperPubkey() {\r\n    const zapConfig = await this.getZapConfiguration();\r\n    return zapConfig?.nostrPubkey;\r\n  }\r\n  /**\r\n   * Instantiate an NDKUser from a NIP-05 string\r\n   * @param nip05Id {string} The user's NIP-05\r\n   * @param ndk {NDK} An NDK instance\r\n   * @param skipCache {boolean} Whether to skip the cache or not\r\n   * @returns {NDKUser | undefined} An NDKUser if one is found for the given NIP-05, undefined otherwise.\r\n   */\r\n  static async fromNip05(nip05Id, ndk, skipCache = false) {\r\n    if (!ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    let opts = {};\r\n    if (skipCache)\r\n      opts.cache = \"no-cache\";\r\n    const profile = await getNip05For(ndk, nip05Id, ndk?.httpFetch, opts);\r\n    if (profile) {\r\n      const user = new _NDKUser({\r\n        pubkey: profile.pubkey,\r\n        relayUrls: profile.relays,\r\n        nip46Urls: profile.nip46\r\n      });\r\n      user.ndk = ndk;\r\n      return user;\r\n    }\r\n  }\r\n  /**\r\n   * Fetch a user's profile\r\n   * @param opts {NDKSubscriptionOptions} A set of NDKSubscriptionOptions\r\n   * @returns User Profile\r\n   */\r\n  async fetchProfile(opts) {\r\n    if (!this.ndk)\r\n      throw new Error(\"NDK not set\");\r\n    if (!this.profile)\r\n      this.profile = {};\r\n    let setMetadataEvents = null;\r\n    if (this.ndk.cacheAdapter && this.ndk.cacheAdapter.fetchProfile && opts?.cacheUsage !== \"ONLY_RELAY\" /* ONLY_RELAY */) {\r\n      const profile = await this.ndk.cacheAdapter.fetchProfile(this.pubkey);\r\n      if (profile) {\r\n        this.profile = profile;\r\n        return profile;\r\n      }\r\n    }\r\n    if (!opts && // if no options have been set\r\n    this.ndk.cacheAdapter && // and we have a cache\r\n    this.ndk.cacheAdapter.locking) {\r\n      setMetadataEvents = await this.ndk.fetchEvents(\r\n        {\r\n          kinds: [0],\r\n          authors: [this.pubkey]\r\n        },\r\n        {\r\n          cacheUsage: \"ONLY_CACHE\" /* ONLY_CACHE */,\r\n          closeOnEose: true,\r\n          groupable: false\r\n        }\r\n      );\r\n      opts = {\r\n        cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */,\r\n        closeOnEose: true,\r\n        groupable: true,\r\n        groupableDelay: 250\r\n      };\r\n    }\r\n    if (!setMetadataEvents || setMetadataEvents.size === 0) {\r\n      setMetadataEvents = await this.ndk.fetchEvents(\r\n        {\r\n          kinds: [0],\r\n          authors: [this.pubkey]\r\n        },\r\n        opts\r\n      );\r\n    }\r\n    const sortedSetMetadataEvents = Array.from(setMetadataEvents).sort(\r\n      (a, b) => a.created_at - b.created_at\r\n    );\r\n    if (sortedSetMetadataEvents.length === 0)\r\n      return null;\r\n    this.profile = profileFromEvent(sortedSetMetadataEvents[0]);\r\n    if (this.profile && this.ndk.cacheAdapter && this.ndk.cacheAdapter.saveProfile) {\r\n      this.ndk.cacheAdapter.saveProfile(this.pubkey, this.profile);\r\n    }\r\n    return this.profile;\r\n  }\r\n  /**\r\n   * Returns a set of users that this user follows.\r\n   */\r\n  follows = follows.bind(this);\r\n  /** @deprecated Use referenceTags instead. */\r\n  /**\r\n   * Get the tag that can be used to reference this user in an event\r\n   * @returns {NDKTag} an NDKTag\r\n   */\r\n  tagReference() {\r\n    return [\"p\", this.pubkey];\r\n  }\r\n  /**\r\n   * Get the tags that can be used to reference this user in an event\r\n   * @returns {NDKTag[]} an array of NDKTag\r\n   */\r\n  referenceTags(marker) {\r\n    const tag = [[\"p\", this.pubkey]];\r\n    if (!marker)\r\n      return tag;\r\n    tag[0].push(\"\", marker);\r\n    return tag;\r\n  }\r\n  /**\r\n   * Publishes the current profile.\r\n   */\r\n  async publish() {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    if (!this.profile)\r\n      throw new Error(\"No profile available\");\r\n    this.ndk.assertSigner();\r\n    const event = new NDKEvent(this.ndk, {\r\n      kind: 0,\r\n      content: serializeProfile(this.profile)\r\n    });\r\n    await event.publish();\r\n  }\r\n  /**\r\n   * Add a follow to this user's contact list\r\n   *\r\n   * @param newFollow {NDKUser} The user to follow\r\n   * @param currentFollowList {Set<NDKUser>} The current follow list\r\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\r\n   * @returns {Promise<boolean>} True if the follow was added, false if the follow already exists\r\n   */\r\n  async follow(newFollow, currentFollowList, kind = 3 /* Contacts */) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    this.ndk.assertSigner();\r\n    if (!currentFollowList) {\r\n      currentFollowList = await this.follows(void 0, void 0, kind);\r\n    }\r\n    if (currentFollowList.has(newFollow)) {\r\n      return false;\r\n    }\r\n    currentFollowList.add(newFollow);\r\n    const event = new NDKEvent(this.ndk, { kind });\r\n    for (const follow of currentFollowList) {\r\n      event.tag(follow);\r\n    }\r\n    await event.publish();\r\n    return true;\r\n  }\r\n  /**\r\n   * Remove a follow from this user's contact list\r\n   *\r\n   * @param user {NDKUser} The user to unfollow\r\n   * @param currentFollowList {Set<Hexpubkey>} The current follow list\r\n   * @param kind {NDKKind} The kind to use for this contact list (defaults to `3`)\r\n   * @returns The relays were the follow list was published or false if the user wasn't found\r\n   */\r\n  async unfollow(user, currentFollowList, kind = 3 /* Contacts */) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    this.ndk.assertSigner();\r\n    if (!currentFollowList) {\r\n      currentFollowList = await this.follows(void 0, void 0, kind);\r\n    }\r\n    const newUserFollowList = /* @__PURE__ */ new Set();\r\n    let foundUser = false;\r\n    for (const follow of currentFollowList) {\r\n      if (follow.pubkey !== user.pubkey) {\r\n        newUserFollowList.add(follow);\r\n        foundUser = true;\r\n      }\r\n    }\r\n    if (!foundUser)\r\n      return false;\r\n    const event = new NDKEvent(this.ndk, { kind });\r\n    for (const follow of currentFollowList) {\r\n      event.tag(follow);\r\n    }\r\n    return await event.publish();\r\n  }\r\n  /**\r\n   * Validate a user's NIP-05 identifier (usually fetched from their kind:0 profile data)\r\n   *\r\n   * @param nip05Id The NIP-05 string to validate\r\n   * @returns {Promise<boolean | null>} True if the NIP-05 is found and matches this user's pubkey,\r\n   * False if the NIP-05 is found but doesn't match this user's pubkey,\r\n   * null if the NIP-05 isn't found on the domain or we're unable to verify (because of network issues, etc.)\r\n   */\r\n  async validateNip05(nip05Id) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    const profilePointer = await getNip05For(this.ndk, nip05Id);\r\n    if (profilePointer === null)\r\n      return null;\r\n    return profilePointer.pubkey === this.pubkey;\r\n  }\r\n  /**\r\n   * Zap a user\r\n   *\r\n   * @param amount The amount to zap in millisatoshis\r\n   * @param comment A comment to add to the zap request\r\n   * @param extraTags Extra tags to add to the zap request\r\n   * @param signer The signer to use (will default to the NDK instance's signer)\r\n   */\r\n  async zap(amount, comment, extraTags, signer) {\r\n    if (!this.ndk)\r\n      throw new Error(\"No NDK instance found\");\r\n    if (!signer) {\r\n      this.ndk.assertSigner();\r\n    }\r\n    const zap = new NDKZap({\r\n      ndk: this.ndk,\r\n      zappedUser: this\r\n    });\r\n    const relays = Array.from(this.ndk.pool.relays.keys());\r\n    const paymentRequest = await zap.createZapRequest(\r\n      amount,\r\n      comment,\r\n      extraTags,\r\n      relays,\r\n      signer\r\n    );\r\n    return paymentRequest;\r\n  }\r\n};\r\n\r\n// src/events/kinds/lists/index.ts\r\nvar NDKList = class _NDKList extends NDKEvent {\r\n  _encryptedTags;\r\n  /**\r\n   * Stores the number of bytes the content was before decryption\r\n   * to expire the cache when the content changes.\r\n   */\r\n  encryptedTagsLength;\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 30001 /* CategorizedBookmarkList */;\r\n  }\r\n  /**\r\n   * Wrap a NDKEvent into a NDKList\r\n   */\r\n  static from(ndkEvent) {\r\n    return new _NDKList(ndkEvent.ndk, ndkEvent.rawEvent());\r\n  }\r\n  /**\r\n   * Returns the title of the list. Falls back on fetching the name tag value.\r\n   */\r\n  get title() {\r\n    const titleTag = this.tagValue(\"title\") || this.tagValue(\"name\");\r\n    if (this.kind === 3 /* Contacts */ && !titleTag) {\r\n      return \"Contacts\";\r\n    } else if (this.kind === 1e4 /* MuteList */ && !titleTag) {\r\n      return \"Mute\";\r\n    } else if (this.kind === 10001 /* PinList */ && !titleTag) {\r\n      return \"Pinned Notes\";\r\n    } else if (this.kind === 10002 /* RelayList */ && !titleTag) {\r\n      return \"Relay Metadata\";\r\n    } else if (this.kind === 10003 /* BookmarkList */ && !titleTag) {\r\n      return \"Bookmarks\";\r\n    } else if (this.kind === 10004 /* CommunityList */ && !titleTag) {\r\n      return \"Communities\";\r\n    } else if (this.kind === 10005 /* PublicChatList */ && !titleTag) {\r\n      return \"Public Chats\";\r\n    } else if (this.kind === 10006 /* BlockRelayList */ && !titleTag) {\r\n      return \"Blocked Relays\";\r\n    } else if (this.kind === 10007 /* SearchRelayList */ && !titleTag) {\r\n      return \"Search Relays\";\r\n    } else if (this.kind === 10015 /* InterestList */ && !titleTag) {\r\n      return \"Interests\";\r\n    } else if (this.kind === 10030 /* EmojiList */ && !titleTag) {\r\n      return \"Emojis\";\r\n    } else {\r\n      return titleTag ?? this.tagValue(\"d\");\r\n    }\r\n  }\r\n  /**\r\n   * Sets the title of the list.\r\n   */\r\n  set title(title) {\r\n    this.removeTag(\"title\");\r\n    this.removeTag(\"name\");\r\n    if (title) {\r\n      this.tags.push([\"title\", title]);\r\n    } else {\r\n      throw new Error(\"Title cannot be empty\");\r\n    }\r\n  }\r\n  /**\r\n   * Returns the name of the list.\r\n   * @deprecated Please use \"title\" instead.\r\n   */\r\n  get name() {\r\n    const nameTag = this.tagValue(\"name\");\r\n    if (this.kind === 3 /* Contacts */ && !nameTag) {\r\n      return \"Contacts\";\r\n    } else if (this.kind === 1e4 /* MuteList */ && !nameTag) {\r\n      return \"Mute\";\r\n    } else if (this.kind === 10001 /* PinList */ && !nameTag) {\r\n      return \"Pinned Notes\";\r\n    } else if (this.kind === 10002 /* RelayList */ && !nameTag) {\r\n      return \"Relay Metadata\";\r\n    } else if (this.kind === 10003 /* BookmarkList */ && !nameTag) {\r\n      return \"Bookmarks\";\r\n    } else if (this.kind === 10004 /* CommunityList */ && !nameTag) {\r\n      return \"Communities\";\r\n    } else if (this.kind === 10005 /* PublicChatList */ && !nameTag) {\r\n      return \"Public Chats\";\r\n    } else if (this.kind === 10006 /* BlockRelayList */ && !nameTag) {\r\n      return \"Blocked Relays\";\r\n    } else if (this.kind === 10007 /* SearchRelayList */ && !nameTag) {\r\n      return \"Search Relays\";\r\n    } else if (this.kind === 10015 /* InterestList */ && !nameTag) {\r\n      return \"Interests\";\r\n    } else if (this.kind === 10030 /* EmojiList */ && !nameTag) {\r\n      return \"Emojis\";\r\n    } else {\r\n      return nameTag ?? this.tagValue(\"d\");\r\n    }\r\n  }\r\n  /**\r\n   * Sets the name of the list.\r\n   * @deprecated Please use \"title\" instead. This method will use the `title` tag instead.\r\n   */\r\n  set name(name) {\r\n    this.removeTag(\"name\");\r\n    if (name) {\r\n      this.tags.push([\"title\", name]);\r\n    } else {\r\n      throw new Error(\"Name cannot be empty\");\r\n    }\r\n  }\r\n  /**\r\n   * Returns the description of the list.\r\n   */\r\n  get description() {\r\n    return this.tagValue(\"description\");\r\n  }\r\n  /**\r\n   * Sets the description of the list.\r\n   */\r\n  set description(name) {\r\n    if (name) {\r\n      this.tags.push([\"description\", name]);\r\n    } else {\r\n      this.removeTag(\"description\");\r\n    }\r\n  }\r\n  isEncryptedTagsCacheValid() {\r\n    return !!(this._encryptedTags && this.encryptedTagsLength === this.content.length);\r\n  }\r\n  /**\r\n   * Returns the decrypted content of the list.\r\n   */\r\n  async encryptedTags(useCache = true) {\r\n    if (useCache && this.isEncryptedTagsCacheValid())\r\n      return this._encryptedTags;\r\n    if (!this.ndk)\r\n      throw new Error(\"NDK instance not set\");\r\n    if (!this.ndk.signer)\r\n      throw new Error(\"NDK signer not set\");\r\n    const user = await this.ndk.signer.user();\r\n    try {\r\n      if (this.content.length > 0) {\r\n        try {\r\n          const decryptedContent = await this.ndk.signer.decrypt(user, this.content);\r\n          const a = JSON.parse(decryptedContent);\r\n          if (a && a[0]) {\r\n            this.encryptedTagsLength = this.content.length;\r\n            return this._encryptedTags = a;\r\n          }\r\n          this.encryptedTagsLength = this.content.length;\r\n          return this._encryptedTags = [];\r\n        } catch (e) {\r\n          console.log(`error decrypting ${this.content}`);\r\n        }\r\n      }\r\n    } catch (e) {\r\n    }\r\n    return [];\r\n  }\r\n  /**\r\n   * This method can be overriden to validate that a tag is valid for this list.\r\n   *\r\n   * (i.e. the NDKPersonList can validate that items are NDKUser instances)\r\n   */\r\n  validateTag(tagValue) {\r\n    return true;\r\n  }\r\n  getItems(type) {\r\n    return this.tags.filter((tag) => tag[0] === type);\r\n  }\r\n  /**\r\n   * Returns the unecrypted items in this list.\r\n   */\r\n  get items() {\r\n    return this.tags.filter((t) => {\r\n      return ![\r\n        \"d\",\r\n        \"L\",\r\n        \"l\",\r\n        \"title\",\r\n        \"name\",\r\n        \"description\",\r\n        \"summary\",\r\n        \"image\",\r\n        \"thumb\",\r\n        \"alt\",\r\n        \"expiration\",\r\n        \"subject\",\r\n        \"client\"\r\n      ].includes(t[0]);\r\n    });\r\n  }\r\n  /**\r\n   * Adds a new item to the list.\r\n   * @param relay Relay to add\r\n   * @param mark Optional mark to add to the item\r\n   * @param encrypted Whether to encrypt the item\r\n   * @param position Where to add the item in the list (top or bottom)\r\n   */\r\n  async addItem(item, mark = void 0, encrypted = false, position = \"bottom\") {\r\n    if (!this.ndk)\r\n      throw new Error(\"NDK instance not set\");\r\n    if (!this.ndk.signer)\r\n      throw new Error(\"NDK signer not set\");\r\n    let tags;\r\n    if (item instanceof NDKEvent) {\r\n      tags = [item.tagReference(mark)];\r\n    } else if (item instanceof NDKUser) {\r\n      tags = item.referenceTags();\r\n    } else if (item instanceof NDKRelay) {\r\n      tags = item.referenceTags();\r\n    } else if (Array.isArray(item)) {\r\n      tags = [item];\r\n    } else {\r\n      throw new Error(\"Invalid object type\");\r\n    }\r\n    if (mark)\r\n      tags[0].push(mark);\r\n    if (encrypted) {\r\n      const user = await this.ndk.signer.user();\r\n      const currentList = await this.encryptedTags();\r\n      if (position === \"top\")\r\n        currentList.unshift(...tags);\r\n      else\r\n        currentList.push(...tags);\r\n      this._encryptedTags = currentList;\r\n      this.encryptedTagsLength = this.content.length;\r\n      this.content = JSON.stringify(currentList);\r\n      await this.encrypt(user);\r\n    } else {\r\n      if (position === \"top\")\r\n        this.tags.unshift(...tags);\r\n      else\r\n        this.tags.push(...tags);\r\n    }\r\n    this.created_at = Math.floor(Date.now() / 1e3);\r\n    this.emit(\"change\");\r\n  }\r\n  /**\r\n   * Removes an item from the list.\r\n   *\r\n   * @param index The index of the item to remove.\r\n   * @param encrypted Whether to remove from the encrypted list or not.\r\n   */\r\n  async removeItem(index, encrypted) {\r\n    if (!this.ndk)\r\n      throw new Error(\"NDK instance not set\");\r\n    if (!this.ndk.signer)\r\n      throw new Error(\"NDK signer not set\");\r\n    if (encrypted) {\r\n      const user = await this.ndk.signer.user();\r\n      const currentList = await this.encryptedTags();\r\n      currentList.splice(index, 1);\r\n      this._encryptedTags = currentList;\r\n      this.encryptedTagsLength = this.content.length;\r\n      this.content = JSON.stringify(currentList);\r\n      await this.encrypt(user);\r\n    } else {\r\n      this.tags.splice(index, 1);\r\n    }\r\n    this.created_at = Math.floor(Date.now() / 1e3);\r\n    this.emit(\"change\");\r\n    return this;\r\n  }\r\n  /**\r\n   * Creates a filter that will result in fetching\r\n   * the items of this list\r\n   * @example\r\n   * const list = new NDKList(...);\r\n   * const filters = list.filterForItems();\r\n   * const events = await ndk.fetchEvents(filters);\r\n   */\r\n  filterForItems() {\r\n    const ids = /* @__PURE__ */ new Set();\r\n    const nip33Queries = /* @__PURE__ */ new Map();\r\n    const filters = [];\r\n    for (const tag of this.items) {\r\n      if (tag[0] === \"e\" && tag[1]) {\r\n        ids.add(tag[1]);\r\n      } else if (tag[0] === \"a\" && tag[1]) {\r\n        const [kind, pubkey, dTag] = tag[1].split(\":\");\r\n        if (!kind || !pubkey)\r\n          continue;\r\n        const key = `${kind}:${pubkey}`;\r\n        const item = nip33Queries.get(key) || [];\r\n        item.push(dTag || \"\");\r\n        nip33Queries.set(key, item);\r\n      }\r\n    }\r\n    if (ids.size > 0) {\r\n      filters.push({ ids: Array.from(ids) });\r\n    }\r\n    if (nip33Queries.size > 0) {\r\n      for (const [key, values] of nip33Queries.entries()) {\r\n        const [kind, pubkey] = key.split(\":\");\r\n        filters.push({\r\n          kinds: [parseInt(kind)],\r\n          authors: [pubkey],\r\n          \"#d\": values\r\n        });\r\n      }\r\n    }\r\n    return filters;\r\n  }\r\n};\r\nvar lists_default = NDKList;\r\n\r\n// src/user/pin.ts\r\nasync function pinEvent(user, event, pinEvent2, publish) {\r\n  const kind = 10001 /* PinList */;\r\n  if (!user.ndk)\r\n    throw new Error(\"No NDK instance found\");\r\n  user.ndk.assertSigner();\r\n  if (!pinEvent2) {\r\n    const events = await user.ndk.fetchEvents(\r\n      { kinds: [kind], authors: [user.pubkey] },\r\n      { cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */ }\r\n    );\r\n    if (events.size > 0) {\r\n      pinEvent2 = lists_default.from(Array.from(events)[0]);\r\n    } else {\r\n      pinEvent2 = new NDKEvent(user.ndk, {\r\n        kind\r\n      });\r\n    }\r\n  }\r\n  pinEvent2.tag(event);\r\n  if (publish) {\r\n    await pinEvent2.publish();\r\n  }\r\n  return pinEvent2;\r\n}\r\n\r\n// src/events/kinds/article.ts\r\nvar NDKArticle = class _NDKArticle extends NDKEvent {\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 30023 /* Article */;\r\n  }\r\n  /**\r\n   * Creates a NDKArticle from an existing NDKEvent.\r\n   *\r\n   * @param event NDKEvent to create the NDKArticle from.\r\n   * @returns NDKArticle\r\n   */\r\n  static from(event) {\r\n    return new _NDKArticle(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Getter for the article title.\r\n   *\r\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\r\n   */\r\n  get title() {\r\n    return this.tagValue(\"title\");\r\n  }\r\n  /**\r\n   * Setter for the article title.\r\n   *\r\n   * @param {string | undefined} title - The title to set for the article.\r\n   */\r\n  set title(title) {\r\n    this.removeTag(\"title\");\r\n    if (title)\r\n      this.tags.push([\"title\", title]);\r\n  }\r\n  /**\r\n   * Getter for the article image.\r\n   *\r\n   * @returns {string | undefined} - The article image if available, otherwise undefined.\r\n   */\r\n  get image() {\r\n    return this.tagValue(\"image\");\r\n  }\r\n  /**\r\n   * Setter for the article image.\r\n   *\r\n   * @param {string | undefined} image - The image to set for the article.\r\n   */\r\n  set image(image) {\r\n    this.removeTag(\"image\");\r\n    if (image)\r\n      this.tags.push([\"image\", image]);\r\n  }\r\n  get summary() {\r\n    return this.tagValue(\"summary\");\r\n  }\r\n  set summary(summary) {\r\n    this.removeTag(\"summary\");\r\n    if (summary)\r\n      this.tags.push([\"summary\", summary]);\r\n  }\r\n  /**\r\n   * Getter for the article's publication timestamp.\r\n   *\r\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\r\n   */\r\n  get published_at() {\r\n    const tag = this.tagValue(\"published_at\");\r\n    if (tag) {\r\n      let val = parseInt(tag);\r\n      if (val > 1e12) {\r\n        val = Math.floor(val / 1e3);\r\n      }\r\n      return val;\r\n    }\r\n    return void 0;\r\n  }\r\n  /**\r\n   * Setter for the article's publication timestamp.\r\n   *\r\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the article's publication date.\r\n   */\r\n  set published_at(timestamp) {\r\n    this.removeTag(\"published_at\");\r\n    if (timestamp !== void 0) {\r\n      this.tags.push([\"published_at\", timestamp.toString()]);\r\n    }\r\n  }\r\n  /**\r\n   * Generates content tags for the article.\r\n   *\r\n   * This method first checks and sets the publication date if not available,\r\n   * and then generates content tags based on the base NDKEvent class.\r\n   *\r\n   * @returns {ContentTag} - The generated content tags.\r\n   */\r\n  async generateTags() {\r\n    super.generateTags();\r\n    if (!this.published_at) {\r\n      this.published_at = this.created_at;\r\n    }\r\n    return super.generateTags();\r\n  }\r\n  /**\r\n   * Getter for the article's URL.\r\n   *\r\n   * @returns {string | undefined} - The article's URL if available, otherwise undefined.\r\n   */\r\n  get url() {\r\n    return this.tagValue(\"url\");\r\n  }\r\n  /**\r\n   * Setter for the article's URL.\r\n   *\r\n   * @param {string | undefined} url - The URL to set for the article.\r\n   */\r\n  set url(url) {\r\n    if (url) {\r\n      this.tags.push([\"url\", url]);\r\n    } else {\r\n      this.removeTag(\"url\");\r\n    }\r\n  }\r\n};\r\n\r\n// src/events/kinds/classified.ts\r\nvar NDKClassified = class _NDKClassified extends NDKEvent {\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 30402 /* Classified */;\r\n  }\r\n  /**\r\n   * Creates a NDKClassified from an existing NDKEvent.\r\n   *\r\n   * @param event NDKEvent to create the NDKClassified from.\r\n   * @returns NDKClassified\r\n   */\r\n  static from(event) {\r\n    return new _NDKClassified(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Getter for the classified title.\r\n   *\r\n   * @returns {string | undefined} - The classified title if available, otherwise undefined.\r\n   */\r\n  get title() {\r\n    return this.tagValue(\"title\");\r\n  }\r\n  /**\r\n   * Setter for the classified title.\r\n   *\r\n   * @param {string | undefined} title - The title to set for the classified.\r\n   */\r\n  set title(title) {\r\n    this.removeTag(\"title\");\r\n    if (title)\r\n      this.tags.push([\"title\", title]);\r\n  }\r\n  /**\r\n   * Getter for the classified summary.\r\n   *\r\n   * @returns {string | undefined} - The classified summary if available, otherwise undefined.\r\n   */\r\n  get summary() {\r\n    return this.tagValue(\"summary\");\r\n  }\r\n  /**\r\n   * Setter for the classified summary.\r\n   *\r\n   * @param {string | undefined} summary - The summary to set for the classified.\r\n   */\r\n  set summary(summary) {\r\n    this.removeTag(\"summary\");\r\n    if (summary)\r\n      this.tags.push([\"summary\", summary]);\r\n  }\r\n  /**\r\n   * Getter for the classified's publication timestamp.\r\n   *\r\n   * @returns {number | undefined} - The Unix timestamp of when the classified was published or undefined.\r\n   */\r\n  get published_at() {\r\n    const tag = this.tagValue(\"published_at\");\r\n    if (tag) {\r\n      return parseInt(tag);\r\n    }\r\n    return void 0;\r\n  }\r\n  /**\r\n   * Setter for the classified's publication timestamp.\r\n   *\r\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the classified's publication date.\r\n   */\r\n  set published_at(timestamp) {\r\n    this.removeTag(\"published_at\");\r\n    if (timestamp !== void 0) {\r\n      this.tags.push([\"published_at\", timestamp.toString()]);\r\n    }\r\n  }\r\n  /**\r\n   * Getter for the classified location.\r\n   *\r\n   * @returns {string | undefined} - The classified location if available, otherwise undefined.\r\n   */\r\n  get location() {\r\n    return this.tagValue(\"location\");\r\n  }\r\n  /**\r\n   * Setter for the classified location.\r\n   *\r\n   * @param {string | undefined} location - The location to set for the classified.\r\n   */\r\n  set location(location) {\r\n    this.removeTag(\"location\");\r\n    if (location)\r\n      this.tags.push([\"location\", location]);\r\n  }\r\n  /**\r\n   * Getter for the classified price.\r\n   *\r\n   * @returns {NDKClassifiedPriceTag | undefined} - The classified price if available, otherwise undefined.\r\n   */\r\n  get price() {\r\n    const priceTag = this.tags.find((tag) => tag[0] === \"price\");\r\n    if (priceTag) {\r\n      return {\r\n        amount: parseFloat(priceTag[1]),\r\n        currency: priceTag[2],\r\n        frequency: priceTag[3]\r\n      };\r\n    } else {\r\n      return void 0;\r\n    }\r\n  }\r\n  /**\r\n   * Setter for the classified price.\r\n   *\r\n   * @param price - The price to set for the classified.\r\n   */\r\n  set price(priceTag) {\r\n    if (typeof priceTag === \"string\") {\r\n      priceTag = {\r\n        amount: parseFloat(priceTag)\r\n      };\r\n    }\r\n    if (priceTag?.amount) {\r\n      const tag = [\"price\", priceTag.amount.toString()];\r\n      if (priceTag.currency)\r\n        tag.push(priceTag.currency);\r\n      if (priceTag.frequency)\r\n        tag.push(priceTag.frequency);\r\n      this.tags.push(tag);\r\n    } else {\r\n      this.removeTag(\"price\");\r\n    }\r\n  }\r\n  /**\r\n   * Generates content tags for the classified.\r\n   *\r\n   * This method first checks and sets the publication date if not available,\r\n   * and then generates content tags based on the base NDKEvent class.\r\n   *\r\n   * @returns {ContentTag} - The generated content tags.\r\n   */\r\n  async generateTags() {\r\n    super.generateTags();\r\n    if (!this.published_at) {\r\n      this.published_at = this.created_at;\r\n    }\r\n    return super.generateTags();\r\n  }\r\n};\r\n\r\n// src/events/kinds/video.ts\r\nvar NDKVideo = class _NDKVideo extends NDKEvent {\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 34235 /* HorizontalVideo */;\r\n  }\r\n  /**\r\n   * Creates a NDKArticle from an existing NDKEvent.\r\n   *\r\n   * @param event NDKEvent to create the NDKArticle from.\r\n   * @returns NDKArticle\r\n   */\r\n  static from(event) {\r\n    return new _NDKVideo(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Getter for the article title.\r\n   *\r\n   * @returns {string | undefined} - The article title if available, otherwise undefined.\r\n   */\r\n  get title() {\r\n    return this.tagValue(\"title\");\r\n  }\r\n  /**\r\n   * Setter for the article title.\r\n   *\r\n   * @param {string | undefined} title - The title to set for the article.\r\n   */\r\n  set title(title) {\r\n    this.removeTag(\"title\");\r\n    if (title)\r\n      this.tags.push([\"title\", title]);\r\n  }\r\n  /**\r\n   * Getter for the article thumbnail.\r\n   *\r\n   * @returns {string | undefined} - The article thumbnail if available, otherwise undefined.\r\n   */\r\n  get thumbnail() {\r\n    return this.tagValue(\"thumb\");\r\n  }\r\n  /**\r\n   * Setter for the article thumbnail.\r\n   *\r\n   * @param {string | undefined} thumbnail - The thumbnail to set for the article.\r\n   */\r\n  set thumbnail(thumbnail) {\r\n    this.removeTag(\"thumb\");\r\n    if (thumbnail)\r\n      this.tags.push([\"thumb\", thumbnail]);\r\n  }\r\n  get url() {\r\n    return this.tagValue(\"url\");\r\n  }\r\n  set url(url) {\r\n    this.removeTag(\"url\");\r\n    if (url)\r\n      this.tags.push([\"url\", url]);\r\n  }\r\n  /**\r\n   * Getter for the article's publication timestamp.\r\n   *\r\n   * @returns {number | undefined} - The Unix timestamp of when the article was published or undefined.\r\n   */\r\n  get published_at() {\r\n    const tag = this.tagValue(\"published_at\");\r\n    if (tag) {\r\n      return parseInt(tag);\r\n    }\r\n    return void 0;\r\n  }\r\n  /**\r\n   * Setter for the article's publication timestamp.\r\n   *\r\n   * @param {number | undefined} timestamp - The Unix timestamp to set for the article's publication date.\r\n   */\r\n  set published_at(timestamp) {\r\n    this.removeTag(\"published_at\");\r\n    if (timestamp !== void 0) {\r\n      this.tags.push([\"published_at\", timestamp.toString()]);\r\n    }\r\n  }\r\n  /**\r\n   * Generates content tags for the article.\r\n   *\r\n   * This method first checks and sets the publication date if not available,\r\n   * and then generates content tags based on the base NDKEvent class.\r\n   *\r\n   * @returns {ContentTag} - The generated content tags.\r\n   */\r\n  async generateTags() {\r\n    super.generateTags();\r\n    if (!this.published_at) {\r\n      this.published_at = this.created_at;\r\n    }\r\n    return super.generateTags();\r\n  }\r\n  get duration() {\r\n    const tag = this.tagValue(\"duration\");\r\n    if (tag) {\r\n      return parseInt(tag);\r\n    }\r\n    return void 0;\r\n  }\r\n  /**\r\n   * Setter for the video's duration\r\n   *\r\n   * @param {number | undefined} duration - The duration to set for the video (in seconds)\r\n   */\r\n  set duration(dur) {\r\n    this.removeTag(\"duration\");\r\n    if (dur !== void 0) {\r\n      this.tags.push([\"duration\", Math.floor(dur).toString()]);\r\n    }\r\n  }\r\n};\r\n\r\n// src/events/kinds/highlight.ts\r\nimport { nip19 as nip195 } from \"nostr-tools\";\r\nvar NDKHighlight = class _NDKHighlight extends NDKEvent {\r\n  _article;\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 9802 /* Highlight */;\r\n  }\r\n  static from(event) {\r\n    return new _NDKHighlight(event.ndk, event.rawEvent());\r\n  }\r\n  get url() {\r\n    return this.tagValue(\"r\");\r\n  }\r\n  /**\r\n   * Context tag.\r\n   */\r\n  set context(context) {\r\n    if (context === void 0) {\r\n      this.tags = this.tags.filter(([tag, value]) => tag !== \"context\");\r\n    } else {\r\n      this.tags = this.tags.filter(([tag, value]) => tag !== \"context\");\r\n      this.tags.push([\"context\", context]);\r\n    }\r\n  }\r\n  get context() {\r\n    return this.tags.find(([tag, value]) => tag === \"context\")?.[1] ?? void 0;\r\n  }\r\n  /**\r\n   * Will return the article URL or NDKEvent if they have already been\r\n   * set (it won't attempt to load remote events)\r\n   */\r\n  get article() {\r\n    return this._article;\r\n  }\r\n  /**\r\n   * Article the highlight is coming from.\r\n   *\r\n   * @param article Article URL or NDKEvent.\r\n   */\r\n  set article(article) {\r\n    this._article = article;\r\n    if (typeof article === \"string\") {\r\n      this.tags.push([\"r\", article]);\r\n    } else {\r\n      this.tag(article);\r\n    }\r\n  }\r\n  getArticleTag() {\r\n    return this.getMatchingTags(\"a\")[0] || this.getMatchingTags(\"e\")[0] || this.getMatchingTags(\"r\")[0];\r\n  }\r\n  async getArticle() {\r\n    if (this._article !== void 0)\r\n      return this._article;\r\n    let taggedBech32;\r\n    const articleTag = this.getArticleTag();\r\n    if (!articleTag)\r\n      return void 0;\r\n    switch (articleTag[0]) {\r\n      case \"a\":\r\n        const [kind, pubkey, identifier] = articleTag[1].split(\":\");\r\n        taggedBech32 = nip195.naddrEncode({ kind: parseInt(kind), pubkey, identifier });\r\n        break;\r\n      case \"e\":\r\n        taggedBech32 = nip195.noteEncode(articleTag[1]);\r\n        break;\r\n      case \"r\":\r\n        this._article = articleTag[1];\r\n        break;\r\n    }\r\n    if (taggedBech32) {\r\n      let a = await this.ndk?.fetchEvent(taggedBech32);\r\n      if (a) {\r\n        if (a.kind === 30023 /* Article */) {\r\n          a = NDKArticle.from(a);\r\n        }\r\n        this._article = a;\r\n      }\r\n    }\r\n    return this._article;\r\n  }\r\n};\r\n\r\n// src/events/kinds/NDKRelayList.ts\r\nvar READ_MARKER = \"read\";\r\nvar WRITE_MARKER = \"write\";\r\nvar NDKRelayList = class _NDKRelayList extends NDKEvent {\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 10002 /* RelayList */;\r\n  }\r\n  static from(ndkEvent) {\r\n    return new _NDKRelayList(ndkEvent.ndk, ndkEvent.rawEvent());\r\n  }\r\n  static async forUser(pubkey, ndk) {\r\n    const result = await this.forUsers([pubkey], ndk);\r\n    return result.get(pubkey);\r\n  }\r\n  /**\r\n   * Gathers a set of relay list events for a given set of users.\r\n   * @returns A map of pubkeys to relay list.\r\n   */\r\n  static async forUsers(pubkeys, ndk) {\r\n    const pool = ndk.outboxPool || ndk.pool;\r\n    const set = /* @__PURE__ */ new Set();\r\n    for (const relay of pool.relays.values())\r\n      set.add(relay);\r\n    const relayLists = /* @__PURE__ */ new Map();\r\n    const fromContactList = /* @__PURE__ */ new Map();\r\n    const relaySet = new NDKRelaySet(set, ndk);\r\n    if (ndk.cacheAdapter?.locking) {\r\n      const cachedList = await ndk.fetchEvents(\r\n        { kinds: [3, 10002], authors: pubkeys },\r\n        { cacheUsage: \"ONLY_CACHE\" /* ONLY_CACHE */ }\r\n      );\r\n      for (const relayList of cachedList) {\r\n        if (relayList.kind === 10002)\r\n          relayLists.set(relayList.pubkey, _NDKRelayList.from(relayList));\r\n      }\r\n      for (const relayList of cachedList) {\r\n        if (relayList.kind === 3) {\r\n          const list = relayListFromKind3(ndk, relayList);\r\n          if (list)\r\n            fromContactList.set(relayList.pubkey, list);\r\n        }\r\n      }\r\n      pubkeys = pubkeys.filter(\r\n        (pubkey) => !relayLists.has(pubkey) && !fromContactList.has(pubkey)\r\n      );\r\n    }\r\n    if (pubkeys.length === 0)\r\n      return relayLists;\r\n    await Promise.all([\r\n      // Fetch all kind 10002 events\r\n      new Promise(async (resolve) => {\r\n        const lists = await ndk.fetchEvents(\r\n          { kinds: [10002], authors: pubkeys },\r\n          { closeOnEose: true, pool, groupable: false },\r\n          relaySet\r\n        );\r\n        for (const relayList of lists) {\r\n          relayLists.set(relayList.pubkey, _NDKRelayList.from(relayList));\r\n        }\r\n        resolve();\r\n      }),\r\n      // Also fetch all kind 3 events\r\n      new Promise(async (resolve) => {\r\n        const lists = await ndk.fetchEvents(\r\n          { kinds: [3], authors: pubkeys },\r\n          { closeOnEose: true, pool, groupable: false },\r\n          relaySet\r\n        );\r\n        for (const relayList of lists) {\r\n          const list = relayListFromKind3(ndk, relayList);\r\n          if (list)\r\n            fromContactList.set(relayList.pubkey, list);\r\n        }\r\n        resolve();\r\n      })\r\n    ]);\r\n    const result = /* @__PURE__ */ new Map();\r\n    for (const pubkey of pubkeys) {\r\n      const relayList = relayLists.get(pubkey) ?? fromContactList.get(pubkey);\r\n      if (relayList)\r\n        result.set(pubkey, relayList);\r\n    }\r\n    return result;\r\n  }\r\n  get readRelayUrls() {\r\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === READ_MARKER).map((tag) => tag[1]);\r\n  }\r\n  set readRelayUrls(relays) {\r\n    for (const relay of relays) {\r\n      this.tags.push([\"r\", relay, READ_MARKER]);\r\n    }\r\n  }\r\n  get writeRelayUrls() {\r\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2] || tag[2] && tag[2] === WRITE_MARKER).map((tag) => tag[1]);\r\n  }\r\n  set writeRelayUrls(relays) {\r\n    for (const relay of relays) {\r\n      this.tags.push([\"r\", relay, WRITE_MARKER]);\r\n    }\r\n  }\r\n  get bothRelayUrls() {\r\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").filter((tag) => !tag[2]).map((tag) => tag[1]);\r\n  }\r\n  set bothRelayUrls(relays) {\r\n    for (const relay of relays) {\r\n      this.tags.push([\"r\", relay]);\r\n    }\r\n  }\r\n  get relays() {\r\n    return this.tags.filter((tag) => tag[0] === \"r\" || tag[0] === \"relay\").map((tag) => tag[1]);\r\n  }\r\n};\r\nfunction relayListFromKind3(ndk, contactList) {\r\n  try {\r\n    const content = JSON.parse(contactList.content);\r\n    const relayList = new NDKRelayList(ndk);\r\n    const readRelays = /* @__PURE__ */ new Set();\r\n    const writeRelays = /* @__PURE__ */ new Set();\r\n    for (let [key, config] of Object.entries(content)) {\r\n      try {\r\n        key = normalizeRelayUrl(key);\r\n      } catch {\r\n        continue;\r\n      }\r\n      if (!config) {\r\n        readRelays.add(key);\r\n        writeRelays.add(key);\r\n      } else {\r\n        const relayConfig = config;\r\n        if (relayConfig.write)\r\n          writeRelays.add(key);\r\n        if (relayConfig.read)\r\n          readRelays.add(key);\r\n      }\r\n    }\r\n    relayList.readRelayUrls = Array.from(readRelays);\r\n    relayList.writeRelayUrls = Array.from(writeRelays);\r\n    return relayList;\r\n  } catch {\r\n  }\r\n  return void 0;\r\n}\r\n\r\n// src/events/kinds/repost.ts\r\nvar NDKRepost = class _NDKRepost extends NDKEvent {\r\n  _repostedEvents;\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n  }\r\n  static from(event) {\r\n    return new _NDKRepost(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Returns all reposted events by the current event.\r\n   *\r\n   * @param klass Optional class to convert the events to.\r\n   * @returns\r\n   */\r\n  async repostedEvents(klass, opts) {\r\n    const items = [];\r\n    if (!this.ndk)\r\n      throw new Error(\"NDK instance not set\");\r\n    if (this._repostedEvents !== void 0)\r\n      return this._repostedEvents;\r\n    for (const eventId of this.repostedEventIds()) {\r\n      const filter = filterForId(eventId);\r\n      const event = await this.ndk.fetchEvent(filter, opts);\r\n      if (event) {\r\n        items.push(klass ? klass.from(event) : event);\r\n      }\r\n    }\r\n    return items;\r\n  }\r\n  /**\r\n   * Returns the reposted event IDs.\r\n   */\r\n  repostedEventIds() {\r\n    return this.tags.filter((t) => t[0] === \"e\" || t[0] === \"a\").map((t) => t[1]);\r\n  }\r\n};\r\nfunction filterForId(id) {\r\n  if (id.match(/:/)) {\r\n    const [kind, pubkey, identifier] = id.split(\":\");\r\n    return {\r\n      kinds: [parseInt(kind)],\r\n      authors: [pubkey],\r\n      \"#d\": [identifier]\r\n    };\r\n  } else {\r\n    return { ids: [id] };\r\n  }\r\n}\r\n\r\n// src/events/kinds/nip89/NDKAppHandler.ts\r\nvar NDKAppHandlerEvent = class _NDKAppHandlerEvent extends NDKEvent {\r\n  profile;\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 31990 /* AppHandler */;\r\n  }\r\n  static from(ndkEvent) {\r\n    return new _NDKAppHandlerEvent(ndkEvent.ndk, ndkEvent.rawEvent());\r\n  }\r\n  /**\r\n   * Fetches app handler information\r\n   * If no app information is available on the kind:31990,\r\n   * we fetch the event's author's profile and return that instead.\r\n   */\r\n  async fetchProfile() {\r\n    if (this.profile === void 0 && this.content.length > 0) {\r\n      try {\r\n        const profile = JSON.parse(this.content);\r\n        if (profile && profile.name) {\r\n          return profile;\r\n        } else {\r\n          this.profile = null;\r\n        }\r\n      } catch (e) {\r\n        this.profile = null;\r\n      }\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      const author = this.author;\r\n      author.fetchProfile().then(() => {\r\n        resolve(author.profile);\r\n      }).catch(reject);\r\n    });\r\n  }\r\n};\r\n\r\n// src/events/kinds/subscriptions/amount.ts\r\nvar possibleIntervalFrequencies = [\r\n  \"daily\",\r\n  \"weekly\",\r\n  \"monthly\",\r\n  \"quarterly\",\r\n  \"yearly\"\r\n];\r\nfunction calculateTermDurationInSeconds(term) {\r\n  switch (term) {\r\n    case \"daily\":\r\n      return 24 * 60 * 60;\r\n    case \"weekly\":\r\n      return 7 * 24 * 60 * 60;\r\n    case \"monthly\":\r\n      return 30 * 24 * 60 * 60;\r\n    case \"quarterly\":\r\n      return 3 * 30 * 24 * 60 * 60;\r\n    case \"yearly\":\r\n      return 365 * 24 * 60 * 60;\r\n  }\r\n}\r\nfunction newAmount(amount, currency, term) {\r\n  return [\"amount\", amount.toString(), currency, term];\r\n}\r\nfunction parseTagToSubscriptionAmount(tag) {\r\n  const amount = parseInt(tag[1]);\r\n  if (isNaN(amount) || amount === void 0 || amount === null || amount <= 0)\r\n    return void 0;\r\n  const currency = tag[2];\r\n  if (currency === void 0 || currency === \"\")\r\n    return void 0;\r\n  const term = tag[3];\r\n  if (term === void 0)\r\n    return void 0;\r\n  if (!possibleIntervalFrequencies.includes(term))\r\n    return void 0;\r\n  return {\r\n    amount,\r\n    currency,\r\n    term\r\n  };\r\n}\r\n\r\n// src/events/kinds/subscriptions/tier.ts\r\nvar NDKSubscriptionTier = class _NDKSubscriptionTier extends NDKArticle {\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 37001 /* SubscriptionTier */;\r\n  }\r\n  /**\r\n   * Creates a new NDKSubscriptionTier from an event\r\n   * @param event\r\n   * @returns NDKSubscriptionTier\r\n   */\r\n  static from(event) {\r\n    return new _NDKSubscriptionTier(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Returns perks for this tier\r\n   */\r\n  get perks() {\r\n    return this.getMatchingTags(\"perk\").map((tag) => tag[1]).filter((perk) => perk !== void 0);\r\n  }\r\n  /**\r\n   * Adds a perk to this tier\r\n   */\r\n  addPerk(perk) {\r\n    this.tags.push([\"perk\", perk]);\r\n  }\r\n  /**\r\n   * Returns the amount for this tier\r\n   */\r\n  get amounts() {\r\n    return this.getMatchingTags(\"amount\").map((tag) => parseTagToSubscriptionAmount(tag)).filter((a) => a !== void 0);\r\n  }\r\n  /**\r\n   * Adds an amount to this tier\r\n   * @param amount Amount in the smallest unit of the currency (e.g. cents, msats)\r\n   * @param currency Currency code. Use msat for millisatoshis\r\n   * @param term One of daily, weekly, monthly, quarterly, yearly\r\n   */\r\n  addAmount(amount, currency, term) {\r\n    this.tags.push(newAmount(amount, currency, term));\r\n  }\r\n  /**\r\n   * Sets a relay where content related to this tier can be found\r\n   * @param relayUrl URL of the relay\r\n   */\r\n  set relayUrl(relayUrl) {\r\n    this.tags.push([\"r\", relayUrl]);\r\n  }\r\n  /**\r\n   * Returns the relay URLs for this tier\r\n   */\r\n  get relayUrls() {\r\n    return this.getMatchingTags(\"r\").map((tag) => tag[1]).filter((relay) => relay !== void 0);\r\n  }\r\n  /**\r\n   * Gets the verifier pubkey for this tier. This is the pubkey that will generate\r\n   * subscription payment receipts\r\n   */\r\n  get verifierPubkey() {\r\n    return this.tagValue(\"p\");\r\n  }\r\n  /**\r\n   * Sets the verifier pubkey for this tier.\r\n   */\r\n  set verifierPubkey(pubkey) {\r\n    this.removeTag(\"p\");\r\n    if (pubkey)\r\n      this.tags.push([\"p\", pubkey]);\r\n  }\r\n  /**\r\n   * Checks if this tier is valid\r\n   */\r\n  get isValid() {\r\n    return this.title !== void 0 && // Must have a title\r\n    this.amounts.length > 0;\r\n  }\r\n};\r\n\r\n// src/events/kinds/subscriptions/subscription-start.ts\r\nimport debug3 from \"debug\";\r\nvar NDKSubscriptionStart = class _NDKSubscriptionStart extends NDKEvent {\r\n  debug;\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 7001 /* Subscribe */;\r\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug3(\"ndk:subscription-start\");\r\n  }\r\n  static from(event) {\r\n    return new _NDKSubscriptionStart(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Recipient of the subscription. I.e. The author of this event subscribes to this user.\r\n   */\r\n  get recipient() {\r\n    const pTag = this.getMatchingTags(\"p\")?.[0];\r\n    if (!pTag)\r\n      return void 0;\r\n    const user = new NDKUser({ pubkey: pTag[1] });\r\n    return user;\r\n  }\r\n  set recipient(user) {\r\n    this.removeTag(\"p\");\r\n    if (!user)\r\n      return;\r\n    this.tags.push([\"p\", user.pubkey]);\r\n  }\r\n  /**\r\n   * The amount of the subscription.\r\n   */\r\n  get amount() {\r\n    const amountTag = this.getMatchingTags(\"amount\")?.[0];\r\n    if (!amountTag)\r\n      return void 0;\r\n    return parseTagToSubscriptionAmount(amountTag);\r\n  }\r\n  set amount(amount) {\r\n    this.removeTag(\"amount\");\r\n    if (!amount)\r\n      return;\r\n    this.tags.push(newAmount(amount.amount, amount.currency, amount.term));\r\n  }\r\n  /**\r\n   * The event id or NIP-33 tag id of the tier that the user is subscribing to.\r\n   */\r\n  get tierId() {\r\n    const eTag = this.getMatchingTags(\"e\")?.[0];\r\n    const aTag = this.getMatchingTags(\"a\")?.[0];\r\n    if (!eTag || !aTag)\r\n      return void 0;\r\n    return eTag[1] ?? aTag[1];\r\n  }\r\n  set tier(tier) {\r\n    this.removeTag(\"e\");\r\n    this.removeTag(\"a\");\r\n    this.removeTag(\"event\");\r\n    if (!tier)\r\n      return;\r\n    this.tag(tier);\r\n    this.removeTag(\"p\");\r\n    this.tags.push([\"p\", tier.pubkey]);\r\n    this.tags.push([\"event\", JSON.stringify(tier.rawEvent())]);\r\n  }\r\n  /**\r\n   * Fetches the tier that the user is subscribing to.\r\n   */\r\n  async fetchTier() {\r\n    const eventTag = this.tagValue(\"event\");\r\n    if (eventTag) {\r\n      try {\r\n        const parsedEvent = JSON.parse(eventTag);\r\n        return new NDKSubscriptionTier(this.ndk, parsedEvent);\r\n      } catch {\r\n        this.debug(\"Failed to parse event tag\");\r\n      }\r\n    }\r\n    const tierId = this.tierId;\r\n    if (!tierId)\r\n      return void 0;\r\n    const e = await this.ndk?.fetchEvent(tierId);\r\n    if (!e)\r\n      return void 0;\r\n    return NDKSubscriptionTier.from(e);\r\n  }\r\n  get isValid() {\r\n    if (this.getMatchingTags(\"amount\").length !== 1) {\r\n      this.debug(\"Invalid # of amount tag\");\r\n      return false;\r\n    }\r\n    if (!this.amount) {\r\n      this.debug(\"Invalid amount tag\");\r\n      return false;\r\n    }\r\n    if (this.getMatchingTags(\"p\").length !== 1) {\r\n      this.debug(\"Invalid # of p tag\");\r\n      return false;\r\n    }\r\n    if (!this.recipient) {\r\n      this.debug(\"Invalid p tag\");\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n};\r\n\r\n// src/events/kinds/subscriptions/receipt.ts\r\nimport debug4 from \"debug\";\r\nvar NDKSubscriptionReceipt = class _NDKSubscriptionReceipt extends NDKEvent {\r\n  debug;\r\n  constructor(ndk, rawEvent) {\r\n    super(ndk, rawEvent);\r\n    this.kind ??= 7003 /* SubscriptionReceipt */;\r\n    this.debug = ndk?.debug.extend(\"subscription-start\") ?? debug4(\"ndk:subscription-start\");\r\n  }\r\n  static from(event) {\r\n    return new _NDKSubscriptionReceipt(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * This is the person being subscribed to\r\n   */\r\n  get recipient() {\r\n    const pTag = this.getMatchingTags(\"p\")?.[0];\r\n    if (!pTag)\r\n      return void 0;\r\n    const user = new NDKUser({ pubkey: pTag[1] });\r\n    return user;\r\n  }\r\n  set recipient(user) {\r\n    this.removeTag(\"p\");\r\n    if (!user)\r\n      return;\r\n    this.tags.push([\"p\", user.pubkey]);\r\n  }\r\n  /**\r\n   * This is the person subscribing\r\n   */\r\n  get subscriber() {\r\n    const PTag = this.getMatchingTags(\"P\")?.[0];\r\n    if (!PTag)\r\n      return void 0;\r\n    const user = new NDKUser({ pubkey: PTag[1] });\r\n    return user;\r\n  }\r\n  set subscriber(user) {\r\n    this.removeTag(\"P\");\r\n    if (!user)\r\n      return;\r\n    this.tags.push([\"P\", user.pubkey]);\r\n  }\r\n  set subscriptionStart(event) {\r\n    this.debug(`before setting subscription start: ${this.rawEvent}`);\r\n    this.removeTag(\"e\");\r\n    this.tag(event, \"subscription\", true);\r\n    this.debug(`after setting subscription start: ${this.rawEvent}`);\r\n  }\r\n  get tierName() {\r\n    const tag = this.getMatchingTags(\"tier\")?.[0];\r\n    return tag?.[1];\r\n  }\r\n  get isValid() {\r\n    const period = this.validPeriod;\r\n    if (!period) {\r\n      return false;\r\n    }\r\n    if (period.start > period.end) {\r\n      return false;\r\n    }\r\n    const pTags = this.getMatchingTags(\"p\");\r\n    const PTags = this.getMatchingTags(\"P\");\r\n    if (pTags.length !== 1 || PTags.length !== 1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  get validPeriod() {\r\n    const tag = this.getMatchingTags(\"valid\")?.[0];\r\n    if (!tag)\r\n      return void 0;\r\n    try {\r\n      return {\r\n        start: new Date(parseInt(tag[1]) * 1e3),\r\n        end: new Date(parseInt(tag[2]) * 1e3)\r\n      };\r\n    } catch {\r\n      return void 0;\r\n    }\r\n  }\r\n  set validPeriod(period) {\r\n    this.removeTag(\"valid\");\r\n    if (!period)\r\n      return;\r\n    this.tags.push([\r\n      \"valid\",\r\n      Math.floor(period.start.getTime() / 1e3).toString(),\r\n      Math.floor(period.end.getTime() / 1e3).toString()\r\n    ]);\r\n  }\r\n  get startPeriod() {\r\n    return this.validPeriod?.start;\r\n  }\r\n  get endPeriod() {\r\n    return this.validPeriod?.end;\r\n  }\r\n  /**\r\n   * Whether the subscription is currently active\r\n   */\r\n  isActive(time) {\r\n    time ??= /* @__PURE__ */ new Date();\r\n    const period = this.validPeriod;\r\n    if (!period)\r\n      return false;\r\n    if (time < period.start)\r\n      return false;\r\n    if (time > period.end)\r\n      return false;\r\n    return true;\r\n  }\r\n};\r\n\r\n// src/events/kinds/dvm/feedback.ts\r\nvar NDKDvmJobFeedbackStatus = /* @__PURE__ */ ((NDKDvmJobFeedbackStatus3) => {\r\n  NDKDvmJobFeedbackStatus3[\"Processing\"] = \"processing\";\r\n  NDKDvmJobFeedbackStatus3[\"Success\"] = \"success\";\r\n  NDKDvmJobFeedbackStatus3[\"Scheduled\"] = \"scheduled\";\r\n  NDKDvmJobFeedbackStatus3[\"PayReq\"] = \"payment_required\";\r\n  return NDKDvmJobFeedbackStatus3;\r\n})(NDKDvmJobFeedbackStatus || {});\r\nvar NDKDVMJobFeedback = class _NDKDVMJobFeedback extends NDKEvent {\r\n  constructor(ndk, event) {\r\n    super(ndk, event);\r\n    this.kind ??= 7e3 /* DVMJobFeedback */;\r\n  }\r\n  static async from(event) {\r\n    const e = new _NDKDVMJobFeedback(event.ndk, event.rawEvent());\r\n    if (e.encrypted)\r\n      await e.dvmDecrypt();\r\n    return e;\r\n  }\r\n  get status() {\r\n    return this.tagValue(\"status\");\r\n  }\r\n  set status(status) {\r\n    this.removeTag(\"status\");\r\n    if (status !== void 0) {\r\n      this.tags.push([\"status\", status]);\r\n    }\r\n  }\r\n  get encrypted() {\r\n    return !!this.getMatchingTags(\"encrypted\")[0];\r\n  }\r\n  async dvmDecrypt() {\r\n    await this.decrypt();\r\n    const decryptedContent = JSON.parse(this.content);\r\n    this.tags.push(...decryptedContent);\r\n  }\r\n};\r\n\r\n// src/events/kinds/dvm/request.ts\r\nvar NDKDVMRequest = class _NDKDVMRequest extends NDKEvent {\r\n  constructor(ndk, event) {\r\n    super(ndk, event);\r\n  }\r\n  static from(event) {\r\n    return new _NDKDVMRequest(event.ndk, event.rawEvent());\r\n  }\r\n  set bid(msatAmount) {\r\n    if (msatAmount === void 0) {\r\n      this.removeTag(\"bid\");\r\n    } else {\r\n      this.tags.push([\"bid\", msatAmount.toString()]);\r\n    }\r\n  }\r\n  get bid() {\r\n    const v = this.tagValue(\"bid\");\r\n    if (v === void 0)\r\n      return void 0;\r\n    return parseInt(v);\r\n  }\r\n  /**\r\n   * Adds a new input to the job\r\n   * @param args The arguments to the input\r\n   */\r\n  addInput(...args) {\r\n    this.tags.push([\"i\", ...args]);\r\n  }\r\n  /**\r\n   * Adds a new parameter to the job\r\n   */\r\n  addParam(...args) {\r\n    this.tags.push([\"param\", ...args]);\r\n  }\r\n  set output(output) {\r\n    if (output === void 0) {\r\n      this.removeTag(\"output\");\r\n    } else {\r\n      if (typeof output === \"string\")\r\n        output = [output];\r\n      this.tags.push([\"output\", ...output]);\r\n    }\r\n  }\r\n  get output() {\r\n    const outputTag = this.getMatchingTags(\"output\")[0];\r\n    return outputTag ? outputTag.slice(1) : void 0;\r\n  }\r\n  get params() {\r\n    const paramTags = this.getMatchingTags(\"param\");\r\n    return paramTags.map((t) => t.slice(1));\r\n  }\r\n  getParam(name) {\r\n    const paramTag = this.getMatchingTags(\"param\").find((t) => t[1] === name);\r\n    return paramTag ? paramTag[2] : void 0;\r\n  }\r\n  createFeedback(status) {\r\n    const feedback = new NDKDVMJobFeedback(this.ndk);\r\n    feedback.tag(this, \"job\");\r\n    feedback.status = status;\r\n    return feedback;\r\n  }\r\n  /**\r\n   * Enables job encryption for this event\r\n   * @param dvm DVM that will receive the event\r\n   * @param signer Signer to use for encryption\r\n   */\r\n  async encryption(dvm, signer) {\r\n    const dvmTags = [\"i\", \"param\", \"output\", \"relays\", \"bid\"];\r\n    const tags = this.tags.filter((t) => dvmTags.includes(t[0]));\r\n    this.tags = this.tags.filter((t) => !dvmTags.includes(t[0]));\r\n    this.content = JSON.stringify(tags);\r\n    this.tag(dvm);\r\n    this.tags.push([\"encrypted\"]);\r\n    await this.encrypt(dvm, signer);\r\n  }\r\n  /**\r\n   * Sets the DVM that will receive the event\r\n   */\r\n  set dvm(dvm) {\r\n    this.removeTag(\"p\");\r\n    if (dvm)\r\n      this.tag(dvm);\r\n  }\r\n};\r\n\r\n// src/events/kinds/dvm/NDKTranscriptionDVM.ts\r\nvar NDKTranscriptionDVM = class _NDKTranscriptionDVM extends NDKDVMRequest {\r\n  constructor(ndk, event) {\r\n    super(ndk, event);\r\n    this.kind = 5e3 /* DVMReqTextExtraction */;\r\n  }\r\n  static from(event) {\r\n    return new _NDKTranscriptionDVM(event.ndk, event.rawEvent());\r\n  }\r\n  /**\r\n   * Returns the original source of the transcription\r\n   */\r\n  get url() {\r\n    const inputTags = this.getMatchingTags(\"i\");\r\n    if (inputTags.length !== 1) {\r\n      return void 0;\r\n    }\r\n    return inputTags[0][1];\r\n  }\r\n  /**\r\n   * Getter for the title tag\r\n   */\r\n  get title() {\r\n    return this.tagValue(\"title\");\r\n  }\r\n  /**\r\n   * Setter for the title tag\r\n   */\r\n  set title(value) {\r\n    this.removeTag(\"title\");\r\n    if (value) {\r\n      this.tags.push([\"title\", value]);\r\n    }\r\n  }\r\n  /**\r\n   * Getter for the image tag\r\n   */\r\n  get image() {\r\n    return this.tagValue(\"image\");\r\n  }\r\n  /**\r\n   * Setter for the image tag\r\n   */\r\n  set image(value) {\r\n    this.removeTag(\"image\");\r\n    if (value) {\r\n      this.tags.push([\"image\", value]);\r\n    }\r\n  }\r\n};\r\n\r\n// src/events/kinds/dvm/result.ts\r\nvar NDKDVMJobResult = class _NDKDVMJobResult extends NDKEvent {\r\n  constructor(ndk, event) {\r\n    super(ndk, event);\r\n  }\r\n  static from(event) {\r\n    return new _NDKDVMJobResult(event.ndk, event.rawEvent());\r\n  }\r\n  setAmount(msat, invoice) {\r\n    this.removeTag(\"amount\");\r\n    const tag = [\"amount\", msat.toString()];\r\n    if (invoice)\r\n      tag.push(invoice);\r\n    this.tags.push(tag);\r\n  }\r\n  set result(result) {\r\n    if (result === void 0) {\r\n      this.content = \"\";\r\n    } else {\r\n      this.content = result;\r\n    }\r\n  }\r\n  get result() {\r\n    if (this.content === \"\") {\r\n      return void 0;\r\n    }\r\n    return this.content;\r\n  }\r\n  set status(status) {\r\n    this.removeTag(\"status\");\r\n    if (status !== void 0) {\r\n      this.tags.push([\"status\", status]);\r\n    }\r\n  }\r\n  get status() {\r\n    return this.tagValue(\"status\");\r\n  }\r\n  get jobRequestId() {\r\n    for (const eTag of this.getMatchingTags(\"e\")) {\r\n      if (eTag[2] === \"job\")\r\n        return eTag[1];\r\n    }\r\n    if (this.jobRequest)\r\n      return this.jobRequest.id;\r\n    return this.tagValue(\"e\");\r\n  }\r\n  set jobRequest(event) {\r\n    this.removeTag(\"request\");\r\n    if (event) {\r\n      this.kind = event.kind + 1e3;\r\n      this.tags.push([\"request\", JSON.stringify(event.rawEvent())]);\r\n      this.tag(event);\r\n    }\r\n  }\r\n  get jobRequest() {\r\n    const tag = this.tagValue(\"request\");\r\n    if (tag === void 0) {\r\n      return void 0;\r\n    }\r\n    return new NDKEvent(this.ndk, JSON.parse(tag));\r\n  }\r\n};\r\n\r\n// src/nwc/index.ts\r\nimport { EventEmitter as EventEmitter6 } from \"tseep\";\r\n\r\n// src/nwc/pay_invoice.ts\r\nasync function payInvoice(invoice) {\r\n  const ret = await this.sendReq(\"pay_invoice\", { invoice });\r\n  return ret;\r\n}\r\n\r\n// src/signers/private-key/index.ts\r\nimport { generatePrivateKey, getPublicKey, getSignature, nip04 } from \"nostr-tools\";\r\nvar NDKPrivateKeySigner = class _NDKPrivateKeySigner {\r\n  _user;\r\n  privateKey;\r\n  constructor(privateKey) {\r\n    if (privateKey) {\r\n      this.privateKey = privateKey;\r\n      this._user = new NDKUser({\r\n        pubkey: getPublicKey(this.privateKey)\r\n      });\r\n    }\r\n  }\r\n  static generate() {\r\n    const privateKey = generatePrivateKey();\r\n    return new _NDKPrivateKeySigner(privateKey);\r\n  }\r\n  async blockUntilReady() {\r\n    if (!this._user) {\r\n      throw new Error(\"NDKUser not initialized\");\r\n    }\r\n    return this._user;\r\n  }\r\n  async user() {\r\n    await this.blockUntilReady();\r\n    return this._user;\r\n  }\r\n  async sign(event) {\r\n    if (!this.privateKey) {\r\n      throw Error(\"Attempted to sign without a private key\");\r\n    }\r\n    return getSignature(event, this.privateKey);\r\n  }\r\n  async encrypt(recipient, value) {\r\n    if (!this.privateKey) {\r\n      throw Error(\"Attempted to encrypt without a private key\");\r\n    }\r\n    const recipientHexPubKey = recipient.pubkey;\r\n    return await nip04.encrypt(this.privateKey, recipientHexPubKey, value);\r\n  }\r\n  async decrypt(sender, value) {\r\n    if (!this.privateKey) {\r\n      throw Error(\"Attempted to decrypt without a private key\");\r\n    }\r\n    const senderHexPubKey = sender.pubkey;\r\n    return await nip04.decrypt(this.privateKey, senderHexPubKey, value);\r\n  }\r\n};\r\n\r\n// src/nwc/req.ts\r\nasync function sendReq(method, params) {\r\n  const event = new NDKEvent(this.ndk, {\r\n    kind: 23194 /* NostrWalletConnectReq */,\r\n    tags: [[\"p\", this.walletService.pubkey]],\r\n    content: JSON.stringify({ method, params })\r\n  });\r\n  this.debug(\"Sending request\", event.content);\r\n  await event.encrypt(this.walletService, this.signer);\r\n  await event.sign(this.signer);\r\n  this.debug(\"Request encrypted and signed\");\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const eTag = event.tagId();\r\n      if (!eTag)\r\n        throw new Error(\"Failed to get e-tag\");\r\n      const processEvent = (payload) => {\r\n        this.off(eTag, processEvent);\r\n        this.off(\"event\", processEvent);\r\n        this.debug(\"Received response\", payload);\r\n        try {\r\n          const content = JSON.parse(payload);\r\n          if (content.error)\r\n            reject(content);\r\n          resolve(content);\r\n        } catch (e) {\r\n          this.debug(\"Failed to parse response\", e);\r\n          reject({\r\n            result_type: \"error\",\r\n            error: {\r\n              code: \"failed_to_parse_response\",\r\n              message: e.message\r\n            }\r\n          });\r\n        }\r\n      };\r\n      const sub = this.ndk.subscribe(\r\n        {\r\n          kinds: [23195 /* NostrWalletConnectRes */],\r\n          \"#e\": [eTag],\r\n          limit: 1\r\n        },\r\n        { groupable: false, subId: `nwc-${method}` },\r\n        this.relaySet\r\n      );\r\n      sub.on(\"event\", async (event2) => {\r\n        await event2.decrypt(event2.author, this.signer);\r\n        processEvent(event2.content);\r\n        sub.stop();\r\n      });\r\n      this.once(eTag, processEvent);\r\n      this.once(\"event\", processEvent);\r\n      this.debug(\"Sending request to relay\", event.rawEvent());\r\n      await event.publish(this.relaySet);\r\n    } catch (e) {\r\n      this.debug(\"Failed to send request\", e, e.relayErrors);\r\n      reject({\r\n        result_type: \"error\",\r\n        error: {\r\n          code: \"failed_to_send_request\",\r\n          message: e.message\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// src/nwc/get_balance.ts\r\nasync function getBalance() {\r\n  const ret = await this.sendReq(\"get_balance\", {});\r\n  return ret;\r\n}\r\n\r\n// src/nwc/get_info.ts\r\nasync function getInfo() {\r\n  const ret = await this.sendReq(\"get_info\", {});\r\n  return ret;\r\n}\r\n\r\n// src/nwc/index.ts\r\nvar NDKNwc = class _NDKNwc extends EventEmitter6 {\r\n  ndk;\r\n  debug;\r\n  /**\r\n   * The Wallet Service's public key\r\n   */\r\n  walletService;\r\n  relaySet;\r\n  signer;\r\n  active = false;\r\n  /**\r\n   *\r\n   * @param opts: NostrWalletConnectOptions\r\n   * @returns NDKNwc\r\n   */\r\n  constructor({\r\n    ndk,\r\n    pubkey,\r\n    relayUrls,\r\n    secret\r\n  }) {\r\n    super();\r\n    this.ndk = ndk;\r\n    this.walletService = ndk.getUser({ pubkey });\r\n    this.relaySet = new NDKRelaySet(\r\n      new Set(relayUrls.map((url) => ndk.pool.getRelay(url))),\r\n      ndk\r\n    );\r\n    this.signer = new NDKPrivateKeySigner(secret);\r\n    this.debug = ndk.debug.extend(\"nwc\");\r\n    this.debug(`Starting with wallet service ${this.walletService.npub}`);\r\n  }\r\n  static async fromURI(ndk, uri) {\r\n    const u = new URL(uri);\r\n    if (u.protocol !== \"nostr+walletconnect:\") {\r\n      throw new Error(\"Invalid protocol\");\r\n    }\r\n    const nwc = new _NDKNwc({\r\n      ndk,\r\n      pubkey: u.host ?? u.pathname,\r\n      relayUrls: u.searchParams.getAll(\"relay\") ?? [\"\"],\r\n      secret: u.searchParams.get(\"secret\") ?? \"\"\r\n    });\r\n    return nwc;\r\n  }\r\n  /**\r\n   * Blocks until we're subscribed to talk to the wallet service\r\n   * @param msTimeout Timeout in ms to wait for the subscription to be ready\r\n   * @returns\r\n   */\r\n  async blockUntilReady(msTimeout) {\r\n    const signerUser = await this.signer.user();\r\n    const timeout = new Promise((_, reject) => {\r\n      setTimeout(() => {\r\n        reject(new Error(\"Timeout\"));\r\n      }, msTimeout);\r\n    });\r\n    const subPromise = new Promise((resolve) => {\r\n      const sub = this.ndk.subscribe(\r\n        {\r\n          kinds: [23195 /* NostrWalletConnectRes */],\r\n          \"#p\": [signerUser.pubkey],\r\n          limit: 1\r\n        },\r\n        { groupable: false, subId: \"nwc\" },\r\n        this.relaySet\r\n      );\r\n      sub.on(\"event\", async (event) => {\r\n        this.debug(\"received response\", event.rawEvent());\r\n        const eTag = event.tagValue(\"e\");\r\n        if (!eTag) {\r\n          this.debug(\"Received an event without an e-tag\");\r\n          return;\r\n        }\r\n        this.debug(\"received an event\", eTag);\r\n        try {\r\n          await event.decrypt(event.author, this.signer);\r\n          this.emit(eTag, event.content);\r\n        } catch (e) {\r\n          this.debug(\"Failed to decrypt event\", e);\r\n          return;\r\n        }\r\n      });\r\n      sub.on(\"eose\", () => {\r\n        this.debug(\"Subscription ready\");\r\n        this.active = true;\r\n        resolve();\r\n      });\r\n      sub.on(\"close\", () => {\r\n        this.debug(\"Subscription closed\");\r\n        this.active = false;\r\n      });\r\n    });\r\n    const promises = [subPromise];\r\n    if (msTimeout)\r\n      promises.push(timeout);\r\n    return await Promise.race(promises);\r\n  }\r\n  async sendReq(method, params) {\r\n    return await sendReq.call(this, method, params);\r\n  }\r\n  async payInvoice(invoice) {\r\n    return await payInvoice.call(this, invoice);\r\n  }\r\n  async getInfo() {\r\n    return await getInfo.call(this);\r\n  }\r\n  getBalance = getBalance.bind(this);\r\n};\r\n\r\n// src/events/kinds/simple-group/index.ts\r\nvar NDKSimpleGroup = class _NDKSimpleGroup {\r\n  ndk;\r\n  groupId;\r\n  relaySet;\r\n  constructor(ndk, groupId, relaySet) {\r\n    this.ndk = ndk;\r\n    this.groupId = groupId;\r\n    this.relaySet = relaySet;\r\n  }\r\n  /**\r\n   * Adds a user to the group using a kind:9000 event\r\n   * @param user user to add\r\n   * @param opts options\r\n   */\r\n  async addUser(user) {\r\n    const addUserEvent = _NDKSimpleGroup.generateAddUserEvent(user.pubkey, this.groupId);\r\n    addUserEvent.ndk = this.ndk;\r\n    const relays = await addUserEvent.publish(this.relaySet);\r\n    return addUserEvent;\r\n  }\r\n  async getMemberListEvent() {\r\n    const memberList = await this.ndk.fetchEvent(\r\n      {\r\n        kinds: [39002 /* GroupMembers */],\r\n        \"#d\": [this.groupId]\r\n      },\r\n      void 0,\r\n      this.relaySet\r\n    );\r\n    return memberList;\r\n  }\r\n  /**\r\n   * Gets a list of users that belong to this group\r\n   */\r\n  async getMembers() {\r\n    const members = [];\r\n    const memberPubkeys = /* @__PURE__ */ new Set();\r\n    const memberListEvent = await this.getMemberListEvent();\r\n    if (!memberListEvent)\r\n      return [];\r\n    for (const pTag of memberListEvent.getMatchingTags(\"p\")) {\r\n      const pubkey = pTag[1];\r\n      if (memberPubkeys.has(pubkey))\r\n        continue;\r\n      memberPubkeys.add(pubkey);\r\n      try {\r\n        members.push(this.ndk.getUser({ pubkey }));\r\n      } catch {\r\n      }\r\n    }\r\n    return members;\r\n  }\r\n  /**\r\n   * Generates an event that lists the members of a group.\r\n   * @param groupId\r\n   * @returns\r\n   */\r\n  static generateUserListEvent(groupId) {\r\n    const event = new NDKEvent(void 0, {\r\n      kind: 39002 /* GroupMembers */,\r\n      tags: [\r\n        [\"h\", groupId],\r\n        [\"alt\", \"Group Member List\"]\r\n      ]\r\n    });\r\n    return event;\r\n  }\r\n  /**\r\n   * Generates an event that adds a user to a group.\r\n   * @param userPubkey pubkey of the user to add\r\n   * @param groupId group to add the user to\r\n   * @returns\r\n   */\r\n  static generateAddUserEvent(userPubkey, groupId) {\r\n    const event = new NDKEvent(void 0, {\r\n      kind: 9e3 /* GroupAdminAddUser */,\r\n      tags: [[\"h\", groupId]]\r\n    });\r\n    event.tags.push([\"p\", userPubkey]);\r\n    return event;\r\n  }\r\n};\r\n\r\n// src/relay/auth-policies.ts\r\nimport createDebug2 from \"debug\";\r\nfunction disconnect(pool, debug7) {\r\n  debug7 ??= createDebug2(\"ndk:relay:auth-policies:disconnect\");\r\n  return async (relay) => {\r\n    debug7(`Relay ${relay.url} requested authentication, disconnecting`);\r\n    pool.removeRelay(relay.url);\r\n  };\r\n}\r\nasync function signAndAuth(event, relay, signer, debug7, resolve, reject) {\r\n  try {\r\n    await event.sign(signer);\r\n    await relay.auth(event);\r\n    resolve(event);\r\n  } catch (e) {\r\n    debug7(`Failed to publish auth event to relay ${relay.url}`, e);\r\n    reject(event);\r\n  }\r\n}\r\nfunction signIn({ ndk, signer, debug: debug7 } = {}) {\r\n  debug7 ??= createDebug2(\"ndk:auth-policies:signIn\");\r\n  return async (relay, challenge) => {\r\n    debug7(`Relay ${relay.url} requested authentication, signing in`);\r\n    const event = new NDKEvent(ndk);\r\n    event.kind = 22242 /* ClientAuth */;\r\n    event.tags = [\r\n      [\"relay\", relay.url],\r\n      [\"challenge\", challenge]\r\n    ];\r\n    signer ??= ndk?.signer;\r\n    return new Promise(async (resolve, reject) => {\r\n      if (signer) {\r\n        await signAndAuth(event, relay, signer, debug7, resolve, reject);\r\n      } else {\r\n        ndk?.once(\"signer:ready\", async (signer2) => {\r\n          await signAndAuth(event, relay, signer2, debug7, resolve, reject);\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\nvar NDKRelayAuthPolicies = {\r\n  disconnect,\r\n  signIn\r\n};\r\n\r\n// src/signers/nip07/index.ts\r\nimport debug5 from \"debug\";\r\nvar NDKNip07Signer = class {\r\n  _userPromise;\r\n  nip04Queue = [];\r\n  nip04Processing = false;\r\n  debug;\r\n  waitTimeout;\r\n  /**\r\n   * @param waitTimeout - The timeout in milliseconds to wait for the NIP-07 to become available\r\n   */\r\n  constructor(waitTimeout = 1e3) {\r\n    this.debug = debug5(\"ndk:nip07\");\r\n    this.waitTimeout = waitTimeout;\r\n  }\r\n  async blockUntilReady() {\r\n    await this.waitForExtension();\r\n    const pubkey = await window.nostr.getPublicKey();\r\n    if (!pubkey) {\r\n      throw new Error(\"User rejected access\");\r\n    }\r\n    return new NDKUser({ pubkey });\r\n  }\r\n  /**\r\n   * Getter for the user property.\r\n   * @returns The NDKUser instance.\r\n   */\r\n  async user() {\r\n    if (!this._userPromise) {\r\n      this._userPromise = this.blockUntilReady();\r\n    }\r\n    return this._userPromise;\r\n  }\r\n  /**\r\n   * Signs the given Nostr event.\r\n   * @param event - The Nostr event to be signed.\r\n   * @returns The signature of the signed event.\r\n   * @throws Error if the NIP-07 is not available on the window object.\r\n   */\r\n  async sign(event) {\r\n    await this.waitForExtension();\r\n    const signedEvent = await window.nostr.signEvent(event);\r\n    return signedEvent.sig;\r\n  }\r\n  async relays() {\r\n    await this.waitForExtension();\r\n    const relays = await window.nostr.getRelays?.() || {};\r\n    const activeRelays = [];\r\n    for (const url of Object.keys(relays)) {\r\n      if (relays[url].read && relays[url].write) {\r\n        activeRelays.push(url);\r\n      }\r\n    }\r\n    return activeRelays.map((url) => new NDKRelay(url));\r\n  }\r\n  async encrypt(recipient, value) {\r\n    await this.waitForExtension();\r\n    const recipientHexPubKey = recipient.pubkey;\r\n    return this.queueNip04(\"encrypt\", recipientHexPubKey, value);\r\n  }\r\n  async decrypt(sender, value) {\r\n    await this.waitForExtension();\r\n    const senderHexPubKey = sender.pubkey;\r\n    return this.queueNip04(\"decrypt\", senderHexPubKey, value);\r\n  }\r\n  async queueNip04(type, counterpartyHexpubkey, value) {\r\n    return new Promise((resolve, reject) => {\r\n      this.nip04Queue.push({\r\n        type,\r\n        counterpartyHexpubkey,\r\n        value,\r\n        resolve,\r\n        reject\r\n      });\r\n      if (!this.nip04Processing) {\r\n        this.processNip04Queue();\r\n      }\r\n    });\r\n  }\r\n  async processNip04Queue(item, retries = 0) {\r\n    if (!item && this.nip04Queue.length === 0) {\r\n      this.nip04Processing = false;\r\n      return;\r\n    }\r\n    this.nip04Processing = true;\r\n    const { type, counterpartyHexpubkey, value, resolve, reject } = item || this.nip04Queue.shift();\r\n    this.debug(\"Processing encryption queue item\", {\r\n      type,\r\n      counterpartyHexpubkey,\r\n      value\r\n    });\r\n    try {\r\n      let result;\r\n      if (type === \"encrypt\") {\r\n        result = await window.nostr.nip04.encrypt(counterpartyHexpubkey, value);\r\n      } else {\r\n        result = await window.nostr.nip04.decrypt(counterpartyHexpubkey, value);\r\n      }\r\n      resolve(result);\r\n    } catch (error) {\r\n      if (error.message && error.message.includes(\"call already executing\")) {\r\n        if (retries < 5) {\r\n          this.debug(\"Retrying encryption queue item\", {\r\n            type,\r\n            counterpartyHexpubkey,\r\n            value,\r\n            retries\r\n          });\r\n          setTimeout(() => {\r\n            this.processNip04Queue(item, retries + 1);\r\n          }, 50 * retries);\r\n          return;\r\n        }\r\n      }\r\n      reject(error);\r\n    }\r\n    this.processNip04Queue();\r\n  }\r\n  waitForExtension() {\r\n    return new Promise((resolve, reject) => {\r\n      if (window.nostr) {\r\n        resolve();\r\n        return;\r\n      }\r\n      let timerId;\r\n      const intervalId = setInterval(() => {\r\n        if (window.nostr) {\r\n          clearTimeout(timerId);\r\n          clearInterval(intervalId);\r\n          resolve();\r\n        }\r\n      }, 100);\r\n      timerId = setTimeout(() => {\r\n        clearInterval(intervalId);\r\n        reject(new Error(\"NIP-07 extension not available\"));\r\n      }, this.waitTimeout);\r\n    });\r\n  }\r\n};\r\n\r\n// src/signers/nip46/rpc.ts\r\nimport { EventEmitter as EventEmitter7 } from \"tseep\";\r\nvar NDKNostrRpc = class extends EventEmitter7 {\r\n  ndk;\r\n  signer;\r\n  relaySet;\r\n  debug;\r\n  constructor(ndk, signer, debug7, relayUrls) {\r\n    super();\r\n    this.ndk = ndk;\r\n    this.signer = signer;\r\n    this.relaySet = relayUrls ? NDKRelaySet.fromRelayUrls(relayUrls, ndk) : void 0;\r\n    this.debug = debug7.extend(\"rpc\");\r\n  }\r\n  /**\r\n   * Subscribe to a filter. This function will resolve once the subscription is ready.\r\n   */\r\n  subscribe(filter) {\r\n    const sub = this.ndk.subscribe(\r\n      filter,\r\n      {\r\n        closeOnEose: false,\r\n        groupable: false,\r\n        cacheUsage: \"ONLY_RELAY\" /* ONLY_RELAY */\r\n      },\r\n      this.relaySet\r\n    );\r\n    sub.on(\"event\", async (event) => {\r\n      try {\r\n        const parsedEvent = await this.parseEvent(event);\r\n        if (parsedEvent.method) {\r\n          this.emit(\"request\", parsedEvent);\r\n        } else {\r\n          this.emit(`response-${parsedEvent.id}`, parsedEvent);\r\n        }\r\n      } catch (e) {\r\n        this.debug(\"error parsing event\", e, event.rawEvent());\r\n      }\r\n    });\r\n    return new Promise((resolve) => {\r\n      sub.on(\"eose\", () => resolve(sub));\r\n    });\r\n  }\r\n  async parseEvent(event) {\r\n    const remoteUser = this.ndk.getUser({ pubkey: event.pubkey });\r\n    remoteUser.ndk = this.ndk;\r\n    const decryptedContent = await this.signer.decrypt(remoteUser, event.content);\r\n    const parsedContent = JSON.parse(decryptedContent);\r\n    const { id, method, params, result, error } = parsedContent;\r\n    if (method) {\r\n      return { id, pubkey: event.pubkey, method, params, event };\r\n    } else {\r\n      return { id, result, error, event };\r\n    }\r\n  }\r\n  async sendResponse(id, remotePubkey, result, kind = 24133 /* NostrConnect */, error) {\r\n    const res = { id, result };\r\n    if (error) {\r\n      res.error = error;\r\n    }\r\n    const localUser = await this.signer.user();\r\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\r\n    const event = new NDKEvent(this.ndk, {\r\n      kind,\r\n      content: JSON.stringify(res),\r\n      tags: [[\"p\", remotePubkey]],\r\n      pubkey: localUser.pubkey\r\n    });\r\n    event.content = await this.signer.encrypt(remoteUser, event.content);\r\n    await event.sign(this.signer);\r\n    await event.publish(this.relaySet);\r\n  }\r\n  /**\r\n   * Sends a request.\r\n   * @param remotePubkey\r\n   * @param method\r\n   * @param params\r\n   * @param kind\r\n   * @param id\r\n   */\r\n  async sendRequest(remotePubkey, method, params = [], kind = 24133, cb) {\r\n    const id = Math.random().toString(36).substring(7);\r\n    const localUser = await this.signer.user();\r\n    const remoteUser = this.ndk.getUser({ pubkey: remotePubkey });\r\n    const request = { id, method, params };\r\n    const promise = new Promise(() => {\r\n      const responseHandler = (response) => {\r\n        if (response.result === \"auth_url\") {\r\n          this.once(`response-${id}`, responseHandler);\r\n          this.emit(\"authUrl\", response.error);\r\n        } else if (cb) {\r\n          cb(response);\r\n        }\r\n      };\r\n      this.once(`response-${id}`, responseHandler);\r\n    });\r\n    const event = new NDKEvent(this.ndk, {\r\n      kind,\r\n      content: JSON.stringify(request),\r\n      tags: [[\"p\", remotePubkey]],\r\n      pubkey: localUser.pubkey\r\n    });\r\n    event.content = await this.signer.encrypt(remoteUser, event.content);\r\n    await event.sign(this.signer);\r\n    await event.publish(this.relaySet);\r\n    return promise;\r\n  }\r\n};\r\n\r\n// src/signers/nip46/backend/ping.ts\r\nvar PingEventHandlingStrategy = class {\r\n  async handle(backend, id, remotePubkey, params) {\r\n    const debug7 = backend.debug.extend(\"ping\");\r\n    debug7(`ping request from ${remotePubkey}`);\r\n    if (await backend.pubkeyAllowed({ id, pubkey: remotePubkey, method: \"ping\" })) {\r\n      debug7(`connection request from ${remotePubkey} allowed`);\r\n      return \"pong\";\r\n    } else {\r\n      debug7(`connection request from ${remotePubkey} rejected`);\r\n    }\r\n    return void 0;\r\n  }\r\n};\r\n\r\n// src/signers/nip46/backend/connect.ts\r\nvar ConnectEventHandlingStrategy = class {\r\n  async handle(backend, id, remotePubkey, params) {\r\n    const [_, token] = params;\r\n    const debug7 = backend.debug.extend(\"connect\");\r\n    debug7(`connection request from ${remotePubkey}`);\r\n    if (token && backend.applyToken) {\r\n      debug7(`applying token`);\r\n      await backend.applyToken(remotePubkey, token);\r\n    }\r\n    if (await backend.pubkeyAllowed({\r\n      id,\r\n      pubkey: remotePubkey,\r\n      method: \"connect\",\r\n      params: token\r\n    })) {\r\n      debug7(`connection request from ${remotePubkey} allowed`);\r\n      return \"ack\";\r\n    } else {\r\n      debug7(`connection request from ${remotePubkey} rejected`);\r\n    }\r\n    return void 0;\r\n  }\r\n};\r\n\r\n// src/signers/nip46/backend/get-public-key.ts\r\nvar GetPublicKeyHandlingStrategy = class {\r\n  async handle(backend, id, remotePubkey, params) {\r\n    return backend.localUser?.pubkey;\r\n  }\r\n};\r\n\r\n// src/signers/nip46/backend/nip04-decrypt.ts\r\nvar Nip04DecryptHandlingStrategy = class {\r\n  async handle(backend, id, remotePubkey, params) {\r\n    const [senderPubkey, payload] = params;\r\n    const senderUser = new NDKUser({ pubkey: senderPubkey });\r\n    const decryptedPayload = await decrypt2(backend, id, remotePubkey, senderUser, payload);\r\n    return decryptedPayload;\r\n  }\r\n};\r\nasync function decrypt2(backend, id, remotePubkey, senderUser, payload) {\r\n  if (!await backend.pubkeyAllowed({\r\n    id,\r\n    pubkey: remotePubkey,\r\n    method: \"decrypt\",\r\n    params: payload\r\n  })) {\r\n    backend.debug(`decrypt request from ${remotePubkey} rejected`);\r\n    return void 0;\r\n  }\r\n  return await backend.signer.decrypt(senderUser, payload);\r\n}\r\n\r\n// src/signers/nip46/backend/nip04-encrypt.ts\r\nvar Nip04EncryptHandlingStrategy = class {\r\n  async handle(backend, id, remotePubkey, params) {\r\n    const [recipientPubkey, payload] = params;\r\n    const recipientUser = new NDKUser({ pubkey: recipientPubkey });\r\n    const encryptedPayload = await encrypt2(backend, id, remotePubkey, recipientUser, payload);\r\n    return encryptedPayload;\r\n  }\r\n};\r\nasync function encrypt2(backend, id, remotePubkey, recipientUser, payload) {\r\n  if (!await backend.pubkeyAllowed({\r\n    id,\r\n    pubkey: remotePubkey,\r\n    method: \"encrypt\",\r\n    params: payload\r\n  })) {\r\n    backend.debug(`encrypt request from ${remotePubkey} rejected`);\r\n    return void 0;\r\n  }\r\n  return await backend.signer.encrypt(recipientUser, payload);\r\n}\r\n\r\n// src/signers/nip46/backend/sign-event.ts\r\nvar SignEventHandlingStrategy = class {\r\n  async handle(backend, id, remotePubkey, params) {\r\n    const event = await signEvent(backend, id, remotePubkey, params);\r\n    if (!event)\r\n      return void 0;\r\n    return JSON.stringify(await event.toNostrEvent());\r\n  }\r\n};\r\nasync function signEvent(backend, id, remotePubkey, params) {\r\n  const [eventString] = params;\r\n  backend.debug(`sign event request from ${remotePubkey}`);\r\n  const event = new NDKEvent(backend.ndk, JSON.parse(eventString));\r\n  backend.debug(\"event to sign\", event.rawEvent());\r\n  if (!await backend.pubkeyAllowed({\r\n    id,\r\n    pubkey: remotePubkey,\r\n    method: \"sign_event\",\r\n    params: event\r\n  })) {\r\n    backend.debug(`sign event request from ${remotePubkey} rejected`);\r\n    return void 0;\r\n  }\r\n  backend.debug(`sign event request from ${remotePubkey} allowed`);\r\n  await event.sign(backend.signer);\r\n  return event;\r\n}\r\n\r\n// src/signers/nip46/backend/index.ts\r\nvar NDKNip46Backend = class {\r\n  ndk;\r\n  signer;\r\n  localUser;\r\n  debug;\r\n  rpc;\r\n  permitCallback;\r\n  relayUrls;\r\n  /**\r\n   * @param ndk The NDK instance to use\r\n   * @param privateKeyOrSigner The private key or signer of the npub that wants to be published as\r\n   * @param permitCallback Callback executed when permission is requested\r\n   */\r\n  constructor(ndk, privateKeyOrSigner, permitCallback, relayUrls) {\r\n    this.ndk = ndk;\r\n    this.signer = typeof privateKeyOrSigner === \"string\" ? new NDKPrivateKeySigner(privateKeyOrSigner) : privateKeyOrSigner;\r\n    this.debug = ndk.debug.extend(\"nip46:backend\");\r\n    this.relayUrls = relayUrls ?? Array.from(ndk.pool.relays.keys());\r\n    this.rpc = new NDKNostrRpc(ndk, this.signer, this.debug, this.relayUrls);\r\n    this.permitCallback = permitCallback;\r\n  }\r\n  /**\r\n   * This method starts the backend, which will start listening for incoming\r\n   * requests.\r\n   */\r\n  async start() {\r\n    this.localUser = await this.signer.user();\r\n    const sub = this.ndk.subscribe(\r\n      {\r\n        kinds: [24133],\r\n        \"#p\": [this.localUser.pubkey]\r\n      },\r\n      { closeOnEose: false }\r\n    );\r\n    sub.on(\"event\", (e) => this.handleIncomingEvent(e));\r\n  }\r\n  handlers = {\r\n    connect: new ConnectEventHandlingStrategy(),\r\n    sign_event: new SignEventHandlingStrategy(),\r\n    nip04_encrypt: new Nip04EncryptHandlingStrategy(),\r\n    nip04_decrypt: new Nip04DecryptHandlingStrategy(),\r\n    get_public_key: new GetPublicKeyHandlingStrategy(),\r\n    ping: new PingEventHandlingStrategy()\r\n  };\r\n  /**\r\n   * Enables the user to set a custom strategy for handling incoming events.\r\n   * @param method - The method to set the strategy for\r\n   * @param strategy - The strategy to set\r\n   */\r\n  setStrategy(method, strategy) {\r\n    this.handlers[method] = strategy;\r\n  }\r\n  /**\r\n   * Overload this method to apply tokens, which can\r\n   * wrap permission sets to be applied to a pubkey.\r\n   * @param pubkey public key to apply token to\r\n   * @param token token to apply\r\n   */\r\n  async applyToken(pubkey, token) {\r\n    throw new Error(\"connection token not supported\");\r\n  }\r\n  async handleIncomingEvent(event) {\r\n    const { id, method, params } = await this.rpc.parseEvent(event);\r\n    const remotePubkey = event.pubkey;\r\n    let response;\r\n    this.debug(\"incoming event\", { id, method, params });\r\n    if (!event.verifySignature(false)) {\r\n      this.debug(\"invalid signature\", event.rawEvent());\r\n      return;\r\n    }\r\n    const strategy = this.handlers[method];\r\n    if (strategy) {\r\n      try {\r\n        response = await strategy.handle(this, id, remotePubkey, params);\r\n      } catch (e) {\r\n        this.debug(\"error handling event\", e, { id, method, params });\r\n        this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, e.message);\r\n      }\r\n    } else {\r\n      this.debug(\"unsupported method\", { method, params });\r\n    }\r\n    if (response) {\r\n      this.debug(`sending response to ${remotePubkey}`, response);\r\n      this.rpc.sendResponse(id, remotePubkey, response);\r\n    } else {\r\n      this.rpc.sendResponse(id, remotePubkey, \"error\", void 0, \"Not authorized\");\r\n    }\r\n  }\r\n  /**\r\n   * This method should be overriden by the user to allow or reject incoming\r\n   * connections.\r\n   */\r\n  async pubkeyAllowed(params) {\r\n    return this.permitCallback(params);\r\n  }\r\n};\r\n\r\n// src/signers/nip46/index.ts\r\nimport { EventEmitter as EventEmitter8 } from \"tseep\";\r\nvar NDKNip46Signer = class extends EventEmitter8 {\r\n  ndk;\r\n  remoteUser;\r\n  remotePubkey;\r\n  token;\r\n  localSigner;\r\n  nip05;\r\n  rpc;\r\n  debug;\r\n  relayUrls;\r\n  subscription;\r\n  /**\r\n   * @param ndk - The NDK instance to use\r\n   * @param tokenOrRemoteUser - The public key, or a connection token, of the npub that wants to be published as\r\n   * @param localSigner - The signer that will be used to request events to be signed\r\n   */\r\n  constructor(ndk, tokenOrRemoteUser, localSigner) {\r\n    super();\r\n    let remotePubkey;\r\n    let token;\r\n    if (tokenOrRemoteUser.includes(\"#\")) {\r\n      const parts = tokenOrRemoteUser.split(\"#\");\r\n      if (parts[0].startsWith(\"npub\")) {\r\n        remotePubkey = new NDKUser({ npub: parts[0] }).pubkey;\r\n      } else {\r\n        remotePubkey = parts[0];\r\n      }\r\n      token = parts[1];\r\n    } else if (tokenOrRemoteUser.startsWith(\"npub\")) {\r\n      remotePubkey = new NDKUser({\r\n        npub: tokenOrRemoteUser\r\n      }).pubkey;\r\n    } else if (tokenOrRemoteUser.match(/\\./)) {\r\n      this.nip05 = tokenOrRemoteUser;\r\n    } else {\r\n      remotePubkey = tokenOrRemoteUser;\r\n    }\r\n    this.ndk = ndk;\r\n    if (remotePubkey)\r\n      this.remotePubkey = remotePubkey;\r\n    this.token = token;\r\n    this.debug = ndk.debug.extend(\"nip46:signer\");\r\n    this.remoteUser = new NDKUser({ pubkey: remotePubkey });\r\n    if (!localSigner) {\r\n      this.localSigner = NDKPrivateKeySigner.generate();\r\n    } else {\r\n      this.localSigner = localSigner;\r\n    }\r\n    this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\r\n  }\r\n  async startListening() {\r\n    if (this.subscription)\r\n      return;\r\n    const localUser = await this.localSigner.user();\r\n    this.subscription = await this.rpc.subscribe({\r\n      kinds: [24133 /* NostrConnect */, 24133 /* NostrConnect */ + 1],\r\n      \"#p\": [localUser.pubkey]\r\n    });\r\n  }\r\n  /**\r\n   * Get the user that is being published as\r\n   */\r\n  async user() {\r\n    return this.remoteUser;\r\n  }\r\n  async blockUntilReady() {\r\n    if (this.nip05 && !this.remotePubkey) {\r\n      const user = await NDKUser.fromNip05(this.nip05, this.ndk);\r\n      if (user) {\r\n        this.remoteUser = user;\r\n        this.remotePubkey = user.pubkey;\r\n        this.relayUrls = user.nip46Urls;\r\n        this.rpc = new NDKNostrRpc(this.ndk, this.localSigner, this.debug, this.relayUrls);\r\n      }\r\n    }\r\n    if (!this.remotePubkey) {\r\n      throw new Error(\"Remote pubkey not set\");\r\n    }\r\n    await this.startListening();\r\n    this.rpc.on(\"authUrl\", (...props) => {\r\n      this.emit(\"authUrl\", ...props);\r\n    });\r\n    return new Promise((resolve, reject) => {\r\n      const connectParams = [this.remotePubkey];\r\n      if (this.token) {\r\n        connectParams.push(this.token);\r\n      }\r\n      this.rpc.sendRequest(\r\n        this.remotePubkey,\r\n        \"connect\",\r\n        connectParams,\r\n        24133,\r\n        (response) => {\r\n          if (response.result === \"ack\") {\r\n            resolve(this.remoteUser);\r\n          } else {\r\n            reject(response.error);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  async encrypt(recipient, value) {\r\n    this.debug(\"asking for encryption\");\r\n    const promise = new Promise((resolve, reject) => {\r\n      this.rpc.sendRequest(\r\n        this.remotePubkey,\r\n        \"nip04_encrypt\",\r\n        [recipient.pubkey, value],\r\n        24133,\r\n        (response) => {\r\n          if (!response.error) {\r\n            resolve(response.result);\r\n          } else {\r\n            reject(response.error);\r\n          }\r\n        }\r\n      );\r\n    });\r\n    return promise;\r\n  }\r\n  async decrypt(sender, value) {\r\n    this.debug(\"asking for decryption\");\r\n    const promise = new Promise((resolve, reject) => {\r\n      this.rpc.sendRequest(\r\n        this.remotePubkey,\r\n        \"nip04_decrypt\",\r\n        [sender.pubkey, value],\r\n        24133,\r\n        (response) => {\r\n          if (!response.error) {\r\n            resolve(response.result);\r\n          } else {\r\n            reject(response.error);\r\n          }\r\n        }\r\n      );\r\n    });\r\n    return promise;\r\n  }\r\n  async sign(event) {\r\n    this.debug(\"asking for a signature\");\r\n    const promise = new Promise((resolve, reject) => {\r\n      this.rpc.sendRequest(\r\n        this.remotePubkey,\r\n        \"sign_event\",\r\n        [JSON.stringify(event)],\r\n        24133,\r\n        (response) => {\r\n          this.debug(\"got a response\", response);\r\n          if (!response.error) {\r\n            const json = JSON.parse(response.result);\r\n            resolve(json.sig);\r\n          } else {\r\n            reject(response.error);\r\n          }\r\n        }\r\n      );\r\n    });\r\n    return promise;\r\n  }\r\n  /**\r\n   * Allows creating a new account on the remote server.\r\n   * @param username Desired username for the NIP-05\r\n   * @param domain Desired domain for the NIP-05\r\n   * @param email Email address to associate with this account -- Remote servers may use this for recovery\r\n   * @returns The public key of the newly created account\r\n   */\r\n  async createAccount(username, domain, email) {\r\n    await this.startListening();\r\n    this.debug(\"asking to create an account\");\r\n    const req = [];\r\n    if (username)\r\n      req.push(username);\r\n    if (domain)\r\n      req.push(domain);\r\n    if (email)\r\n      req.push(email);\r\n    return new Promise((resolve, reject) => {\r\n      this.rpc.sendRequest(\r\n        this.remotePubkey,\r\n        \"create_account\",\r\n        req,\r\n        24133 /* NostrConnect */,\r\n        (response) => {\r\n          this.debug(\"got a response\", response);\r\n          if (!response.error) {\r\n            const pubkey = response.result;\r\n            resolve(pubkey);\r\n          } else {\r\n            reject(response.error);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\n// src/dvm/schedule.ts\r\nfunction addRelays(event, relays) {\r\n  const tags = [];\r\n  if (!relays || relays.length === 0) {\r\n    const poolRelays = event.ndk?.pool.relays;\r\n    relays = poolRelays ? Object.keys(poolRelays) : void 0;\r\n  }\r\n  if (relays && relays.length > 0)\r\n    tags.push([\"relays\", ...relays]);\r\n  return tags;\r\n}\r\nasync function dvmSchedule(events, dvm, relays, encrypted = true, waitForConfirmationForMs) {\r\n  if (!(events instanceof Array)) {\r\n    events = [events];\r\n  }\r\n  const ndk = events[0].ndk;\r\n  if (!ndk)\r\n    throw new Error(\"NDK not set\");\r\n  for (const event of events) {\r\n    if (!event.sig)\r\n      throw new Error(\"Event not signed\");\r\n    if (!event.created_at)\r\n      throw new Error(\"Event has no date\");\r\n    if (!dvm)\r\n      throw new Error(\"No DVM specified\");\r\n    if (event.created_at <= Date.now() / 1e3)\r\n      throw new Error(\"Event needs to be in the future\");\r\n  }\r\n  const scheduleEvent = new NDKDVMRequest(ndk, {\r\n    kind: 5905 /* DVMEventSchedule */\r\n  });\r\n  for (const event of events) {\r\n    scheduleEvent.addInput(JSON.stringify(event.rawEvent()), \"text\");\r\n  }\r\n  scheduleEvent.tags.push(...addRelays(events[0], relays));\r\n  if (encrypted) {\r\n    await scheduleEvent.encryption(dvm);\r\n  } else {\r\n    scheduleEvent.dvm = dvm;\r\n  }\r\n  await scheduleEvent.sign();\r\n  let res;\r\n  if (waitForConfirmationForMs) {\r\n    res = ndk.subscribe(\r\n      {\r\n        kinds: [5905 /* DVMEventSchedule */ + 1e3, 7e3 /* DVMJobFeedback */],\r\n        ...scheduleEvent.filter()\r\n      },\r\n      { groupable: false, closeOnEose: false }\r\n    );\r\n  }\r\n  const timeoutPromise = new Promise((reject) => {\r\n    setTimeout(() => {\r\n      res?.stop();\r\n      reject(\"Timeout waiting for an answer from the DVM\");\r\n    }, waitForConfirmationForMs);\r\n  });\r\n  const schedulePromise = new Promise(\r\n    (resolve, reject) => {\r\n      if (waitForConfirmationForMs) {\r\n        res?.on(\"event\", async (e) => {\r\n          res?.stop();\r\n          if (e.kind === 7e3 /* DVMJobFeedback */) {\r\n            const feedback = await NDKDVMJobFeedback.from(e);\r\n            if (feedback.status === \"error\") {\r\n              const statusTag = feedback.getMatchingTags(\"status\");\r\n              reject(statusTag?.[2] ?? feedback);\r\n            } else {\r\n              resolve(feedback);\r\n            }\r\n          }\r\n          resolve(e);\r\n        });\r\n      }\r\n      scheduleEvent.publish().then(() => {\r\n        if (!waitForConfirmationForMs)\r\n          resolve();\r\n      });\r\n    }\r\n  );\r\n  return new Promise((resolve, reject) => {\r\n    if (waitForConfirmationForMs) {\r\n      Promise.race([timeoutPromise, schedulePromise]).then((e) => {\r\n        resolve(e);\r\n      }).catch(reject);\r\n    } else {\r\n      schedulePromise.then(resolve);\r\n    }\r\n  });\r\n}\r\n\r\n// src/ndk/index.ts\r\nimport debug6 from \"debug\";\r\nimport { EventEmitter as EventEmitter11 } from \"tseep\";\r\n\r\n// src/events/dedup.ts\r\nfunction dedup(event1, event2) {\r\n  if (event1.created_at > event2.created_at) {\r\n    return event1;\r\n  }\r\n  return event2;\r\n}\r\n\r\n// src/outbox/tracker.ts\r\nimport { EventEmitter as EventEmitter9 } from \"tseep\";\r\nimport { LRUCache as LRUCache2 } from \"typescript-lru-cache\";\r\nvar OutboxItem = class {\r\n  /**\r\n   * Type of item\r\n   */\r\n  type;\r\n  /**\r\n   * The relay URLs that are of interest to this item\r\n   */\r\n  relayUrlScores;\r\n  readRelays;\r\n  writeRelays;\r\n  constructor(type) {\r\n    this.type = type;\r\n    this.relayUrlScores = /* @__PURE__ */ new Map();\r\n    this.readRelays = /* @__PURE__ */ new Set();\r\n    this.writeRelays = /* @__PURE__ */ new Set();\r\n  }\r\n};\r\nvar OutboxTracker = class extends EventEmitter9 {\r\n  data;\r\n  ndk;\r\n  debug;\r\n  constructor(ndk) {\r\n    super();\r\n    this.ndk = ndk;\r\n    this.debug = ndk.debug.extend(\"outbox-tracker\");\r\n    this.data = new LRUCache2({\r\n      maxSize: 1e5,\r\n      entryExpirationTimeInMS: 2 * 60 * 1e3\r\n    });\r\n  }\r\n  trackUsers(items) {\r\n    for (let i = 0; i < items.length; i += 400) {\r\n      const slice = items.slice(i, i + 400);\r\n      let pubkeys = slice.map((item) => getKeyFromItem(item)).filter((pubkey) => !this.data.has(pubkey));\r\n      if (pubkeys.length === 0)\r\n        continue;\r\n      for (const pubkey of pubkeys) {\r\n        this.data.set(pubkey, new OutboxItem(\"user\"));\r\n      }\r\n      NDKRelayList.forUsers(pubkeys, this.ndk).then(\r\n        (relayLists) => {\r\n          for (const [pubkey, relayList] of relayLists) {\r\n            const outboxItem = this.data.get(pubkey);\r\n            if (relayList) {\r\n              outboxItem.readRelays = new Set(normalize(relayList.readRelayUrls));\r\n              outboxItem.writeRelays = new Set(normalize(relayList.writeRelayUrls));\r\n              for (const relayUrl of outboxItem.readRelays) {\r\n                if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\r\n                  outboxItem.readRelays.delete(relayUrl);\r\n                }\r\n              }\r\n              for (const relayUrl of outboxItem.writeRelays) {\r\n                if (this.ndk.pool.blacklistRelayUrls.has(relayUrl)) {\r\n                  outboxItem.writeRelays.delete(relayUrl);\r\n                }\r\n              }\r\n              this.data.set(pubkey, outboxItem);\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n  /**\r\n   *\r\n   * @param key\r\n   * @param score\r\n   */\r\n  track(item, type) {\r\n    const key = getKeyFromItem(item);\r\n    type ??= getTypeFromItem(item);\r\n    let outboxItem = this.data.get(key);\r\n    if (!outboxItem) {\r\n      outboxItem = new OutboxItem(type);\r\n      if (item instanceof NDKUser) {\r\n        this.trackUsers([item]);\r\n      }\r\n    }\r\n    return outboxItem;\r\n  }\r\n};\r\nfunction getKeyFromItem(item) {\r\n  if (item instanceof NDKUser) {\r\n    return item.pubkey;\r\n  } else {\r\n    return item;\r\n  }\r\n}\r\nfunction getTypeFromItem(item) {\r\n  if (item instanceof NDKUser) {\r\n    return \"user\";\r\n  } else {\r\n    return \"kind\";\r\n  }\r\n}\r\n\r\n// src/relay/pool/index.ts\r\nimport { EventEmitter as EventEmitter10 } from \"tseep\";\r\nvar NDKPool = class extends EventEmitter10 {\r\n  // TODO: This should probably be an LRU cache\r\n  relays = /* @__PURE__ */ new Map();\r\n  blacklistRelayUrls;\r\n  debug;\r\n  temporaryRelayTimers = /* @__PURE__ */ new Map();\r\n  flappingRelays = /* @__PURE__ */ new Set();\r\n  // A map to store timeouts for each flapping relay.\r\n  backoffTimes = /* @__PURE__ */ new Map();\r\n  ndk;\r\n  constructor(relayUrls = [], blacklistedRelayUrls = [], ndk, debug7) {\r\n    super();\r\n    this.debug = debug7 ?? ndk.debug.extend(\"pool\");\r\n    this.ndk = ndk;\r\n    for (const relayUrl of relayUrls) {\r\n      const relay = new NDKRelay(relayUrl);\r\n      this.addRelay(relay, false);\r\n    }\r\n    this.blacklistRelayUrls = new Set(blacklistedRelayUrls);\r\n  }\r\n  set name(name) {\r\n    this.debug = this.debug.extend(name);\r\n  }\r\n  /**\r\n   * Adds a relay to the pool, and sets a timer to remove it if it is not used within the specified time.\r\n   * @param relay - The relay to add to the pool.\r\n   * @param removeIfUnusedAfter - The time in milliseconds to wait before removing the relay from the pool after it is no longer used.\r\n   */\r\n  useTemporaryRelay(relay, removeIfUnusedAfter = 3e4) {\r\n    const relayAlreadyInPool = this.relays.has(relay.url);\r\n    if (!relayAlreadyInPool) {\r\n      this.addRelay(relay);\r\n    }\r\n    const existingTimer = this.temporaryRelayTimers.get(relay.url);\r\n    if (existingTimer) {\r\n      clearTimeout(existingTimer);\r\n    }\r\n    if (!relayAlreadyInPool || existingTimer) {\r\n      const timer = setTimeout(() => {\r\n        this.removeRelay(relay.url);\r\n      }, removeIfUnusedAfter);\r\n      this.temporaryRelayTimers.set(relay.url, timer);\r\n    }\r\n  }\r\n  /**\r\n   * Adds a relay to the pool.\r\n   *\r\n   * @param relay - The relay to add to the pool.\r\n   * @param connect - Whether or not to connect to the relay.\r\n   */\r\n  addRelay(relay, connect = true) {\r\n    const isAlreadyInPool = this.relays.has(relay.url);\r\n    const isBlacklisted = this.blacklistRelayUrls?.has(relay.url);\r\n    const isCustomRelayUrl = relay.url.includes(\"/npub1\");\r\n    let reconnect = true;\r\n    const relayUrl = relay.url;\r\n    if (isAlreadyInPool) {\r\n      this.debug(`Refusing to add relay ${relayUrl}: already in the pool`);\r\n      return;\r\n    }\r\n    if (isBlacklisted) {\r\n      this.debug(`Refusing to add relay ${relayUrl}: blacklisted`);\r\n      return;\r\n    }\r\n    if (isCustomRelayUrl) {\r\n      this.debug(`Refusing to add relay ${relayUrl}: is a filter relay`);\r\n      return;\r\n    }\r\n    if (this.ndk.cacheAdapter?.getRelayStatus) {\r\n      const info = this.ndk.cacheAdapter.getRelayStatus(relayUrl);\r\n      if (info && info.dontConnectBefore) {\r\n        if (info.dontConnectBefore > Date.now()) {\r\n          const delay = info.dontConnectBefore - Date.now();\r\n          this.debug(`Refusing to add relay ${relayUrl}: delayed connect for ${delay}ms`);\r\n          setTimeout(() => {\r\n            this.addRelay(relay, connect);\r\n          }, delay);\r\n          return;\r\n        } else {\r\n          reconnect = false;\r\n        }\r\n      }\r\n    }\r\n    this.debug(`Adding relay ${relayUrl} to the pool`);\r\n    const noticeHandler = (notice) => this.emit(\"notice\", relay, notice);\r\n    const connectHandler = () => this.handleRelayConnect(relayUrl);\r\n    const readyHandler = () => this.handleRelayReady(relay);\r\n    const disconnectHandler = () => this.emit(\"relay:disconnect\", relay);\r\n    const flappingHandler = () => this.handleFlapping(relay);\r\n    const authHandler = (challenge) => this.emit(\"relay:auth\", relay, challenge);\r\n    const authedHandler = () => this.emit(\"relay:authed\", relay);\r\n    relay.off(\"notice\", noticeHandler);\r\n    relay.off(\"connect\", connectHandler);\r\n    relay.off(\"ready\", readyHandler);\r\n    relay.off(\"disconnect\", disconnectHandler);\r\n    relay.off(\"flapping\", flappingHandler);\r\n    relay.off(\"auth\", authHandler);\r\n    relay.off(\"authed\", authedHandler);\r\n    relay.on(\"notice\", noticeHandler);\r\n    relay.on(\"connect\", connectHandler);\r\n    relay.on(\"ready\", readyHandler);\r\n    relay.on(\"disconnect\", disconnectHandler);\r\n    relay.on(\"flapping\", flappingHandler);\r\n    relay.on(\"auth\", authHandler);\r\n    relay.on(\"authed\", authedHandler);\r\n    relay.on(\"delayed-connect\", (delay) => {\r\n      if (this.ndk.cacheAdapter?.updateRelayStatus) {\r\n        this.ndk.cacheAdapter.updateRelayStatus(relay.url, {\r\n          dontConnectBefore: Date.now() + delay\r\n        });\r\n      }\r\n    });\r\n    this.relays.set(relayUrl, relay);\r\n    if (connect) {\r\n      this.emit(\"relay:connecting\", relay);\r\n      relay.connect(void 0, reconnect).catch((e) => {\r\n        this.debug(`Failed to connect to relay ${relayUrl}`, e);\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Removes a relay from the pool.\r\n   * @param relayUrl - The URL of the relay to remove.\r\n   * @returns {boolean} True if the relay was removed, false if it was not found.\r\n   */\r\n  removeRelay(relayUrl) {\r\n    const relay = this.relays.get(relayUrl);\r\n    if (relay) {\r\n      relay.disconnect();\r\n      this.relays.delete(relayUrl);\r\n      this.emit(\"relay:disconnect\", relay);\r\n      return true;\r\n    }\r\n    const existingTimer = this.temporaryRelayTimers.get(relayUrl);\r\n    if (existingTimer) {\r\n      clearTimeout(existingTimer);\r\n      this.temporaryRelayTimers.delete(relayUrl);\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * Fetches a relay from the pool, or creates a new one if it does not exist.\r\n   *\r\n   * New relays will be attempted to be connected.\r\n   */\r\n  getRelay(url, connect = true, temporary = false, filters) {\r\n    let relay = this.relays.get(url);\r\n    if (!relay) {\r\n      relay = new NDKRelay(url);\r\n      if (temporary) {\r\n        this.useTemporaryRelay(relay);\r\n      } else {\r\n        this.addRelay(relay, connect);\r\n      }\r\n    }\r\n    return relay;\r\n  }\r\n  handleRelayConnect(relayUrl) {\r\n    this.emit(\"relay:connect\", this.relays.get(relayUrl));\r\n    if (this.stats().connected === this.relays.size) {\r\n      this.emit(\"connect\");\r\n    }\r\n  }\r\n  handleRelayReady(relay) {\r\n    this.debug(`Relay ${relay.url} ready`);\r\n    this.emit(\"relay:ready\", relay);\r\n  }\r\n  /**\r\n   * Attempts to establish a connection to each relay in the pool.\r\n   *\r\n   * @async\r\n   * @param {number} [timeoutMs] - Optional timeout in milliseconds for each connection attempt.\r\n   * @returns {Promise<void>} A promise that resolves when all connection attempts have completed.\r\n   * @throws {Error} If any of the connection attempts result in an error or timeout.\r\n   */\r\n  async connect(timeoutMs) {\r\n    const promises = [];\r\n    this.debug(\r\n      `Connecting to ${this.relays.size} relays${timeoutMs ? `, timeout ${timeoutMs}...` : \"\"}`\r\n    );\r\n    for (const relay of this.relays.values()) {\r\n      const connectPromise = new Promise((resolve, reject) => {\r\n        this.emit(\"relay:connecting\", relay);\r\n        return relay.connect(timeoutMs).then(resolve).catch(reject);\r\n      });\r\n      if (timeoutMs) {\r\n        const timeoutPromise = new Promise((_, reject) => {\r\n          setTimeout(() => reject(`Timed out after ${timeoutMs}ms`), timeoutMs);\r\n        });\r\n        promises.push(\r\n          Promise.race([connectPromise, timeoutPromise]).catch((e) => {\r\n            this.debug(\r\n              `Failed to connect to relay ${relay.url}: ${e ?? \"No reason specified\"}`\r\n            );\r\n          })\r\n        );\r\n      } else {\r\n        promises.push(connectPromise);\r\n      }\r\n    }\r\n    if (timeoutMs) {\r\n      setTimeout(() => {\r\n        const allConnected = this.stats().connected === this.relays.size;\r\n        const someConnected = this.stats().connected > 0;\r\n        if (!allConnected && someConnected) {\r\n          this.emit(\"connect\");\r\n        }\r\n      }, timeoutMs);\r\n    }\r\n    await Promise.all(promises);\r\n  }\r\n  checkOnFlappingRelays() {\r\n    const flappingRelaysCount = this.flappingRelays.size;\r\n    const totalRelays = this.relays.size;\r\n    if (flappingRelaysCount / totalRelays >= 0.8) {\r\n      for (const relayUrl of this.flappingRelays) {\r\n        this.backoffTimes.set(relayUrl, 0);\r\n      }\r\n    }\r\n  }\r\n  handleFlapping(relay) {\r\n    this.debug(`Relay ${relay.url} is flapping`);\r\n    let currentBackoff = this.backoffTimes.get(relay.url) || 5e3;\r\n    currentBackoff = currentBackoff * 2;\r\n    this.backoffTimes.set(relay.url, currentBackoff);\r\n    this.debug(`Backoff time for ${relay.url} is ${currentBackoff}ms`);\r\n    setTimeout(() => {\r\n      this.debug(`Attempting to reconnect to ${relay.url}`);\r\n      this.emit(\"relay:connecting\", relay);\r\n      relay.connect();\r\n      this.checkOnFlappingRelays();\r\n    }, currentBackoff);\r\n    relay.disconnect();\r\n    this.emit(\"flapping\", relay);\r\n  }\r\n  size() {\r\n    return this.relays.size;\r\n  }\r\n  /**\r\n   * Returns the status of each relay in the pool.\r\n   * @returns {NDKPoolStats} An object containing the number of relays in each status.\r\n   */\r\n  stats() {\r\n    const stats = {\r\n      total: 0,\r\n      connected: 0,\r\n      disconnected: 0,\r\n      connecting: 0\r\n    };\r\n    for (const relay of this.relays.values()) {\r\n      stats.total++;\r\n      if (relay.status === 1 /* CONNECTED */) {\r\n        stats.connected++;\r\n      } else if (relay.status === 3 /* DISCONNECTED */) {\r\n        stats.disconnected++;\r\n      } else if (relay.status === 0 /* CONNECTING */) {\r\n        stats.connecting++;\r\n      }\r\n    }\r\n    return stats;\r\n  }\r\n  connectedRelays() {\r\n    return Array.from(this.relays.values()).filter(\r\n      (relay) => relay.status === 1 /* CONNECTED */\r\n    );\r\n  }\r\n  permanentAndConnectedRelays() {\r\n    return Array.from(this.relays.values()).filter(\r\n      (relay) => relay.status === 1 /* CONNECTED */ || !this.temporaryRelayTimers.has(relay.url)\r\n    );\r\n  }\r\n  /**\r\n   * Get a list of all relay urls in the pool.\r\n   */\r\n  urls() {\r\n    return Array.from(this.relays.keys());\r\n  }\r\n};\r\n\r\n// src/relay/sets/utils.ts\r\nfunction correctRelaySet(relaySet, pool) {\r\n  const connectedRelays = pool.connectedRelays();\r\n  const includesConnectedRelay = Array.from(relaySet.relays).some((relay) => {\r\n    return connectedRelays.map((r) => r.url).includes(relay.url);\r\n  });\r\n  if (!includesConnectedRelay) {\r\n    for (const relay of connectedRelays) {\r\n      relaySet.addRelay(relay);\r\n    }\r\n  }\r\n  if (connectedRelays.length === 0) {\r\n    for (const relay of pool.relays.values()) {\r\n      relaySet.addRelay(relay);\r\n    }\r\n  }\r\n  return relaySet;\r\n}\r\n\r\n// src/ndk/fetch-event-from-tag.ts\r\nasync function fetchEventFromTag(tag, subOpts, fallback = {\r\n  type: \"timeout\"\r\n}) {\r\n  const d = this.debug.extend(\"fetch-event-from-tag\");\r\n  const [tagType, id, hint] = tag;\r\n  let result = void 0;\r\n  let relay = hint && hint !== \"\" ? this.pool.getRelay(hint, true, true, [{ ids: [id] }]) : void 0;\r\n  const fetchMaybeWithRelayHint = new Promise((resolve) => {\r\n    this.fetchEvent(id, subOpts, relay).then(resolve);\r\n  });\r\n  if (hint === \"\" || !hint || fallback.type === \"none\") {\r\n    return fetchMaybeWithRelayHint;\r\n  }\r\n  let fallbackFetchPromise = new Promise(async (resolve) => {\r\n    let fallbackRelaySet = fallback.relaySet;\r\n    let timeout = fallback.timeout ?? 1500;\r\n    let timeoutPromise = new Promise((resolve2) => setTimeout(resolve2, timeout));\r\n    if (fallback.type === \"timeout\")\r\n      await timeoutPromise;\r\n    if (result) {\r\n      resolve(result);\r\n    } else {\r\n      d(\"fallback fetch triggered\");\r\n      let fallbackEvent = await this.fetchEvent(id, subOpts, fallbackRelaySet);\r\n      resolve(fallbackEvent);\r\n    }\r\n  });\r\n  switch (fallback.type) {\r\n    case \"timeout\":\r\n      return Promise.race([fetchMaybeWithRelayHint, fallbackFetchPromise]);\r\n    case \"eose\":\r\n      result = await fetchMaybeWithRelayHint;\r\n      if (result)\r\n        return result;\r\n      return fallbackFetchPromise;\r\n  }\r\n}\r\n\r\n// src/media/index.ts\r\nvar SPEC_PATH = \"/.well-known/nostr/nip96.json\";\r\nvar Nip96 = class {\r\n  ndk;\r\n  spec;\r\n  url;\r\n  nip98Required = false;\r\n  /**\r\n   * @param domain domain of the NIP96 service\r\n   */\r\n  constructor(domain, ndk) {\r\n    this.url = `https://${domain}${SPEC_PATH}`;\r\n    this.ndk = ndk;\r\n  }\r\n  async prepareUpload(blob, httpVerb = \"POST\") {\r\n    this.validateHttpFetch();\r\n    if (!this.spec)\r\n      await this.fetchSpec();\r\n    if (!this.spec)\r\n      throw new Error(\"Failed to fetch NIP96 spec\");\r\n    let headers = {};\r\n    if (this.nip98Required) {\r\n      const authorizationHeader = await this.generateNip98Header(\r\n        this.spec.api_url,\r\n        httpVerb,\r\n        blob\r\n      );\r\n      headers = { Authorization: authorizationHeader };\r\n    }\r\n    return {\r\n      url: this.spec.api_url,\r\n      headers\r\n    };\r\n  }\r\n  /**\r\n   * Provides an XMLHttpRequest-based upload method for browsers.\r\n   * @example\r\n   * const xhr = new XMLHttpRequest();\r\n   * xhr.upload.addEventListener(\"progress\", function(e) {\r\n   *    const percentComplete = e.loaded / e.total;\r\n   *    console.log(percentComplete);\r\n   * });\r\n   * const nip96 = ndk.getNip96(\"nostrcheck.me\");\r\n   * const blob = new Blob([\"Hello, world!\"], { type: \"text/plain\" });\r\n   * const response = await nip96.xhrUpload(xhr, blob);\r\n   * console.log(response);\r\n   * @returns Promise that resolves to the upload response\r\n   */\r\n  async xhrUpload(xhr, blob) {\r\n    const httpVerb = \"POST\";\r\n    const { url, headers } = await this.prepareUpload(blob, httpVerb);\r\n    xhr.open(httpVerb, url, true);\r\n    if (headers[\"Authorization\"]) {\r\n      xhr.setRequestHeader(\"Authorization\", headers[\"Authorization\"]);\r\n    }\r\n    const formData = new FormData();\r\n    formData.append(\"file\", blob);\r\n    return new Promise((resolve, reject) => {\r\n      xhr.onload = function() {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          resolve(JSON.parse(xhr.responseText));\r\n        } else {\r\n          reject(new Error(xhr.statusText));\r\n        }\r\n      };\r\n      xhr.onerror = function() {\r\n        reject(new Error(\"Network Error\"));\r\n      };\r\n      xhr.send(formData);\r\n    });\r\n  }\r\n  /**\r\n   * Fetch-based upload method. Note that this will use NDK's httpFetch\r\n   * @param blob\r\n   * @returns Promise that resolves to the upload response\r\n   *\r\n   * @example\r\n   * const nip96 = ndk.getNip96(\"nostrcheck.me\");\r\n   * const blob = new Blob([\"Hello, world!\"], { type: \"text/plain\" });\r\n   * const response = await nip96.upload(blob);\r\n   * console.log(response);\r\n   */\r\n  async upload(blob) {\r\n    const httpVerb = \"POST\";\r\n    const { url, headers } = await this.prepareUpload(blob, httpVerb);\r\n    const formData = new FormData();\r\n    formData.append(\"file\", blob);\r\n    const res = await this.ndk.httpFetch(this.spec.api_url, {\r\n      method: httpVerb,\r\n      headers,\r\n      body: formData\r\n    });\r\n    if (res.status !== 200)\r\n      throw new Error(`Failed to upload file to ${url}`);\r\n    const json = await res.json();\r\n    if (json.status !== \"success\")\r\n      throw new Error(json.message);\r\n    return json;\r\n  }\r\n  validateHttpFetch() {\r\n    if (!this.ndk)\r\n      throw new Error(\"NDK is required to fetch NIP96 spec\");\r\n    if (!this.ndk.httpFetch)\r\n      throw new Error(\"NDK must have an httpFetch method to fetch NIP96 spec\");\r\n  }\r\n  async fetchSpec() {\r\n    this.validateHttpFetch();\r\n    const res = await this.ndk.httpFetch(this.url);\r\n    if (res.status !== 200)\r\n      throw new Error(`Failed to fetch NIP96 spec from ${this.url}`);\r\n    const spec = await res.json();\r\n    if (!spec)\r\n      throw new Error(`Failed to parse NIP96 spec from ${this.url}`);\r\n    this.spec = spec;\r\n    this.nip98Required = this.spec.plans.free.is_nip98_required;\r\n  }\r\n  async generateNip98Header(requestUrl, httpMethod, blob) {\r\n    const event = new NDKEvent(this.ndk, {\r\n      kind: 27235 /* HttpAuth */,\r\n      tags: [\r\n        [\"u\", requestUrl],\r\n        [\"method\", httpMethod]\r\n      ]\r\n    });\r\n    if ([\"POST\", \"PUT\", \"PATCH\"].includes(httpMethod)) {\r\n      const sha256Hash = await this.calculateSha256(blob);\r\n      event.tags.push([\"payload\", sha256Hash]);\r\n    }\r\n    await event.sign();\r\n    const encodedEvent = btoa(JSON.stringify(event.rawEvent()));\r\n    return `Nostr ${encodedEvent}`;\r\n  }\r\n  async calculateSha256(blob) {\r\n    const buffer = await blob.arrayBuffer();\r\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", buffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\");\r\n    return hashHex;\r\n  }\r\n};\r\n\r\n// src/ndk/queue/index.ts\r\nvar Queue = class {\r\n  queue = [];\r\n  maxConcurrency;\r\n  processing = /* @__PURE__ */ new Set();\r\n  promises = /* @__PURE__ */ new Map();\r\n  constructor(name, maxConcurrency) {\r\n    this.maxConcurrency = maxConcurrency;\r\n  }\r\n  add(item) {\r\n    if (this.promises.has(item.id)) {\r\n      return this.promises.get(item.id);\r\n    } else {\r\n    }\r\n    const promise = new Promise((resolve, reject) => {\r\n      this.queue.push({\r\n        ...item,\r\n        func: () => item.func().then(\r\n          (result) => {\r\n            resolve(result);\r\n            return result;\r\n          },\r\n          (error) => {\r\n            reject(error);\r\n            throw error;\r\n          }\r\n        )\r\n      });\r\n      this.process();\r\n    });\r\n    this.promises.set(item.id, promise);\r\n    promise.finally(() => {\r\n      this.promises.delete(item.id);\r\n      this.processing.delete(item.id);\r\n    });\r\n    return promise;\r\n  }\r\n  process() {\r\n    if (this.processing.size >= this.maxConcurrency || this.queue.length === 0) {\r\n      return;\r\n    }\r\n    const item = this.queue.shift();\r\n    if (!item || this.processing.has(item.id)) {\r\n      return;\r\n    }\r\n    this.processing.add(item.id);\r\n    item.func();\r\n  }\r\n  clear() {\r\n    this.queue = [];\r\n  }\r\n  clearProcessing() {\r\n    this.processing.clear();\r\n  }\r\n  clearAll() {\r\n    this.clear();\r\n    this.clearProcessing();\r\n  }\r\n  length() {\r\n    return this.queue.length;\r\n  }\r\n};\r\n\r\n// src/ndk/index.ts\r\nvar DEFAULT_OUTBOX_RELAYS = [\"wss://purplepag.es/\", \"wss://profiles.nos.social/\"];\r\nvar DEFAULT_BLACKLISTED_RELAYS = [\r\n  \"wss://brb.io/\",\r\n  // BRB\r\n  \"wss://nostr.mutinywallet.com/\"\r\n  // Don't try to read from this relay since it's a write-only relay\r\n  // \"wss://purplepag.es/\", // This is a hack, since this is a mostly read-only relay, but not fully. Once we have relay routing this can be removed so it only receives the supported kinds\r\n];\r\nvar NDK = class extends EventEmitter11 {\r\n  explicitRelayUrls;\r\n  pool;\r\n  outboxPool;\r\n  _signer;\r\n  _activeUser;\r\n  cacheAdapter;\r\n  debug;\r\n  devWriteRelaySet;\r\n  outboxTracker;\r\n  mutedIds;\r\n  clientName;\r\n  clientNip89;\r\n  queuesZapConfig;\r\n  queuesNip05;\r\n  asyncSigVerification = false;\r\n  validationRatio = 1;\r\n  /**\r\n   * Default relay-auth policy that will be used when a relay requests authentication,\r\n   * if no other policy is specified for that relay.\r\n   *\r\n   * @example Disconnect from relays that request authentication:\r\n   * ```typescript\r\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.disconnect(ndk.pool);\r\n   * ```\r\n   *\r\n   * @example Sign in to relays that request authentication:\r\n   * ```typescript\r\n   * ndk.relayAuthDefaultPolicy = NDKAuthPolicies.signIn({ndk})\r\n   * ```\r\n   *\r\n   * @example Sign in to relays that request authentication, asking the user for confirmation:\r\n   * ```typescript\r\n   * ndk.relayAuthDefaultPolicy = (relay: NDKRelay) => {\r\n   *     const signIn = NDKAuthPolicies.signIn({ndk});\r\n   *     if (confirm(`Relay ${relay.url} is requesting authentication, do you want to sign in?`)) {\r\n   *        signIn(relay);\r\n   *     }\r\n   * }\r\n   * ```\r\n   */\r\n  relayAuthDefaultPolicy;\r\n  /**\r\n   * Fetch function to use for HTTP requests.\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * import fetch from \"node-fetch\";\r\n   *\r\n   * ndk.httpFetch = fetch;\r\n   * ```\r\n   */\r\n  httpFetch;\r\n  autoConnectUserRelays = true;\r\n  autoFetchUserMutelist = true;\r\n  constructor(opts = {}) {\r\n    super();\r\n    this.debug = opts.debug || debug6(\"ndk\");\r\n    this.explicitRelayUrls = opts.explicitRelayUrls || [];\r\n    this.pool = new NDKPool(\r\n      opts.explicitRelayUrls || [],\r\n      opts.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS,\r\n      this\r\n    );\r\n    this.pool.name = \"main\";\r\n    this.debug(`Starting with explicit relays: ${JSON.stringify(this.explicitRelayUrls)}`);\r\n    this.pool.on(\"relay:auth\", async (relay, challenge) => {\r\n      if (this.relayAuthDefaultPolicy) {\r\n        await this.relayAuthDefaultPolicy(relay, challenge);\r\n      }\r\n    });\r\n    this.autoConnectUserRelays = opts.autoConnectUserRelays ?? true;\r\n    this.autoFetchUserMutelist = opts.autoFetchUserMutelist ?? true;\r\n    this.clientName = opts.clientName;\r\n    this.clientNip89 = opts.clientNip89;\r\n    this.relayAuthDefaultPolicy = opts.relayAuthDefaultPolicy;\r\n    if (opts.enableOutboxModel) {\r\n      this.outboxPool = new NDKPool(\r\n        opts.outboxRelayUrls || DEFAULT_OUTBOX_RELAYS,\r\n        opts.blacklistRelayUrls || DEFAULT_BLACKLISTED_RELAYS,\r\n        this,\r\n        this.debug.extend(\"outbox-pool\")\r\n      );\r\n      this.outboxPool.name = \"outbox\";\r\n      this.outboxTracker = new OutboxTracker(this);\r\n    }\r\n    this.signer = opts.signer;\r\n    this.cacheAdapter = opts.cacheAdapter;\r\n    this.mutedIds = opts.mutedIds || /* @__PURE__ */ new Map();\r\n    if (opts.devWriteRelayUrls) {\r\n      this.devWriteRelaySet = NDKRelaySet.fromRelayUrls(opts.devWriteRelayUrls, this);\r\n    }\r\n    this.queuesZapConfig = new Queue(\"zaps\", 3);\r\n    this.queuesNip05 = new Queue(\"nip05\", 10);\r\n    this.signatureVerificationWorker = opts.signatureVerificationWorker;\r\n    this.validationRatio = opts.validationRatio || 1;\r\n    try {\r\n      this.httpFetch = fetch;\r\n    } catch {\r\n    }\r\n  }\r\n  set signatureVerificationWorker(worker2) {\r\n    this.asyncSigVerification = !!worker2;\r\n    if (worker2) {\r\n      signatureVerificationInit(worker2);\r\n    }\r\n  }\r\n  /**\r\n   * Adds an explicit relay to the pool.\r\n   * @param url\r\n   * @param relayAuthPolicy Authentication policy to use if different from the default\r\n   * @param connect Whether to connect to the relay automatically\r\n   * @returns\r\n   */\r\n  addExplicitRelay(urlOrRelay, relayAuthPolicy, connect = true) {\r\n    let relay;\r\n    if (typeof urlOrRelay === \"string\") {\r\n      relay = new NDKRelay(urlOrRelay, relayAuthPolicy);\r\n    } else {\r\n      relay = urlOrRelay;\r\n    }\r\n    this.pool.addRelay(relay, connect);\r\n    this.explicitRelayUrls.push(relay.url);\r\n    return relay;\r\n  }\r\n  toJSON() {\r\n    return { relayCount: this.pool.relays.size }.toString();\r\n  }\r\n  get activeUser() {\r\n    return this._activeUser;\r\n  }\r\n  /**\r\n   * Sets the active user for this NDK instance, typically this will be\r\n   * called when assigning a signer to the NDK instance.\r\n   *\r\n   * This function will automatically connect to the user's relays if\r\n   * `autoConnectUserRelays` is set to true.\r\n   *\r\n   * It will also fetch the user's mutelist if `autoFetchUserMutelist` is set to true.\r\n   */\r\n  set activeUser(user) {\r\n    const differentUser = this._activeUser?.pubkey !== user?.pubkey;\r\n    this._activeUser = user;\r\n    if (user && differentUser) {\r\n      const connectToUserRelays = async (user2) => {\r\n        const relayList = await NDKRelayList.forUser(user2.pubkey, this);\r\n        if (!relayList) {\r\n          this.debug(\"No relay list found for user\", { npub: user2.npub });\r\n          return;\r\n        }\r\n        this.debug(\"Connecting to user relays\", {\r\n          npub: user2.npub,\r\n          relays: relayList.relays\r\n        });\r\n        for (const url of relayList.relays) {\r\n          let relay = this.pool.relays.get(url);\r\n          if (!relay) {\r\n            relay = new NDKRelay(url);\r\n            this.pool.addRelay(relay);\r\n          }\r\n        }\r\n      };\r\n      const fetchBlockedRelays = async (user2) => {\r\n        const blockedRelays = await this.fetchEvent({\r\n          kinds: [10006 /* BlockRelayList */],\r\n          authors: [user2.pubkey]\r\n        });\r\n        if (blockedRelays) {\r\n          const list = lists_default.from(blockedRelays);\r\n          for (const item of list.items) {\r\n            this.pool.blacklistRelayUrls.add(item[0]);\r\n          }\r\n        }\r\n        this.debug(\"Blocked relays\", { blockedRelays });\r\n      };\r\n      const fetchUserMuteList = async (user2) => {\r\n        const muteList = await this.fetchEvent({\r\n          kinds: [1e4 /* MuteList */],\r\n          authors: [user2.pubkey]\r\n        });\r\n        if (muteList) {\r\n          const list = lists_default.from(muteList);\r\n          for (const item of list.items) {\r\n            this.mutedIds.set(item[1], item[0]);\r\n          }\r\n        }\r\n      };\r\n      const userFunctions = [fetchBlockedRelays];\r\n      if (this.autoConnectUserRelays)\r\n        userFunctions.push(connectToUserRelays);\r\n      if (this.autoFetchUserMutelist)\r\n        userFunctions.push(fetchUserMuteList);\r\n      const runUserFunctions = async (user2) => {\r\n        for (const fn of userFunctions) {\r\n          await fn(user2);\r\n        }\r\n      };\r\n      const pool = this.outboxPool || this.pool;\r\n      if (pool.connectedRelays.length > 0) {\r\n        runUserFunctions(user);\r\n      } else {\r\n        this.debug(\"Waiting for connection to main relays\");\r\n        pool.once(\"connect\", () => {\r\n          runUserFunctions(user);\r\n        });\r\n      }\r\n    } else if (!user) {\r\n      this.mutedIds = /* @__PURE__ */ new Map();\r\n    }\r\n  }\r\n  get signer() {\r\n    return this._signer;\r\n  }\r\n  set signer(newSigner) {\r\n    this._signer = newSigner;\r\n    if (newSigner)\r\n      this.emit(\"signer:ready\", newSigner);\r\n    newSigner?.user().then((user) => {\r\n      user.ndk = this;\r\n      this.activeUser = user;\r\n    });\r\n  }\r\n  /**\r\n   * Connect to relays with optional timeout.\r\n   * If the timeout is reached, the connection will be continued to be established in the background.\r\n   */\r\n  async connect(timeoutMs) {\r\n    if (this._signer && this.autoConnectUserRelays) {\r\n      this.debug(\"Attempting to connect to user relays specified by signer\");\r\n      if (this._signer.relays) {\r\n        const relays = await this._signer.relays();\r\n        relays.forEach((relay) => this.pool.addRelay(relay));\r\n      }\r\n    }\r\n    const connections = [this.pool.connect(timeoutMs)];\r\n    if (this.outboxPool) {\r\n      connections.push(this.outboxPool.connect(timeoutMs));\r\n    }\r\n    this.debug(\"Connecting to relays\", { timeoutMs });\r\n    return Promise.allSettled(connections).then(() => {\r\n    });\r\n  }\r\n  /**\r\n   * Get a NDKUser object\r\n   *\r\n   * @param opts\r\n   * @returns\r\n   */\r\n  getUser(opts) {\r\n    const user = new NDKUser(opts);\r\n    user.ndk = this;\r\n    return user;\r\n  }\r\n  /**\r\n   * Get a NDKUser from a NIP05\r\n   * @param nip05 NIP-05 ID\r\n   * @param skipCache Skip cache\r\n   * @returns\r\n   */\r\n  async getUserFromNip05(nip05, skipCache = false) {\r\n    return NDKUser.fromNip05(nip05, this, skipCache);\r\n  }\r\n  /**\r\n   * Create a new subscription. Subscriptions automatically start, you can make them automatically close when all relays send back an EOSE by setting `opts.closeOnEose` to `true`)\r\n   *\r\n   * @param filters\r\n   * @param opts\r\n   * @param relaySet explicit relay set to use\r\n   * @param autoStart automatically start the subscription\r\n   * @returns NDKSubscription\r\n   */\r\n  subscribe(filters, opts, relaySet, autoStart = true) {\r\n    const subscription = new NDKSubscription(this, filters, opts, relaySet);\r\n    if (relaySet) {\r\n      for (const relay of relaySet.relays) {\r\n        this.pool.useTemporaryRelay(relay);\r\n      }\r\n    }\r\n    if (this.outboxPool && subscription.hasAuthorsFilter()) {\r\n      const authors = subscription.filters.filter((filter) => filter.authors && filter.authors?.length > 0).map((filter) => filter.authors).flat();\r\n      this.outboxTracker?.trackUsers(authors);\r\n    }\r\n    if (autoStart) {\r\n      setTimeout(() => subscription.start(), 0);\r\n    }\r\n    return subscription;\r\n  }\r\n  /**\r\n   * Publish an event to a relay\r\n   * @param event event to publish\r\n   * @param relaySet explicit relay set to use\r\n   * @param timeoutMs timeout in milliseconds to wait for the event to be published\r\n   * @returns The relays the event was published to\r\n   *\r\n   * @deprecated Use `event.publish()` instead\r\n   */\r\n  async publish(event, relaySet, timeoutMs) {\r\n    this.debug(\"Deprecated: Use `event.publish()` instead\");\r\n    return event.publish(relaySet, timeoutMs);\r\n  }\r\n  /**\r\n   * Fetches event following a tag\r\n   * @param tag\r\n   * @param subOpts\r\n   * @returns\r\n   */\r\n  fetchEventFromTag = fetchEventFromTag.bind(this);\r\n  /**\r\n   * Fetch a single event.\r\n   *\r\n   * @param idOrFilter event id in bech32 format or filter\r\n   * @param opts subscription options\r\n   * @param relaySetOrRelay explicit relay set to use\r\n   */\r\n  async fetchEvent(idOrFilter, opts, relaySetOrRelay) {\r\n    let filter;\r\n    let relaySet;\r\n    if (relaySetOrRelay instanceof NDKRelay) {\r\n      relaySet = new NDKRelaySet(/* @__PURE__ */ new Set([relaySetOrRelay]), this);\r\n    } else if (relaySetOrRelay instanceof NDKRelaySet) {\r\n      relaySet = relaySetOrRelay;\r\n    }\r\n    if (!relaySetOrRelay && typeof idOrFilter === \"string\") {\r\n      if (!isNip33AValue(idOrFilter)) {\r\n        const relays = relaysFromBech32(idOrFilter);\r\n        if (relays.length > 0) {\r\n          relaySet = new NDKRelaySet(new Set(relays), this);\r\n          relaySet = correctRelaySet(relaySet, this.pool);\r\n        }\r\n      }\r\n    }\r\n    if (typeof idOrFilter === \"string\") {\r\n      filter = filterFromId(idOrFilter);\r\n    } else {\r\n      filter = idOrFilter;\r\n    }\r\n    if (!filter) {\r\n      throw new Error(`Invalid filter: ${JSON.stringify(idOrFilter)}`);\r\n    }\r\n    return new Promise((resolve) => {\r\n      let fetchedEvent = null;\r\n      const s = this.subscribe(\r\n        filter,\r\n        { ...opts || {}, closeOnEose: true },\r\n        relaySet,\r\n        false\r\n      );\r\n      s.on(\"event\", (event) => {\r\n        event.ndk = this;\r\n        if (!event.isReplaceable()) {\r\n          resolve(event);\r\n        } else if (!fetchedEvent || fetchedEvent.created_at < event.created_at) {\r\n          fetchedEvent = event;\r\n        }\r\n      });\r\n      s.on(\"eose\", () => {\r\n        resolve(fetchedEvent);\r\n      });\r\n      s.start();\r\n    });\r\n  }\r\n  /**\r\n   * Fetch events\r\n   */\r\n  async fetchEvents(filters, opts, relaySet) {\r\n    return new Promise((resolve) => {\r\n      const events = /* @__PURE__ */ new Map();\r\n      const relaySetSubscription = this.subscribe(\r\n        filters,\r\n        { ...opts || {}, closeOnEose: true },\r\n        relaySet,\r\n        false\r\n      );\r\n      const onEvent = (event) => {\r\n        const dedupKey = event.deduplicationKey();\r\n        const existingEvent = events.get(dedupKey);\r\n        if (existingEvent) {\r\n          event = dedup(existingEvent, event);\r\n        }\r\n        event.ndk = this;\r\n        events.set(dedupKey, event);\r\n      };\r\n      relaySetSubscription.on(\"event\", onEvent);\r\n      relaySetSubscription.on(\"event:dup\", onEvent);\r\n      relaySetSubscription.on(\"eose\", () => {\r\n        resolve(new Set(events.values()));\r\n      });\r\n      relaySetSubscription.start();\r\n    });\r\n  }\r\n  /**\r\n   * Ensures that a signer is available to sign an event.\r\n   */\r\n  assertSigner() {\r\n    if (!this.signer) {\r\n      this.emit(\"signer:required\");\r\n      throw new Error(\"Signer required\");\r\n    }\r\n  }\r\n  /**\r\n   * Creates a new Nip96 instance for the given domain.\r\n   * @param domain Domain to use for nip96 uploads\r\n   * @example Upload a file to a NIP-96 enabled domain:\r\n   *\r\n   * ```typescript\r\n   * const blob = new Blob([\"Hello, world!\"], { type: \"text/plain\" });\r\n   * const nip96 = ndk.getNip96(\"nostrcheck.me\");\r\n   * await nip96.upload(blob);\r\n   * ```\r\n   */\r\n  getNip96(domain) {\r\n    return new Nip96(domain, this);\r\n  }\r\n  /**\r\n   * Creates a new Nostr Wallet Connect instance for the given URI and waits for it to be ready.\r\n   * @param uri WalletConnect URI\r\n   * @param connectTimeout Timeout in milliseconds to wait for the NWC to be ready. Set to `false` to avoid connecting.\r\n   * @example\r\n   * const nwc = await ndk.nwc(\"nostr+walletconnect://....\")\r\n   * nwc.payInvoice(\"lnbc...\")\r\n   */\r\n  async nwc(uri, connectTimeout = 2e3) {\r\n    const nwc = await NDKNwc.fromURI(this, uri);\r\n    if (connectTimeout !== false) {\r\n      await nwc.blockUntilReady(connectTimeout);\r\n    }\r\n    return nwc;\r\n  }\r\n};\r\n\r\n// src/zap/invoice.ts\r\nimport { decode } from \"light-bolt11-decoder\";\r\nfunction zapInvoiceFromEvent(event) {\r\n  const description = event.getMatchingTags(\"description\")[0];\r\n  const bolt11 = event.getMatchingTags(\"bolt11\")[0];\r\n  let decodedInvoice;\r\n  let zapRequest;\r\n  if (!description || !bolt11 || !bolt11[1]) {\r\n    return null;\r\n  }\r\n  try {\r\n    let zapRequestPayload = description[1];\r\n    if (zapRequestPayload.startsWith(\"%\")) {\r\n      zapRequestPayload = decodeURIComponent(zapRequestPayload);\r\n    }\r\n    if (zapRequestPayload === \"\") {\r\n      return null;\r\n    }\r\n    zapRequest = JSON.parse(zapRequestPayload);\r\n    decodedInvoice = decode(bolt11[1]);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n  const amountSection = decodedInvoice.sections.find((s) => s.name === \"amount\");\r\n  if (!amountSection) {\r\n    return null;\r\n  }\r\n  const amount = parseInt(amountSection.value);\r\n  if (!amount) {\r\n    return null;\r\n  }\r\n  const content = zapRequest.content;\r\n  const sender = zapRequest.pubkey;\r\n  const recipientTag = event.getMatchingTags(\"p\")[0];\r\n  const recipient = recipientTag[1];\r\n  let zappedEvent = event.getMatchingTags(\"e\")[0];\r\n  if (!zappedEvent) {\r\n    zappedEvent = event.getMatchingTags(\"a\")[0];\r\n  }\r\n  const zappedEventId = zappedEvent ? zappedEvent[1] : void 0;\r\n  const zapInvoice = {\r\n    id: event.id,\r\n    zapper: event.pubkey,\r\n    zappee: sender,\r\n    zapped: recipient,\r\n    zappedEvent: zappedEventId,\r\n    amount,\r\n    comment: content\r\n  };\r\n  return zapInvoice;\r\n}\r\nexport {\r\n  BECH32_REGEX,\r\n  NDKAppHandlerEvent,\r\n  NDKArticle,\r\n  NDKClassified,\r\n  NDKDVMJobFeedback,\r\n  NDKDVMJobResult,\r\n  NDKDVMRequest,\r\n  NDKDvmJobFeedbackStatus,\r\n  NDKEvent,\r\n  NDKHighlight,\r\n  NDKKind,\r\n  NDKList,\r\n  NDKListKinds,\r\n  NDKNip07Signer,\r\n  NDKNip46Backend,\r\n  NDKNip46Signer,\r\n  NDKNostrRpc,\r\n  NDKNwc,\r\n  NDKPrivateKeySigner,\r\n  NDKRelay,\r\n  NDKRelayAuthPolicies,\r\n  NDKRelayList,\r\n  NDKRelaySet,\r\n  NDKRelayStatus,\r\n  NDKRepost,\r\n  NDKSimpleGroup,\r\n  NDKSubscription,\r\n  NDKSubscriptionCacheUsage,\r\n  NDKSubscriptionReceipt,\r\n  NDKSubscriptionStart,\r\n  NDKSubscriptionTier,\r\n  NDKTranscriptionDVM,\r\n  NDKUser,\r\n  NDKVideo,\r\n  NDKZap,\r\n  NIP33_A_REGEX,\r\n  PublishError,\r\n  calculateGroupableId,\r\n  calculateTermDurationInSeconds,\r\n  compareFilter,\r\n  NDK as default,\r\n  defaultOpts,\r\n  deserialize,\r\n  dvmSchedule,\r\n  eventHasETagMarkers,\r\n  eventIsPartOfThread,\r\n  eventIsReply,\r\n  eventReplies,\r\n  eventThreadIds,\r\n  eventThreads,\r\n  eventsBySameAuthor,\r\n  filterFromId,\r\n  generateSubId,\r\n  getEventReplyIds,\r\n  getReplyTag,\r\n  getRootEventId,\r\n  getRootTag,\r\n  isEventOriginalPost,\r\n  isNip33AValue,\r\n  mergeFilters,\r\n  newAmount,\r\n  normalize,\r\n  normalizeRelayUrl,\r\n  parseTagToSubscriptionAmount,\r\n  pinEvent,\r\n  possibleIntervalFrequencies,\r\n  profileFromEvent,\r\n  queryFullyFilled,\r\n  relaysFromBech32,\r\n  serialize,\r\n  serializeProfile,\r\n  zapInvoiceFromEvent\r\n};\r\n", "function number(n: number) {\r\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\r\n}\r\n\r\nfunction bool(b: boolean) {\r\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\r\n}\r\n\r\n// copied from utils\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\r\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\r\n  if (lengths.length > 0 && !lengths.includes(b.length))\r\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\r\n}\r\n\r\ntype Hash = {\r\n  (data: Uint8Array): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create: any;\r\n};\r\nfunction hash(h: Hash) {\r\n  if (typeof h !== 'function' || typeof h.create !== 'function')\r\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\r\n  number(h.outputLen);\r\n  number(h.blockLen);\r\n}\r\n\r\nfunction exists(instance: any, checkFinished = true) {\r\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\r\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\r\n}\r\nfunction output(out: any, instance: any) {\r\n  bytes(out);\r\n  const min = instance.outputLen;\r\n  if (out.length < min) {\r\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\r\n  }\r\n}\r\n\r\nexport { number, bool, bytes, hash, exists, output };\r\n\r\nconst assert = { number, bool, bytes, hash, exists, output };\r\nexport default assert;\r\n", "// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// See utils.ts for details.\r\ndeclare const globalThis: Record<string, any> | undefined;\r\nexport const crypto =\r\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\r\n", "/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n\r\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\r\n// node.js versions earlier than v19 don't declare it in global scope.\r\n// For node.js, package.json#exports field mapping rewrites import\r\n// from `crypto` to `cryptoNode`, which imports native module.\r\n// Makes the utils un-importable in browsers without a bundler.\r\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\r\nimport { crypto } from '@noble/hashes/crypto';\r\nimport { bytes as abytes } from './_assert.js';\r\n// export { isBytes } from './_assert.js';\r\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\n// prettier-ignore\r\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\r\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\r\n\r\n// Cast array to different type\r\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\r\nexport const u32 = (arr: TypedArray) =>\r\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\r\n\r\n// Cast array to view\r\nexport const createView = (arr: TypedArray) =>\r\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\r\n\r\n// The rotate right (circular right shift) operation for uint32\r\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\r\n// The rotate left (circular left shift) operation for uint32\r\nexport const rotl = (word: number, shift: number) =>\r\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\r\n\r\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\r\n// The byte swap operation for uint32\r\nexport const byteSwap = (word: number) =>\r\n  ((word << 24) & 0xff000000) |\r\n  ((word << 8) & 0xff0000) |\r\n  ((word >>> 8) & 0xff00) |\r\n  ((word >>> 24) & 0xff);\r\n// Conditionally byte swap if on a big-endian platform\r\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\r\n\r\n// In place byte swap for Uint32Array\r\nexport function byteSwap32(arr: Uint32Array) {\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = byteSwap(arr[i]);\r\n  }\r\n}\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\r\nfunction asciiToBase16(char: number): number | undefined {\r\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\r\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\r\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\r\n  return;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2;\r\n  }\r\n  return array;\r\n}\r\n\r\n// There is no setImmediate in browser and setTimeout is slow.\r\n// call of async fn will return Promise, which will be fullfiled only on\r\n// next scheduler queue processing step and this is exactly what we need.\r\nexport const nextTick = async () => {};\r\n\r\n// Returns control to thread each 'tick' ms to avoid blocking\r\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\r\n  let ts = Date.now();\r\n  for (let i = 0; i < iters; i++) {\r\n    cb(i);\r\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\r\n    const diff = Date.now() - ts;\r\n    if (diff >= 0 && diff < tick) continue;\r\n    await nextTick();\r\n    ts += diff;\r\n  }\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\nexport type Input = Uint8Array | string;\r\n/**\r\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\r\n * Warning: when Uint8Array is passed, it would NOT get copied.\r\n * Keep in mind for future mutable operations.\r\n */\r\nexport function toBytes(data: Input): Uint8Array {\r\n  if (typeof data === 'string') data = utf8ToBytes(data);\r\n  abytes(data);\r\n  return data;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n// For runtime check if class implements interface\r\nexport abstract class Hash<T extends Hash<T>> {\r\n  abstract blockLen: number; // Bytes per block\r\n  abstract outputLen: number; // Bytes in output\r\n  abstract update(buf: Input): this;\r\n  // Writes digest into buf\r\n  abstract digestInto(buf: Uint8Array): void;\r\n  abstract digest(): Uint8Array;\r\n  /**\r\n   * Resets internal state. Makes Hash instance unusable.\r\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\r\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\r\n   */\r\n  abstract destroy(): void;\r\n  /**\r\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\r\n   * when no options are passed.\r\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\r\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\r\n   * There are no guarantees for clean-up because it's impossible in JS.\r\n   */\r\n  abstract _cloneInto(to?: T): T;\r\n  // Safe version that clones internal state\r\n  clone(): T {\r\n    return this._cloneInto();\r\n  }\r\n}\r\n\r\n/**\r\n * XOF: streaming API to read digest in chunks.\r\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\r\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\r\n * destroy state, next call can require more bytes.\r\n */\r\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\r\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\r\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\r\n};\r\n\r\nconst toStr = {}.toString;\r\ntype EmptyObj = {};\r\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\r\n  defaults: T1,\r\n  opts?: T2\r\n): T1 & T2 {\r\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\r\n    throw new Error('Options should be object or undefined');\r\n  const merged = Object.assign(defaults, opts);\r\n  return merged as T1 & T2;\r\n}\r\n\r\nexport type CHash = ReturnType<typeof wrapConstructor>;\r\n\r\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\r\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\r\n  const tmp = hashCons();\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = () => hashCons();\r\n  return hashC;\r\n}\r\n\r\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\r\n  hashCons: (opts?: T) => Hash<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\r\n  hashCons: (opts?: T) => HashXOF<H>\r\n) {\r\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\r\n  const tmp = hashCons({} as T);\r\n  hashC.outputLen = tmp.outputLen;\r\n  hashC.blockLen = tmp.blockLen;\r\n  hashC.create = (opts: T) => hashCons(opts);\r\n  return hashC;\r\n}\r\n\r\n/**\r\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\r\n */\r\nexport function randomBytes(bytesLength = 32): Uint8Array {\r\n  if (crypto && typeof crypto.getRandomValues === 'function') {\r\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\r\n  }\r\n  throw new Error('crypto.getRandomValues must be defined');\r\n}\r\n", "import { exists, output } from './_assert.js';\r\nimport { Hash, createView, Input, toBytes } from './utils.js';\r\n\r\n// Polyfill for Safari 14\r\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\r\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\r\n  const _32n = BigInt(32);\r\n  const _u32_max = BigInt(0xffffffff);\r\n  const wh = Number((value >> _32n) & _u32_max);\r\n  const wl = Number(value & _u32_max);\r\n  const h = isLE ? 4 : 0;\r\n  const l = isLE ? 0 : 4;\r\n  view.setUint32(byteOffset + h, wh, isLE);\r\n  view.setUint32(byteOffset + l, wl, isLE);\r\n}\r\n\r\n// Choice: a ? b : c\r\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\r\n// Majority function, true if any two inpust is true\r\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\r\n\r\n/**\r\n * Merkle-Damgard hash construction base class.\r\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\r\n */\r\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\r\n  protected abstract process(buf: DataView, offset: number): void;\r\n  protected abstract get(): number[];\r\n  protected abstract set(...args: number[]): void;\r\n  abstract destroy(): void;\r\n  protected abstract roundClean(): void;\r\n  // For partial updates less than block size\r\n  protected buffer: Uint8Array;\r\n  protected view: DataView;\r\n  protected finished = false;\r\n  protected length = 0;\r\n  protected pos = 0;\r\n  protected destroyed = false;\r\n\r\n  constructor(\r\n    readonly blockLen: number,\r\n    public outputLen: number,\r\n    readonly padOffset: number,\r\n    readonly isLE: boolean\r\n  ) {\r\n    super();\r\n    this.buffer = new Uint8Array(blockLen);\r\n    this.view = createView(this.buffer);\r\n  }\r\n  update(data: Input): this {\r\n    exists(this);\r\n    const { view, buffer, blockLen } = this;\r\n    data = toBytes(data);\r\n    const len = data.length;\r\n    for (let pos = 0; pos < len; ) {\r\n      const take = Math.min(blockLen - this.pos, len - pos);\r\n      // Fast path: we have at least one block in input, cast it to view and process\r\n      if (take === blockLen) {\r\n        const dataView = createView(data);\r\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\r\n        continue;\r\n      }\r\n      buffer.set(data.subarray(pos, pos + take), this.pos);\r\n      this.pos += take;\r\n      pos += take;\r\n      if (this.pos === blockLen) {\r\n        this.process(view, 0);\r\n        this.pos = 0;\r\n      }\r\n    }\r\n    this.length += data.length;\r\n    this.roundClean();\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    exists(this);\r\n    output(out, this);\r\n    this.finished = true;\r\n    // Padding\r\n    // We can avoid allocation of buffer for padding completely if it\r\n    // was previously not allocated here. But it won't change performance.\r\n    const { buffer, view, blockLen, isLE } = this;\r\n    let { pos } = this;\r\n    // append the bit '1' to the message\r\n    buffer[pos++] = 0b10000000;\r\n    this.buffer.subarray(pos).fill(0);\r\n    // we have less than padOffset left in buffer, so we cannot put length in\r\n    // current block, need process it and pad again\r\n    if (this.padOffset > blockLen - pos) {\r\n      this.process(view, 0);\r\n      pos = 0;\r\n    }\r\n    // Pad until full block byte with zeros\r\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\r\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\r\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\r\n    // So we just write lowest 64 bits of that value.\r\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\r\n    this.process(view, 0);\r\n    const oview = createView(out);\r\n    const len = this.outputLen;\r\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\r\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\r\n    const outLen = len / 4;\r\n    const state = this.get();\r\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\r\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\r\n  }\r\n  digest() {\r\n    const { buffer, outputLen } = this;\r\n    this.digestInto(buffer);\r\n    const res = buffer.slice(0, outputLen);\r\n    this.destroy();\r\n    return res;\r\n  }\r\n  _cloneInto(to?: T): T {\r\n    to ||= new (this.constructor as any)() as T;\r\n    to.set(...this.get());\r\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\r\n    to.length = length;\r\n    to.pos = pos;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    if (length % blockLen) to.buffer.set(buffer);\r\n    return to;\r\n  }\r\n}\r\n", "import { HashMD, Chi, Maj } from './_md.js';\r\nimport { rotr, wrapConstructor } from './utils.js';\r\n\r\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\r\n// BTC network is doing 2^67 hashes/sec as per early 2023.\r\n\r\n// Round constants:\r\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\r\n// prettier-ignore\r\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\r\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\r\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\r\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\r\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\r\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\r\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\r\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\r\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\r\n]);\r\n\r\n// Initial state:\r\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\r\n// prettier-ignore\r\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\r\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\r\n]);\r\n\r\n// Temporary buffer, not used to store anything between runs\r\n// Named this way because it matches specification.\r\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\r\nclass SHA256 extends HashMD<SHA256> {\r\n  // We cannot use array here since array allows indexing by variable\r\n  // which means optimizer/compiler cannot use registers.\r\n  A = SHA256_IV[0] | 0;\r\n  B = SHA256_IV[1] | 0;\r\n  C = SHA256_IV[2] | 0;\r\n  D = SHA256_IV[3] | 0;\r\n  E = SHA256_IV[4] | 0;\r\n  F = SHA256_IV[5] | 0;\r\n  G = SHA256_IV[6] | 0;\r\n  H = SHA256_IV[7] | 0;\r\n\r\n  constructor() {\r\n    super(64, 32, 8, false);\r\n  }\r\n  protected get(): [number, number, number, number, number, number, number, number] {\r\n    const { A, B, C, D, E, F, G, H } = this;\r\n    return [A, B, C, D, E, F, G, H];\r\n  }\r\n  // prettier-ignore\r\n  protected set(\r\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\r\n  ) {\r\n    this.A = A | 0;\r\n    this.B = B | 0;\r\n    this.C = C | 0;\r\n    this.D = D | 0;\r\n    this.E = E | 0;\r\n    this.F = F | 0;\r\n    this.G = G | 0;\r\n    this.H = H | 0;\r\n  }\r\n  protected process(view: DataView, offset: number): void {\r\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\r\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\r\n    for (let i = 16; i < 64; i++) {\r\n      const W15 = SHA256_W[i - 15];\r\n      const W2 = SHA256_W[i - 2];\r\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\r\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\r\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\r\n    }\r\n    // Compression function main loop, 64 rounds\r\n    let { A, B, C, D, E, F, G, H } = this;\r\n    for (let i = 0; i < 64; i++) {\r\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\r\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\r\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\r\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\r\n      H = G;\r\n      G = F;\r\n      F = E;\r\n      E = (D + T1) | 0;\r\n      D = C;\r\n      C = B;\r\n      B = A;\r\n      A = (T1 + T2) | 0;\r\n    }\r\n    // Add the compressed chunk to the current hash value\r\n    A = (A + this.A) | 0;\r\n    B = (B + this.B) | 0;\r\n    C = (C + this.C) | 0;\r\n    D = (D + this.D) | 0;\r\n    E = (E + this.E) | 0;\r\n    F = (F + this.F) | 0;\r\n    G = (G + this.G) | 0;\r\n    H = (H + this.H) | 0;\r\n    this.set(A, B, C, D, E, F, G, H);\r\n  }\r\n  protected roundClean() {\r\n    SHA256_W.fill(0);\r\n  }\r\n  destroy() {\r\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\r\n    this.buffer.fill(0);\r\n  }\r\n}\r\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\r\nclass SHA224 extends SHA256 {\r\n  A = 0xc1059ed8 | 0;\r\n  B = 0x367cd507 | 0;\r\n  C = 0x3070dd17 | 0;\r\n  D = 0xf70e5939 | 0;\r\n  E = 0xffc00b31 | 0;\r\n  F = 0x68581511 | 0;\r\n  G = 0x64f98fa7 | 0;\r\n  H = 0xbefa4fa4 | 0;\r\n  constructor() {\r\n    super();\r\n    this.outputLen = 28;\r\n  }\r\n}\r\n\r\n/**\r\n * SHA2-256 hash function\r\n * @param message - data that would be hashed\r\n */\r\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\r\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\r\n// This is OK: `abstract` directory does not use noble-hashes.\r\n// User may opt-in into using different hashing library. This way, noble-hashes\r\n// won't be included into their bundle.\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\r\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\r\nexport type CHash = {\r\n  (message: Uint8Array | string): Uint8Array;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  create(opts?: { dkLen?: number }): any; // For shake\r\n};\r\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\r\n\r\nexport function isBytes(a: unknown): a is Uint8Array {\r\n  return (\r\n    a instanceof Uint8Array ||\r\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\r\n  );\r\n}\r\n\r\nexport function abytes(item: unknown): void {\r\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\r\n}\r\n\r\n// Array where index 0xf0 (240) is mapped to string 'f0'\r\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\r\n  i.toString(16).padStart(2, '0')\r\n);\r\n/**\r\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\r\n */\r\nexport function bytesToHex(bytes: Uint8Array): string {\r\n  abytes(bytes);\r\n  // pre-caching improves the speed 6x\r\n  let hex = '';\r\n  for (let i = 0; i < bytes.length; i++) {\r\n    hex += hexes[bytes[i]];\r\n  }\r\n  return hex;\r\n}\r\n\r\nexport function numberToHexUnpadded(num: number | bigint): string {\r\n  const hex = num.toString(16);\r\n  return hex.length & 1 ? `0${hex}` : hex;\r\n}\r\n\r\nexport function hexToNumber(hex: string): bigint {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  // Big Endian\r\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\r\n}\r\n\r\n// We use optimized technique to convert hex string to byte array\r\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\r\nfunction asciiToBase16(char: number): number | undefined {\r\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\r\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\r\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\r\n  return;\r\n}\r\n\r\n/**\r\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\r\n */\r\nexport function hexToBytes(hex: string): Uint8Array {\r\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\r\n  const hl = hex.length;\r\n  const al = hl / 2;\r\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\r\n  const array = new Uint8Array(al);\r\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\r\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\r\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\r\n    if (n1 === undefined || n2 === undefined) {\r\n      const char = hex[hi] + hex[hi + 1];\r\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\r\n    }\r\n    array[ai] = n1 * 16 + n2;\r\n  }\r\n  return array;\r\n}\r\n\r\n// BE: Big Endian, LE: Little Endian\r\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\r\n  return hexToNumber(bytesToHex(bytes));\r\n}\r\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\r\n  abytes(bytes);\r\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\r\n}\r\n\r\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\r\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\r\n}\r\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\r\n  return numberToBytesBE(n, len).reverse();\r\n}\r\n// Unpadded, rarely used\r\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\r\n  return hexToBytes(numberToHexUnpadded(n));\r\n}\r\n\r\n/**\r\n * Takes hex string or Uint8Array, converts to Uint8Array.\r\n * Validates output length.\r\n * Will throw error for other types.\r\n * @param title descriptive title for an error e.g. 'private key'\r\n * @param hex hex string or Uint8Array\r\n * @param expectedLength optional, will compare to result array's length\r\n * @returns\r\n */\r\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\r\n  let res: Uint8Array;\r\n  if (typeof hex === 'string') {\r\n    try {\r\n      res = hexToBytes(hex);\r\n    } catch (e) {\r\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\r\n    }\r\n  } else if (isBytes(hex)) {\r\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\r\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\r\n    res = Uint8Array.from(hex);\r\n  } else {\r\n    throw new Error(`${title} must be hex string or Uint8Array`);\r\n  }\r\n  const len = res.length;\r\n  if (typeof expectedLength === 'number' && len !== expectedLength)\r\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\r\n  return res;\r\n}\r\n\r\n/**\r\n * Copies several Uint8Arrays into one.\r\n */\r\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\r\n  let sum = 0;\r\n  for (let i = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    abytes(a);\r\n    sum += a.length;\r\n  }\r\n  const res = new Uint8Array(sum);\r\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\r\n    const a = arrays[i];\r\n    res.set(a, pad);\r\n    pad += a.length;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Compares 2 u8a-s in kinda constant time\r\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\r\n  if (a.length !== b.length) return false;\r\n  let diff = 0;\r\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\r\n  return diff === 0;\r\n}\r\n\r\n// Global symbols in both browsers and Node.js since v11\r\n// See https://github.com/microsoft/TypeScript/issues/31535\r\ndeclare const TextEncoder: any;\r\n\r\n/**\r\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\r\n */\r\nexport function utf8ToBytes(str: string): Uint8Array {\r\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\r\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\r\n}\r\n\r\n// Bit operations\r\n\r\n/**\r\n * Calculates amount of bits in a bigint.\r\n * Same as `n.toString(2).length`\r\n */\r\nexport function bitLen(n: bigint) {\r\n  let len;\r\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\r\n  return len;\r\n}\r\n\r\n/**\r\n * Gets single bit at position.\r\n * NOTE: first bit position is 0 (same as arrays)\r\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\r\n */\r\nexport function bitGet(n: bigint, pos: number) {\r\n  return (n >> BigInt(pos)) & _1n;\r\n}\r\n\r\n/**\r\n * Sets single bit at position.\r\n */\r\nexport function bitSet(n: bigint, pos: number, value: boolean) {\r\n  return n | ((value ? _1n : _0n) << BigInt(pos));\r\n}\r\n\r\n/**\r\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\r\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\r\n */\r\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\r\n\r\n// DRBG\r\n\r\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\r\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\r\ntype Pred<T> = (v: Uint8Array) => T | undefined;\r\n/**\r\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n * @returns function that will call DRBG until 2nd arg returns something meaningful\r\n * @example\r\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\r\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\r\n */\r\nexport function createHmacDrbg<T>(\r\n  hashLen: number,\r\n  qByteLen: number,\r\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\r\n): (seed: Uint8Array, predicate: Pred<T>) => T {\r\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\r\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\r\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\r\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\r\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\r\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\r\n  let i = 0; // Iterations counter, will throw when over 1000\r\n  const reset = () => {\r\n    v.fill(1);\r\n    k.fill(0);\r\n    i = 0;\r\n  };\r\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\r\n  const reseed = (seed = u8n()) => {\r\n    // HMAC-DRBG reseed() function. Steps D-G\r\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n    if (seed.length === 0) return;\r\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\r\n    v = h(); // v = hmac(k || v)\r\n  };\r\n  const gen = () => {\r\n    // HMAC-DRBG generate() function\r\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\r\n    let len = 0;\r\n    const out: Uint8Array[] = [];\r\n    while (len < qByteLen) {\r\n      v = h();\r\n      const sl = v.slice();\r\n      out.push(sl);\r\n      len += v.length;\r\n    }\r\n    return concatBytes(...out);\r\n  };\r\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\r\n    reset();\r\n    reseed(seed); // Steps D-G\r\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\r\n    while (!(res = pred(gen()))) reseed();\r\n    reset();\r\n    return res;\r\n  };\r\n  return genUntil;\r\n}\r\n\r\n// Validating curves and fields\r\n\r\nconst validatorFns = {\r\n  bigint: (val: any) => typeof val === 'bigint',\r\n  function: (val: any) => typeof val === 'function',\r\n  boolean: (val: any) => typeof val === 'boolean',\r\n  string: (val: any) => typeof val === 'string',\r\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\r\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\r\n  array: (val: any) => Array.isArray(val),\r\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\r\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\r\n} as const;\r\ntype Validator = keyof typeof validatorFns;\r\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\r\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\r\n\r\nexport function validateObject<T extends Record<string, any>>(\r\n  object: T,\r\n  validators: ValMap<T>,\r\n  optValidators: ValMap<T> = {}\r\n) {\r\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\r\n    const checkVal = validatorFns[type];\r\n    if (typeof checkVal !== 'function')\r\n      throw new Error(`Invalid validator \"${type}\", expected function`);\r\n\r\n    const val = object[fieldName as keyof typeof object];\r\n    if (isOptional && val === undefined) return;\r\n    if (!checkVal(val, object)) {\r\n      throw new Error(\r\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\r\n      );\r\n    }\r\n  };\r\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\r\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\r\n  return object;\r\n}\r\n// validate type tests\r\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\r\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\r\n// // Should fail type-check\r\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\r\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\r\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\r\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Utilities for modular arithmetics and finite fields\r\nimport {\r\n  bitMask,\r\n  numberToBytesBE,\r\n  numberToBytesLE,\r\n  bytesToNumberBE,\r\n  bytesToNumberLE,\r\n  ensureBytes,\r\n  validateObject,\r\n} from './utils.js';\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\r\n// prettier-ignore\r\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\r\n// prettier-ignore\r\nconst _9n = BigInt(9), _16n = BigInt(16);\r\n\r\n// Calculates a modulo b\r\nexport function mod(a: bigint, b: bigint): bigint {\r\n  const result = a % b;\r\n  return result >= _0n ? result : b + result;\r\n}\r\n/**\r\n * Efficiently raise num to power and do modular division.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n * @example\r\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\r\n */\r\n// TODO: use field version && remove\r\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\r\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\r\n  if (modulo === _1n) return _0n;\r\n  let res = _1n;\r\n  while (power > _0n) {\r\n    if (power & _1n) res = (res * num) % modulo;\r\n    num = (num * num) % modulo;\r\n    power >>= _1n;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\r\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\r\n  let res = x;\r\n  while (power-- > _0n) {\r\n    res *= res;\r\n    res %= modulo;\r\n  }\r\n  return res;\r\n}\r\n\r\n// Inverses number over modulo\r\nexport function invert(number: bigint, modulo: bigint): bigint {\r\n  if (number === _0n || modulo <= _0n) {\r\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\r\n  }\r\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\r\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\r\n  let a = mod(number, modulo);\r\n  let b = modulo;\r\n  // prettier-ignore\r\n  let x = _0n, y = _1n, u = _1n, v = _0n;\r\n  while (a !== _0n) {\r\n    // JIT applies optimization if those two lines follow each other\r\n    const q = b / a;\r\n    const r = b % a;\r\n    const m = x - u * q;\r\n    const n = y - v * q;\r\n    // prettier-ignore\r\n    b = a, a = r, x = u, y = v, u = m, v = n;\r\n  }\r\n  const gcd = b;\r\n  if (gcd !== _1n) throw new Error('invert: does not exist');\r\n  return mod(x, modulo);\r\n}\r\n\r\n/**\r\n * Tonelli-Shanks square root search algorithm.\r\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\r\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\r\n * Will start an infinite loop if field order P is not prime.\r\n * @param P field order\r\n * @returns function that takes field Fp (created from P) and number n\r\n */\r\nexport function tonelliShanks(P: bigint) {\r\n  // Legendre constant: used to calculate Legendre symbol (a | p),\r\n  // which denotes the value of a^((p-1)/2) (mod p).\r\n  // (a | p) ≡ 1    if a is a square (mod p)\r\n  // (a | p) ≡ -1   if a is not a square (mod p)\r\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\r\n  const legendreC = (P - _1n) / _2n;\r\n\r\n  let Q: bigint, S: number, Z: bigint;\r\n  // Step 1: By factoring out powers of 2 from p - 1,\r\n  // find q and s such that p - 1 = q*(2^s) with q odd\r\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\r\n\r\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\r\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\r\n\r\n  // Fast-path\r\n  if (S === 1) {\r\n    const p1div4 = (P + _1n) / _4n;\r\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\r\n      const root = Fp.pow(n, p1div4);\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // Slow-path\r\n  const Q1div2 = (Q + _1n) / _2n;\r\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\r\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\r\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\r\n    let r = S;\r\n    // TODO: will fail at Fp2/etc\r\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\r\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\r\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\r\n\r\n    while (!Fp.eql(b, Fp.ONE)) {\r\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\r\n      // Find m such b^(2^m)==1\r\n      let m = 1;\r\n      for (let t2 = Fp.sqr(b); m < r; m++) {\r\n        if (Fp.eql(t2, Fp.ONE)) break;\r\n        t2 = Fp.sqr(t2); // t2 *= t2\r\n      }\r\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\r\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\r\n      g = Fp.sqr(ge); // g = ge * ge\r\n      x = Fp.mul(x, ge); // x *= ge\r\n      b = Fp.mul(b, g); // b *= g\r\n      r = m;\r\n    }\r\n    return x;\r\n  };\r\n}\r\n\r\nexport function FpSqrt(P: bigint) {\r\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\r\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\r\n\r\n  // P ≡ 3 (mod 4)\r\n  // √n = n^((P+1)/4)\r\n  if (P % _4n === _3n) {\r\n    // Not all roots possible!\r\n    // const ORDER =\r\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\r\n    // const NUM = 72057594037927816n;\r\n    const p1div4 = (P + _1n) / _4n;\r\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\r\n      const root = Fp.pow(n, p1div4);\r\n      // Throw if root**2 != n\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\r\n  if (P % _8n === _5n) {\r\n    const c1 = (P - _5n) / _8n;\r\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\r\n      const n2 = Fp.mul(n, _2n);\r\n      const v = Fp.pow(n2, c1);\r\n      const nv = Fp.mul(n, v);\r\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\r\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\r\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\r\n      return root;\r\n    };\r\n  }\r\n\r\n  // P ≡ 9 (mod 16)\r\n  if (P % _16n === _9n) {\r\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\r\n    // Means we cannot use sqrt for constants at all!\r\n    //\r\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\r\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\r\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\r\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\r\n    // sqrt = (x) => {\r\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\r\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\r\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\r\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\r\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\r\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\r\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\r\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\r\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\r\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\r\n    // }\r\n  }\r\n\r\n  // Other cases: Tonelli-Shanks algorithm\r\n  return tonelliShanks(P);\r\n}\r\n\r\n// Little-endian check for first LE bit (last BE bit);\r\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\r\n\r\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\r\nexport interface IField<T> {\r\n  ORDER: bigint;\r\n  BYTES: number;\r\n  BITS: number;\r\n  MASK: bigint;\r\n  ZERO: T;\r\n  ONE: T;\r\n  // 1-arg\r\n  create: (num: T) => T;\r\n  isValid: (num: T) => boolean;\r\n  is0: (num: T) => boolean;\r\n  neg(num: T): T;\r\n  inv(num: T): T;\r\n  sqrt(num: T): T;\r\n  sqr(num: T): T;\r\n  // 2-args\r\n  eql(lhs: T, rhs: T): boolean;\r\n  add(lhs: T, rhs: T): T;\r\n  sub(lhs: T, rhs: T): T;\r\n  mul(lhs: T, rhs: T | bigint): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  div(lhs: T, rhs: T | bigint): T;\r\n  // N for NonNormalized (for now)\r\n  addN(lhs: T, rhs: T): T;\r\n  subN(lhs: T, rhs: T): T;\r\n  mulN(lhs: T, rhs: T | bigint): T;\r\n  sqrN(num: T): T;\r\n\r\n  // Optional\r\n  // Should be same as sgn0 function in\r\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\r\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\r\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\r\n  // legendre?(num: T): T;\r\n  pow(lhs: T, power: bigint): T;\r\n  invertBatch: (lst: T[]) => T[];\r\n  toBytes(num: T): Uint8Array;\r\n  fromBytes(bytes: Uint8Array): T;\r\n  // If c is False, CMOV returns a, otherwise it returns b.\r\n  cmov(a: T, b: T, c: boolean): T;\r\n}\r\n// prettier-ignore\r\nconst FIELD_FIELDS = [\r\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\r\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\r\n  'addN', 'subN', 'mulN', 'sqrN'\r\n] as const;\r\nexport function validateField<T>(field: IField<T>) {\r\n  const initial = {\r\n    ORDER: 'bigint',\r\n    MASK: 'bigint',\r\n    BYTES: 'isSafeInteger',\r\n    BITS: 'isSafeInteger',\r\n  } as Record<string, string>;\r\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\r\n    map[val] = 'function';\r\n    return map;\r\n  }, initial);\r\n  return validateObject(field, opts);\r\n}\r\n\r\n// Generic field functions\r\n\r\n/**\r\n * Same as `pow` but for Fp: non-constant-time.\r\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\r\n */\r\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\r\n  // Should have same speed as pow for bigints\r\n  // TODO: benchmark!\r\n  if (power < _0n) throw new Error('Expected power > 0');\r\n  if (power === _0n) return f.ONE;\r\n  if (power === _1n) return num;\r\n  let p = f.ONE;\r\n  let d = num;\r\n  while (power > _0n) {\r\n    if (power & _1n) p = f.mul(p, d);\r\n    d = f.sqr(d);\r\n    power >>= _1n;\r\n  }\r\n  return p;\r\n}\r\n\r\n/**\r\n * Efficiently invert an array of Field elements.\r\n * `inv(0)` will return `undefined` here: make sure to throw an error.\r\n */\r\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\r\n  const tmp = new Array(nums.length);\r\n  // Walk from first to last, multiply them by each other MOD p\r\n  const lastMultiplied = nums.reduce((acc, num, i) => {\r\n    if (f.is0(num)) return acc;\r\n    tmp[i] = acc;\r\n    return f.mul(acc, num);\r\n  }, f.ONE);\r\n  // Invert last element\r\n  const inverted = f.inv(lastMultiplied);\r\n  // Walk from last to first, multiply them by inverted each other MOD p\r\n  nums.reduceRight((acc, num, i) => {\r\n    if (f.is0(num)) return acc;\r\n    tmp[i] = f.mul(acc, tmp[i]);\r\n    return f.mul(acc, num);\r\n  }, inverted);\r\n  return tmp;\r\n}\r\n\r\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\r\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\r\n}\r\n\r\n// This function returns True whenever the value x is a square in the field F.\r\nexport function FpIsSquare<T>(f: IField<T>) {\r\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\r\n  return (x: T): boolean => {\r\n    const p = f.pow(x, legendreConst);\r\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\r\n  };\r\n}\r\n\r\n// CURVE.n lengths\r\nexport function nLength(n: bigint, nBitLength?: number) {\r\n  // Bit size, byte size of CURVE.n\r\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\r\n  const nByteLength = Math.ceil(_nBitLength / 8);\r\n  return { nBitLength: _nBitLength, nByteLength };\r\n}\r\n\r\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\r\n/**\r\n * Initializes a finite field over prime. **Non-primes are not supported.**\r\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\r\n * Major performance optimizations:\r\n * * a) denormalized operations like mulN instead of mul\r\n * * b) same object shape: never add or remove keys\r\n * * c) Object.freeze\r\n * @param ORDER prime positive bigint\r\n * @param bitLen how many bits the field consumes\r\n * @param isLE (def: false) if encoding / decoding should be in little-endian\r\n * @param redef optional faster redefinitions of sqrt and other methods\r\n */\r\nexport function Field(\r\n  ORDER: bigint,\r\n  bitLen?: number,\r\n  isLE = false,\r\n  redef: Partial<IField<bigint>> = {}\r\n): Readonly<FpField> {\r\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\r\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\r\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\r\n  const sqrtP = FpSqrt(ORDER);\r\n  const f: Readonly<FpField> = Object.freeze({\r\n    ORDER,\r\n    BITS,\r\n    BYTES,\r\n    MASK: bitMask(BITS),\r\n    ZERO: _0n,\r\n    ONE: _1n,\r\n    create: (num) => mod(num, ORDER),\r\n    isValid: (num) => {\r\n      if (typeof num !== 'bigint')\r\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\r\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\r\n    },\r\n    is0: (num) => num === _0n,\r\n    isOdd: (num) => (num & _1n) === _1n,\r\n    neg: (num) => mod(-num, ORDER),\r\n    eql: (lhs, rhs) => lhs === rhs,\r\n\r\n    sqr: (num) => mod(num * num, ORDER),\r\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\r\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\r\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\r\n    pow: (num, power) => FpPow(f, num, power),\r\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\r\n\r\n    // Same as above, but doesn't normalize\r\n    sqrN: (num) => num * num,\r\n    addN: (lhs, rhs) => lhs + rhs,\r\n    subN: (lhs, rhs) => lhs - rhs,\r\n    mulN: (lhs, rhs) => lhs * rhs,\r\n\r\n    inv: (num) => invert(num, ORDER),\r\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\r\n    invertBatch: (lst) => FpInvertBatch(f, lst),\r\n    // TODO: do we really need constant cmov?\r\n    // We don't have const-time bigints anyway, so probably will be not very useful\r\n    cmov: (a, b, c) => (c ? b : a),\r\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\r\n    fromBytes: (bytes) => {\r\n      if (bytes.length !== BYTES)\r\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\r\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\r\n    },\r\n  } as FpField);\r\n  return Object.freeze(f);\r\n}\r\n\r\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\r\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? root : Fp.neg(root);\r\n}\r\n\r\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\r\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\r\n  const root = Fp.sqrt(elm);\r\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\r\n}\r\n\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\r\n * Which makes it slightly more biased, less secure.\r\n * @deprecated use mapKeyToField instead\r\n */\r\nexport function hashToPrivateScalar(\r\n  hash: string | Uint8Array,\r\n  groupOrder: bigint,\r\n  isLE = false\r\n): bigint {\r\n  hash = ensureBytes('privateHash', hash);\r\n  const hashLen = hash.length;\r\n  const minLen = nLength(groupOrder).nByteLength + 8;\r\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\r\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\r\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\r\n  return mod(num, groupOrder - _1n) + _1n;\r\n}\r\n\r\n/**\r\n * Returns total number of bytes consumed by the field element.\r\n * For example, 32 bytes for usual 256-bit weierstrass curve.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of field\r\n */\r\nexport function getFieldBytesLength(fieldOrder: bigint): number {\r\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\r\n  const bitLength = fieldOrder.toString(2).length;\r\n  return Math.ceil(bitLength / 8);\r\n}\r\n\r\n/**\r\n * Returns minimal amount of bytes that can be safely reduced\r\n * by field order.\r\n * Should be 2^-128 for 128-bit curve such as P256.\r\n * @param fieldOrder number of field elements, usually CURVE.n\r\n * @returns byte length of target hash\r\n */\r\nexport function getMinHashLength(fieldOrder: bigint): number {\r\n  const length = getFieldBytesLength(fieldOrder);\r\n  return length + Math.ceil(length / 2);\r\n}\r\n\r\n/**\r\n * \"Constant-time\" private key generation utility.\r\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\r\n * and convert them into private scalar, with the modulo bias being negligible.\r\n * Needs at least 48 bytes of input for 32-byte private key.\r\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\r\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\r\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\r\n * @param hash hash output from SHA3 or a similar function\r\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\r\n * @param isLE interpret hash bytes as LE num\r\n * @returns valid private scalar\r\n */\r\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\r\n  const len = key.length;\r\n  const fieldLen = getFieldBytesLength(fieldOrder);\r\n  const minLen = getMinHashLength(fieldOrder);\r\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\r\n  if (len < 16 || len < minLen || len > 1024)\r\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\r\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\r\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\r\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\r\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Abelian group utilities\r\nimport { IField, validateField, nLength } from './modular.js';\r\nimport { validateObject } from './utils.js';\r\nconst _0n = BigInt(0);\r\nconst _1n = BigInt(1);\r\n\r\nexport type AffinePoint<T> = {\r\n  x: T;\r\n  y: T;\r\n} & { z?: never; t?: never };\r\n\r\nexport interface Group<T extends Group<T>> {\r\n  double(): T;\r\n  negate(): T;\r\n  add(other: T): T;\r\n  subtract(other: T): T;\r\n  equals(other: T): boolean;\r\n  multiply(scalar: bigint): T;\r\n}\r\n\r\nexport type GroupConstructor<T> = {\r\n  BASE: T;\r\n  ZERO: T;\r\n};\r\nexport type Mapper<T> = (i: T[]) => T[];\r\n\r\n// Elliptic curve multiplication of Point by scalar. Fragile.\r\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\r\n// Creates precomputation tables for fast multiplication:\r\n// - private scalar is split by fixed size windows of W bits\r\n// - every window point is collected from window's table & added to accumulator\r\n// - since windows are different, same point inside tables won't be accessed more than once per calc\r\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\r\n// - +1 window is neccessary for wNAF\r\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\r\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\r\n// windows to be in different memory locations\r\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\r\n  const constTimeNegate = (condition: boolean, item: T): T => {\r\n    const neg = item.negate();\r\n    return condition ? neg : item;\r\n  };\r\n  const opts = (W: number) => {\r\n    const windows = Math.ceil(bits / W) + 1; // +1, because\r\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\r\n    return { windows, windowSize };\r\n  };\r\n  return {\r\n    constTimeNegate,\r\n    // non-const time multiplication ladder\r\n    unsafeLadder(elm: T, n: bigint) {\r\n      let p = c.ZERO;\r\n      let d: T = elm;\r\n      while (n > _0n) {\r\n        if (n & _1n) p = p.add(d);\r\n        d = d.double();\r\n        n >>= _1n;\r\n      }\r\n      return p;\r\n    },\r\n\r\n    /**\r\n     * Creates a wNAF precomputation window. Used for caching.\r\n     * Default window size is set by `utils.precompute()` and is equal to 8.\r\n     * Number of precomputed points depends on the curve size:\r\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\r\n     * - 𝑊 is the window size\r\n     * - 𝑛 is the bitlength of the curve order.\r\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\r\n     * @returns precomputed point tables flattened to a single array\r\n     */\r\n    precomputeWindow(elm: T, W: number): Group<T>[] {\r\n      const { windows, windowSize } = opts(W);\r\n      const points: T[] = [];\r\n      let p: T = elm;\r\n      let base = p;\r\n      for (let window = 0; window < windows; window++) {\r\n        base = p;\r\n        points.push(base);\r\n        // =1, because we skip zero\r\n        for (let i = 1; i < windowSize; i++) {\r\n          base = base.add(p);\r\n          points.push(base);\r\n        }\r\n        p = base.double();\r\n      }\r\n      return points;\r\n    },\r\n\r\n    /**\r\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\r\n     * @param W window size\r\n     * @param precomputes precomputed tables\r\n     * @param n scalar (we don't check here, but should be less than curve order)\r\n     * @returns real and fake (for const-time) points\r\n     */\r\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\r\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\r\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\r\n      const { windows, windowSize } = opts(W);\r\n\r\n      let p = c.ZERO;\r\n      let f = c.BASE;\r\n\r\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\r\n      const maxNumber = 2 ** W;\r\n      const shiftBy = BigInt(W);\r\n\r\n      for (let window = 0; window < windows; window++) {\r\n        const offset = window * windowSize;\r\n        // Extract W bits.\r\n        let wbits = Number(n & mask);\r\n\r\n        // Shift number by W bits.\r\n        n >>= shiftBy;\r\n\r\n        // If the bits are bigger than max size, we'll split those.\r\n        // +224 => 256 - 32\r\n        if (wbits > windowSize) {\r\n          wbits -= maxNumber;\r\n          n += _1n;\r\n        }\r\n\r\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\r\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\r\n        // there is negate now: it is possible that negated element from low value\r\n        // would be the same as high element, which will create carry into next window.\r\n        // It's not obvious how this can fail, but still worth investigating later.\r\n\r\n        // Check if we're onto Zero point.\r\n        // Add random point inside current window to f.\r\n        const offset1 = offset;\r\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\r\n        const cond1 = window % 2 !== 0;\r\n        const cond2 = wbits < 0;\r\n        if (wbits === 0) {\r\n          // The most important part for const-time getPublicKey\r\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\r\n        } else {\r\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\r\n        }\r\n      }\r\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\r\n      // Even if the variable is still unused, there are some checks which will\r\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\r\n      // At this point there is a way to F be infinity-point even if p is not,\r\n      // which makes it less const-time: around 1 bigint multiply.\r\n      return { p, f };\r\n    },\r\n\r\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\r\n      // @ts-ignore\r\n      const W: number = P._WINDOW_SIZE || 1;\r\n      // Calculate precomputes on a first run, reuse them after\r\n      let comp = precomputesMap.get(P);\r\n      if (!comp) {\r\n        comp = this.precomputeWindow(P, W) as T[];\r\n        if (W !== 1) {\r\n          precomputesMap.set(P, transform(comp));\r\n        }\r\n      }\r\n      return this.wNAF(W, comp, n);\r\n    },\r\n  };\r\n}\r\n\r\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\r\n// Though generator can be different (Fp2 / Fp6 for BLS).\r\nexport type BasicCurve<T> = {\r\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\r\n  n: bigint; // Curve order, total count of valid points in the field\r\n  nBitLength?: number; // bit length of curve order\r\n  nByteLength?: number; // byte length of curve order\r\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\r\n  hEff?: bigint; // Number to multiply to clear cofactor\r\n  Gx: T; // base point X coordinate\r\n  Gy: T; // base point Y coordinate\r\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\r\n};\r\n\r\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\r\n  validateField(curve.Fp);\r\n  validateObject(\r\n    curve,\r\n    {\r\n      n: 'bigint',\r\n      h: 'bigint',\r\n      Gx: 'field',\r\n      Gy: 'field',\r\n    },\r\n    {\r\n      nBitLength: 'isSafeInteger',\r\n      nByteLength: 'isSafeInteger',\r\n    }\r\n  );\r\n  // Set defaults\r\n  return Object.freeze({\r\n    ...nLength(curve.n, curve.nBitLength),\r\n    ...curve,\r\n    ...{ p: curve.Fp.ORDER },\r\n  } as const);\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\r\nimport * as mod from './modular.js';\r\nimport * as ut from './utils.js';\r\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\r\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\r\n\r\nexport type { AffinePoint };\r\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\r\ntype EndomorphismOpts = {\r\n  beta: bigint;\r\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\r\n};\r\nexport type BasicWCurve<T> = BasicCurve<T> & {\r\n  // Params: a, b\r\n  a: T;\r\n  b: T;\r\n\r\n  // Optional params\r\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\r\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\r\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\r\n  // When a cofactor != 1, there can be an effective methods to:\r\n  // 1. Determine whether a point is torsion-free\r\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\r\n  // 2. Clear torsion component\r\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\r\n};\r\n\r\ntype Entropy = Hex | boolean;\r\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\r\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\r\n\r\n/**\r\n * ### Design rationale for types\r\n *\r\n * * Interaction between classes from different curves should fail:\r\n *   `k256.Point.BASE.add(p256.Point.BASE)`\r\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\r\n * * Different calls of `curve()` would return different classes -\r\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\r\n *   it won't affect others\r\n *\r\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\r\n *\r\n * We can use generic types via some param, like curve opts, but that would:\r\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\r\n *     which is hard to debug.\r\n *     2. Params can be generic and we can't enforce them to be constant value:\r\n *     if somebody creates curve from non-constant params,\r\n *     it would be allowed to interact with other curves with non-constant params\r\n *\r\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\r\n */\r\n\r\n// Instance for 3d XYZ points\r\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\r\n  readonly px: T;\r\n  readonly py: T;\r\n  readonly pz: T;\r\n  get x(): T;\r\n  get y(): T;\r\n  multiply(scalar: bigint): ProjPointType<T>;\r\n  toAffine(iz?: T): AffinePoint<T>;\r\n  isTorsionFree(): boolean;\r\n  clearCofactor(): ProjPointType<T>;\r\n  assertValidity(): void;\r\n  hasEvenY(): boolean;\r\n  toRawBytes(isCompressed?: boolean): Uint8Array;\r\n  toHex(isCompressed?: boolean): string;\r\n\r\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\r\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\r\n  _setWindowSize(windowSize: number): void;\r\n}\r\n// Static methods for 3d XYZ points\r\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\r\n  new (x: T, y: T, z: T): ProjPointType<T>;\r\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\r\n  fromHex(hex: Hex): ProjPointType<T>;\r\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\r\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\r\n}\r\n\r\nexport type CurvePointsType<T> = BasicWCurve<T> & {\r\n  // Bytes\r\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\r\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\r\n};\r\n\r\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\r\n  const opts = validateBasic(curve);\r\n  ut.validateObject(\r\n    opts,\r\n    {\r\n      a: 'field',\r\n      b: 'field',\r\n    },\r\n    {\r\n      allowedPrivateKeyLengths: 'array',\r\n      wrapPrivateKey: 'boolean',\r\n      isTorsionFree: 'function',\r\n      clearCofactor: 'function',\r\n      allowInfinityPoint: 'boolean',\r\n      fromBytes: 'function',\r\n      toBytes: 'function',\r\n    }\r\n  );\r\n  const { endo, Fp, a } = opts;\r\n  if (endo) {\r\n    if (!Fp.eql(a, Fp.ZERO)) {\r\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\r\n    }\r\n    if (\r\n      typeof endo !== 'object' ||\r\n      typeof endo.beta !== 'bigint' ||\r\n      typeof endo.splitScalar !== 'function'\r\n    ) {\r\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\r\n    }\r\n  }\r\n  return Object.freeze({ ...opts } as const);\r\n}\r\n\r\nexport type CurvePointsRes<T> = {\r\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\r\n  ProjectivePoint: ProjConstructor<T>;\r\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n  weierstrassEquation: (x: T) => T;\r\n  isWithinCurveOrder: (num: bigint) => boolean;\r\n};\r\n\r\n// ASN.1 DER encoding utilities\r\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\r\nexport const DER = {\r\n  // asn.1 DER encoding utils\r\n  Err: class DERErr extends Error {\r\n    constructor(m = '') {\r\n      super(m);\r\n    }\r\n  },\r\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\r\n    const { Err: E } = DER;\r\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\r\n    const len = data[1];\r\n    const res = data.subarray(2, len + 2);\r\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\r\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\r\n    // since we always use positive integers here. It must always be empty:\r\n    // - add zero byte if exists\r\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\r\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\r\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\r\n      throw new E('Invalid signature integer: unnecessary leading zero');\r\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\r\n  },\r\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\r\n    // parse DER signature\r\n    const { Err: E } = DER;\r\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\r\n    ut.abytes(data);\r\n    let l = data.length;\r\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\r\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\r\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\r\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\r\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\r\n    return { r, s };\r\n  },\r\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\r\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\r\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\r\n    const h = (num: number | bigint) => {\r\n      const hex = num.toString(16);\r\n      return hex.length & 1 ? `0${hex}` : hex;\r\n    };\r\n    const s = slice(h(sig.s));\r\n    const r = slice(h(sig.r));\r\n    const shl = s.length / 2;\r\n    const rhl = r.length / 2;\r\n    const sl = h(shl);\r\n    const rl = h(rhl);\r\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\r\n  },\r\n};\r\n\r\n// Be friendly to bad ECMAScript parsers by not using bigint literals\r\n// prettier-ignore\r\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\r\n\r\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\r\n  const CURVE = validatePointOpts(opts);\r\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\r\n\r\n  const toBytes =\r\n    CURVE.toBytes ||\r\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\r\n      const a = point.toAffine();\r\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\r\n    });\r\n  const fromBytes =\r\n    CURVE.fromBytes ||\r\n    ((bytes: Uint8Array) => {\r\n      // const head = bytes[0];\r\n      const tail = bytes.subarray(1);\r\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\r\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n      return { x, y };\r\n    });\r\n\r\n  /**\r\n   * y² = x³ + ax + b: Short weierstrass curve formula\r\n   * @returns y²\r\n   */\r\n  function weierstrassEquation(x: T): T {\r\n    const { a, b } = CURVE;\r\n    const x2 = Fp.sqr(x); // x * x\r\n    const x3 = Fp.mul(x2, x); // x2 * x\r\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\r\n  }\r\n  // Validate whether the passed curve params are valid.\r\n  // We check if curve equation works for generator point.\r\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\r\n  // ProjectivePoint class has not been initialized yet.\r\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\r\n    throw new Error('bad generator point: equation left != right');\r\n\r\n  // Valid group elements reside in range 1..n-1\r\n  function isWithinCurveOrder(num: bigint): boolean {\r\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\r\n  }\r\n  function assertGE(num: bigint) {\r\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\r\n  }\r\n  // Validates if priv key is valid and converts it to bigint.\r\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\r\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\r\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\r\n    if (lengths && typeof key !== 'bigint') {\r\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\r\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\r\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\r\n      key = key.padStart(nByteLength * 2, '0');\r\n    }\r\n    let num: bigint;\r\n    try {\r\n      num =\r\n        typeof key === 'bigint'\r\n          ? key\r\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\r\n    } catch (error) {\r\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\r\n    }\r\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\r\n    assertGE(num); // num in range [1..N-1]\r\n    return num;\r\n  }\r\n\r\n  const pointPrecomputes = new Map<Point, Point[]>();\r\n  function assertPrjPoint(other: unknown) {\r\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\r\n  }\r\n  /**\r\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\r\n   * Default Point works in 2d / affine coordinates: (x, y)\r\n   * We're doing calculations in projective, because its operations don't require costly inversion.\r\n   */\r\n  class Point implements ProjPointType<T> {\r\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\r\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\r\n\r\n    constructor(\r\n      readonly px: T,\r\n      readonly py: T,\r\n      readonly pz: T\r\n    ) {\r\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\r\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\r\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\r\n    }\r\n\r\n    // Does not validate if the point is on-curve.\r\n    // Use fromHex instead, or call assertValidity() later.\r\n    static fromAffine(p: AffinePoint<T>): Point {\r\n      const { x, y } = p || {};\r\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\r\n      if (p instanceof Point) throw new Error('projective point not allowed');\r\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\r\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\r\n      if (is0(x) && is0(y)) return Point.ZERO;\r\n      return new Point(x, y, Fp.ONE);\r\n    }\r\n\r\n    get x(): T {\r\n      return this.toAffine().x;\r\n    }\r\n    get y(): T {\r\n      return this.toAffine().y;\r\n    }\r\n\r\n    /**\r\n     * Takes a bunch of Projective Points but executes only one\r\n     * inversion on all of them. Inversion is very slow operation,\r\n     * so this improves performance massively.\r\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\r\n     */\r\n    static normalizeZ(points: Point[]): Point[] {\r\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\r\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n    }\r\n\r\n    /**\r\n     * Converts hash string or Uint8Array to Point.\r\n     * @param hex short/long ECDSA hex\r\n     */\r\n    static fromHex(hex: Hex): Point {\r\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\r\n      P.assertValidity();\r\n      return P;\r\n    }\r\n\r\n    // Multiplies generator point by privateKey.\r\n    static fromPrivateKey(privateKey: PrivKey) {\r\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\r\n    }\r\n\r\n    // We calculate precomputes for elliptic curve point multiplication\r\n    // using windowed method. This specifies window size and\r\n    // stores precomputed values. Usually only base point would be precomputed.\r\n    _WINDOW_SIZE?: number;\r\n\r\n    // \"Private method\", don't use it directly\r\n    _setWindowSize(windowSize: number) {\r\n      this._WINDOW_SIZE = windowSize;\r\n      pointPrecomputes.delete(this);\r\n    }\r\n\r\n    // A point on curve is valid if it conforms to equation.\r\n    assertValidity(): void {\r\n      if (this.is0()) {\r\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\r\n        // In BLS, ZERO can be serialized, so we allow it.\r\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\r\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\r\n        throw new Error('bad point: ZERO');\r\n      }\r\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\r\n      const { x, y } = this.toAffine();\r\n      // Check if x, y are valid field elements\r\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\r\n      const left = Fp.sqr(y); // y²\r\n      const right = weierstrassEquation(x); // x³ + ax + b\r\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\r\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\r\n    }\r\n    hasEvenY(): boolean {\r\n      const { y } = this.toAffine();\r\n      if (Fp.isOdd) return !Fp.isOdd(y);\r\n      throw new Error(\"Field doesn't support isOdd\");\r\n    }\r\n\r\n    /**\r\n     * Compare one point to another.\r\n     */\r\n    equals(other: Point): boolean {\r\n      assertPrjPoint(other);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      const { px: X2, py: Y2, pz: Z2 } = other;\r\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\r\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\r\n      return U1 && U2;\r\n    }\r\n\r\n    /**\r\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\r\n     */\r\n    negate(): Point {\r\n      return new Point(this.px, Fp.neg(this.py), this.pz);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free doubling formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 3\r\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\r\n    double() {\r\n      const { a, b } = CURVE;\r\n      const b3 = Fp.mul(b, _3n);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      let t0 = Fp.mul(X1, X1); // step 1\r\n      let t1 = Fp.mul(Y1, Y1);\r\n      let t2 = Fp.mul(Z1, Z1);\r\n      let t3 = Fp.mul(X1, Y1);\r\n      t3 = Fp.add(t3, t3); // step 5\r\n      Z3 = Fp.mul(X1, Z1);\r\n      Z3 = Fp.add(Z3, Z3);\r\n      X3 = Fp.mul(a, Z3);\r\n      Y3 = Fp.mul(b3, t2);\r\n      Y3 = Fp.add(X3, Y3); // step 10\r\n      X3 = Fp.sub(t1, Y3);\r\n      Y3 = Fp.add(t1, Y3);\r\n      Y3 = Fp.mul(X3, Y3);\r\n      X3 = Fp.mul(t3, X3);\r\n      Z3 = Fp.mul(b3, Z3); // step 15\r\n      t2 = Fp.mul(a, t2);\r\n      t3 = Fp.sub(t0, t2);\r\n      t3 = Fp.mul(a, t3);\r\n      t3 = Fp.add(t3, Z3);\r\n      Z3 = Fp.add(t0, t0); // step 20\r\n      t0 = Fp.add(Z3, t0);\r\n      t0 = Fp.add(t0, t2);\r\n      t0 = Fp.mul(t0, t3);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t2 = Fp.mul(Y1, Z1); // step 25\r\n      t2 = Fp.add(t2, t2);\r\n      t0 = Fp.mul(t2, t3);\r\n      X3 = Fp.sub(X3, t0);\r\n      Z3 = Fp.mul(t2, t1);\r\n      Z3 = Fp.add(Z3, Z3); // step 30\r\n      Z3 = Fp.add(Z3, Z3);\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    // Renes-Costello-Batina exception-free addition formula.\r\n    // There is 30% faster Jacobian formula, but it is not complete.\r\n    // https://eprint.iacr.org/2015/1060, algorithm 1\r\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\r\n    add(other: Point): Point {\r\n      assertPrjPoint(other);\r\n      const { px: X1, py: Y1, pz: Z1 } = this;\r\n      const { px: X2, py: Y2, pz: Z2 } = other;\r\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\r\n      const a = CURVE.a;\r\n      const b3 = Fp.mul(CURVE.b, _3n);\r\n      let t0 = Fp.mul(X1, X2); // step 1\r\n      let t1 = Fp.mul(Y1, Y2);\r\n      let t2 = Fp.mul(Z1, Z2);\r\n      let t3 = Fp.add(X1, Y1);\r\n      let t4 = Fp.add(X2, Y2); // step 5\r\n      t3 = Fp.mul(t3, t4);\r\n      t4 = Fp.add(t0, t1);\r\n      t3 = Fp.sub(t3, t4);\r\n      t4 = Fp.add(X1, Z1);\r\n      let t5 = Fp.add(X2, Z2); // step 10\r\n      t4 = Fp.mul(t4, t5);\r\n      t5 = Fp.add(t0, t2);\r\n      t4 = Fp.sub(t4, t5);\r\n      t5 = Fp.add(Y1, Z1);\r\n      X3 = Fp.add(Y2, Z2); // step 15\r\n      t5 = Fp.mul(t5, X3);\r\n      X3 = Fp.add(t1, t2);\r\n      t5 = Fp.sub(t5, X3);\r\n      Z3 = Fp.mul(a, t4);\r\n      X3 = Fp.mul(b3, t2); // step 20\r\n      Z3 = Fp.add(X3, Z3);\r\n      X3 = Fp.sub(t1, Z3);\r\n      Z3 = Fp.add(t1, Z3);\r\n      Y3 = Fp.mul(X3, Z3);\r\n      t1 = Fp.add(t0, t0); // step 25\r\n      t1 = Fp.add(t1, t0);\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.mul(b3, t4);\r\n      t1 = Fp.add(t1, t2);\r\n      t2 = Fp.sub(t0, t2); // step 30\r\n      t2 = Fp.mul(a, t2);\r\n      t4 = Fp.add(t4, t2);\r\n      t0 = Fp.mul(t1, t4);\r\n      Y3 = Fp.add(Y3, t0);\r\n      t0 = Fp.mul(t5, t4); // step 35\r\n      X3 = Fp.mul(t3, X3);\r\n      X3 = Fp.sub(X3, t0);\r\n      t0 = Fp.mul(t3, t1);\r\n      Z3 = Fp.mul(t5, Z3);\r\n      Z3 = Fp.add(Z3, t0); // step 40\r\n      return new Point(X3, Y3, Z3);\r\n    }\r\n\r\n    subtract(other: Point) {\r\n      return this.add(other.negate());\r\n    }\r\n\r\n    private is0() {\r\n      return this.equals(Point.ZERO);\r\n    }\r\n    private wNAF(n: bigint): { p: Point; f: Point } {\r\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\r\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\r\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\r\n     * It's faster, but should only be used when you don't care about\r\n     * an exposed private key e.g. sig verification, which works over *public* keys.\r\n     */\r\n    multiplyUnsafe(n: bigint): Point {\r\n      const I = Point.ZERO;\r\n      if (n === _0n) return I;\r\n      assertGE(n); // Will throw on 0\r\n      if (n === _1n) return this;\r\n      const { endo } = CURVE;\r\n      if (!endo) return wnaf.unsafeLadder(this, n);\r\n\r\n      // Apply endomorphism\r\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n      let k1p = I;\r\n      let k2p = I;\r\n      let d: Point = this;\r\n      while (k1 > _0n || k2 > _0n) {\r\n        if (k1 & _1n) k1p = k1p.add(d);\r\n        if (k2 & _1n) k2p = k2p.add(d);\r\n        d = d.double();\r\n        k1 >>= _1n;\r\n        k2 >>= _1n;\r\n      }\r\n      if (k1neg) k1p = k1p.negate();\r\n      if (k2neg) k2p = k2p.negate();\r\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n      return k1p.add(k2p);\r\n    }\r\n\r\n    /**\r\n     * Constant time multiplication.\r\n     * Uses wNAF method. Windowed method may be 10% faster,\r\n     * but takes 2x longer to generate and consumes 2x memory.\r\n     * Uses precomputes when available.\r\n     * Uses endomorphism for Koblitz curves.\r\n     * @param scalar by which the point would be multiplied\r\n     * @returns New point\r\n     */\r\n    multiply(scalar: bigint): Point {\r\n      assertGE(scalar);\r\n      let n = scalar;\r\n      let point: Point, fake: Point; // Fake point is used to const-time mult\r\n      const { endo } = CURVE;\r\n      if (endo) {\r\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\r\n        let { p: k1p, f: f1p } = this.wNAF(k1);\r\n        let { p: k2p, f: f2p } = this.wNAF(k2);\r\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\r\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\r\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\r\n        point = k1p.add(k2p);\r\n        fake = f1p.add(f2p);\r\n      } else {\r\n        const { p, f } = this.wNAF(n);\r\n        point = p;\r\n        fake = f;\r\n      }\r\n      // Normalize `z` for both points, but return only real one\r\n      return Point.normalizeZ([point, fake])[0];\r\n    }\r\n\r\n    /**\r\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\r\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\r\n     * The trick could be useful if both P and Q are not G (not in our case).\r\n     * @returns non-zero affine point\r\n     */\r\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\r\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\r\n      const mul = (\r\n        P: Point,\r\n        a: bigint // Select faster multiply() method\r\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\r\n      const sum = mul(this, a).add(mul(Q, b));\r\n      return sum.is0() ? undefined : sum;\r\n    }\r\n\r\n    // Converts Projective point to affine (x, y) coordinates.\r\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\r\n    // (x, y, z) ∋ (x=x/z, y=y/z)\r\n    toAffine(iz?: T): AffinePoint<T> {\r\n      const { px: x, py: y, pz: z } = this;\r\n      const is0 = this.is0();\r\n      // If invZ was 0, we return zero point. However we still want to execute\r\n      // all operations, so we replace invZ with a random number, 1.\r\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\r\n      const ax = Fp.mul(x, iz);\r\n      const ay = Fp.mul(y, iz);\r\n      const zz = Fp.mul(z, iz);\r\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\r\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\r\n      return { x: ax, y: ay };\r\n    }\r\n    isTorsionFree(): boolean {\r\n      const { h: cofactor, isTorsionFree } = CURVE;\r\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\r\n      if (isTorsionFree) return isTorsionFree(Point, this);\r\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\r\n    }\r\n    clearCofactor(): Point {\r\n      const { h: cofactor, clearCofactor } = CURVE;\r\n      if (cofactor === _1n) return this; // Fast-path\r\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\r\n      return this.multiplyUnsafe(CURVE.h);\r\n    }\r\n\r\n    toRawBytes(isCompressed = true): Uint8Array {\r\n      this.assertValidity();\r\n      return toBytes(Point, this, isCompressed);\r\n    }\r\n\r\n    toHex(isCompressed = true): string {\r\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\r\n    }\r\n  }\r\n  const _bits = CURVE.nBitLength;\r\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\r\n  // Validate if generator point is on curve\r\n  return {\r\n    CURVE,\r\n    ProjectivePoint: Point as ProjConstructor<T>,\r\n    normPrivateKeyToScalar,\r\n    weierstrassEquation,\r\n    isWithinCurveOrder,\r\n  };\r\n}\r\n\r\n// Instance\r\nexport interface SignatureType {\r\n  readonly r: bigint;\r\n  readonly s: bigint;\r\n  readonly recovery?: number;\r\n  assertValidity(): void;\r\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\r\n  hasHighS(): boolean;\r\n  normalizeS(): SignatureType;\r\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\r\n  toCompactRawBytes(): Uint8Array;\r\n  toCompactHex(): string;\r\n  // DER-encoded\r\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\r\n  toDERHex(isCompressed?: boolean): string;\r\n}\r\nexport type RecoveredSignatureType = SignatureType & {\r\n  readonly recovery: number;\r\n};\r\n// Static methods\r\nexport type SignatureConstructor = {\r\n  new (r: bigint, s: bigint): SignatureType;\r\n  fromCompact(hex: Hex): SignatureType;\r\n  fromDER(hex: Hex): SignatureType;\r\n};\r\ntype SignatureLike = { r: bigint; s: bigint };\r\n\r\nexport type PubKey = Hex | ProjPointType<bigint>;\r\n\r\nexport type CurveType = BasicWCurve<bigint> & {\r\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\r\n  hmac: HmacFnSync;\r\n  randomBytes: (bytesLength?: number) => Uint8Array;\r\n  lowS?: boolean;\r\n  bits2int?: (bytes: Uint8Array) => bigint;\r\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\r\n};\r\n\r\nfunction validateOpts(curve: CurveType) {\r\n  const opts = validateBasic(curve);\r\n  ut.validateObject(\r\n    opts,\r\n    {\r\n      hash: 'hash',\r\n      hmac: 'function',\r\n      randomBytes: 'function',\r\n    },\r\n    {\r\n      bits2int: 'function',\r\n      bits2int_modN: 'function',\r\n      lowS: 'boolean',\r\n    }\r\n  );\r\n  return Object.freeze({ lowS: true, ...opts } as const);\r\n}\r\n\r\nexport type CurveFn = {\r\n  CURVE: ReturnType<typeof validateOpts>;\r\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\r\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\r\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\r\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\r\n  ProjectivePoint: ProjConstructor<bigint>;\r\n  Signature: SignatureConstructor;\r\n  utils: {\r\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\r\n    isValidPrivateKey(privateKey: PrivKey): boolean;\r\n    randomPrivateKey: () => Uint8Array;\r\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\r\n  };\r\n};\r\n\r\nexport function weierstrass(curveDef: CurveType): CurveFn {\r\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\r\n  const { Fp, n: CURVE_ORDER } = CURVE;\r\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\r\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\r\n\r\n  function isValidFieldElement(num: bigint): boolean {\r\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\r\n  }\r\n  function modN(a: bigint) {\r\n    return mod.mod(a, CURVE_ORDER);\r\n  }\r\n  function invN(a: bigint) {\r\n    return mod.invert(a, CURVE_ORDER);\r\n  }\r\n\r\n  const {\r\n    ProjectivePoint: Point,\r\n    normPrivateKeyToScalar,\r\n    weierstrassEquation,\r\n    isWithinCurveOrder,\r\n  } = weierstrassPoints({\r\n    ...CURVE,\r\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\r\n      const a = point.toAffine();\r\n      const x = Fp.toBytes(a.x);\r\n      const cat = ut.concatBytes;\r\n      if (isCompressed) {\r\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\r\n      } else {\r\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\r\n      }\r\n    },\r\n    fromBytes(bytes: Uint8Array) {\r\n      const len = bytes.length;\r\n      const head = bytes[0];\r\n      const tail = bytes.subarray(1);\r\n      // this.assertValidity() is done inside of fromHex\r\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\r\n        const x = ut.bytesToNumberBE(tail);\r\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\r\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\r\n        let y: bigint;\r\n        try {\r\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\r\n        } catch (sqrtError) {\r\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\r\n          throw new Error('Point is not on curve' + suffix);\r\n        }\r\n        const isYOdd = (y & _1n) === _1n;\r\n        // ECDSA\r\n        const isHeadOdd = (head & 1) === 1;\r\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\r\n        return { x, y };\r\n      } else if (len === uncompressedLen && head === 0x04) {\r\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\r\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\r\n        return { x, y };\r\n      } else {\r\n        throw new Error(\r\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\r\n        );\r\n      }\r\n    },\r\n  });\r\n  const numToNByteStr = (num: bigint): string =>\r\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\r\n\r\n  function isBiggerThanHalfOrder(number: bigint) {\r\n    const HALF = CURVE_ORDER >> _1n;\r\n    return number > HALF;\r\n  }\r\n\r\n  function normalizeS(s: bigint) {\r\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\r\n  }\r\n  // slice bytes num\r\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\r\n\r\n  /**\r\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\r\n   */\r\n  class Signature implements SignatureType {\r\n    constructor(\r\n      readonly r: bigint,\r\n      readonly s: bigint,\r\n      readonly recovery?: number\r\n    ) {\r\n      this.assertValidity();\r\n    }\r\n\r\n    // pair (bytes of r, bytes of s)\r\n    static fromCompact(hex: Hex) {\r\n      const l = CURVE.nByteLength;\r\n      hex = ensureBytes('compactSignature', hex, l * 2);\r\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\r\n    }\r\n\r\n    // DER encoded ECDSA signature\r\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\r\n    static fromDER(hex: Hex) {\r\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\r\n      return new Signature(r, s);\r\n    }\r\n\r\n    assertValidity(): void {\r\n      // can use assertGE here\r\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\r\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\r\n    }\r\n\r\n    addRecoveryBit(recovery: number): RecoveredSignature {\r\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\r\n    }\r\n\r\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\r\n      const { r, s, recovery: rec } = this;\r\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\r\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\r\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\r\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\r\n      const prefix = (rec & 1) === 0 ? '02' : '03';\r\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\r\n      const ir = invN(radj); // r^-1\r\n      const u1 = modN(-h * ir); // -hr^-1\r\n      const u2 = modN(s * ir); // sr^-1\r\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\r\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\r\n      Q.assertValidity();\r\n      return Q;\r\n    }\r\n\r\n    // Signatures should be low-s, to prevent malleability.\r\n    hasHighS(): boolean {\r\n      return isBiggerThanHalfOrder(this.s);\r\n    }\r\n\r\n    normalizeS() {\r\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\r\n    }\r\n\r\n    // DER-encoded\r\n    toDERRawBytes() {\r\n      return ut.hexToBytes(this.toDERHex());\r\n    }\r\n    toDERHex() {\r\n      return DER.hexFromSig({ r: this.r, s: this.s });\r\n    }\r\n\r\n    // padded bytes of r, then padded bytes of s\r\n    toCompactRawBytes() {\r\n      return ut.hexToBytes(this.toCompactHex());\r\n    }\r\n    toCompactHex() {\r\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\r\n    }\r\n  }\r\n  type RecoveredSignature = Signature & { recovery: number };\r\n\r\n  const utils = {\r\n    isValidPrivateKey(privateKey: PrivKey) {\r\n      try {\r\n        normPrivateKeyToScalar(privateKey);\r\n        return true;\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    },\r\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\r\n\r\n    /**\r\n     * Produces cryptographically secure private key from random of size\r\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\r\n     */\r\n    randomPrivateKey: (): Uint8Array => {\r\n      const length = mod.getMinHashLength(CURVE.n);\r\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\r\n    },\r\n\r\n    /**\r\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\r\n     * Allows to massively speed-up `point.multiply(scalar)`.\r\n     * @returns cached point\r\n     * @example\r\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\r\n     * fast.multiply(privKey); // much faster ECDH now\r\n     */\r\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\r\n      point._setWindowSize(windowSize);\r\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\r\n      return point;\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Computes public key for a private key. Checks for validity of the private key.\r\n   * @param privateKey private key\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\r\n   */\r\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\r\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\r\n  }\r\n\r\n  /**\r\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\r\n   */\r\n  function isProbPub(item: PrivKey | PubKey): boolean {\r\n    const arr = ut.isBytes(item);\r\n    const str = typeof item === 'string';\r\n    const len = (arr || str) && (item as Hex).length;\r\n    if (arr) return len === compressedLen || len === uncompressedLen;\r\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\r\n    if (item instanceof Point) return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * ECDH (Elliptic Curve Diffie Hellman).\r\n   * Computes shared public key from private key and public key.\r\n   * Checks: 1) private key validity 2) shared key is on-curve.\r\n   * Does NOT hash the result.\r\n   * @param privateA private key\r\n   * @param publicB different public key\r\n   * @param isCompressed whether to return compact (default), or full key\r\n   * @returns shared public key\r\n   */\r\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\r\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\r\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\r\n    const b = Point.fromHex(publicB); // check for being on-curve\r\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\r\n  }\r\n\r\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\r\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\r\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\r\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\r\n  const bits2int =\r\n    CURVE.bits2int ||\r\n    function (bytes: Uint8Array): bigint {\r\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\r\n      // for some cases, since bytes.length * 8 is not actual bitLength.\r\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\r\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\r\n      return delta > 0 ? num >> BigInt(delta) : num;\r\n    };\r\n  const bits2int_modN =\r\n    CURVE.bits2int_modN ||\r\n    function (bytes: Uint8Array): bigint {\r\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\r\n    };\r\n  // NOTE: pads output with zero as per spec\r\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\r\n  /**\r\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\r\n   */\r\n  function int2octets(num: bigint): Uint8Array {\r\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\r\n    if (!(_0n <= num && num < ORDER_MASK))\r\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\r\n    // works with order, can have different size than numToField!\r\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\r\n  }\r\n\r\n  // Steps A, D of RFC6979 3.2\r\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\r\n  // Used only in sign, not in verify.\r\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\r\n  // Also it can be bigger for P224 + SHA256\r\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\r\n    if (['recovered', 'canonical'].some((k) => k in opts))\r\n      throw new Error('sign() legacy options not supported');\r\n    const { hash, randomBytes } = CURVE;\r\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\r\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\r\n\r\n    // We can't later call bits2octets, since nested bits2int is broken for curves\r\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\r\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\r\n    const h1int = bits2int_modN(msgHash);\r\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\r\n    const seedArgs = [int2octets(d), int2octets(h1int)];\r\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\r\n    if (ent != null && ent !== false) {\r\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\r\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\r\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\r\n    }\r\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\r\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\r\n    // Converts signature params into point w r/s, checks result for validity.\r\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\r\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\r\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\r\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\r\n      const ik = invN(k); // k^-1 mod n\r\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\r\n      const r = modN(q.x); // r = q.x mod n\r\n      if (r === _0n) return;\r\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\r\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\r\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\r\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\r\n      if (s === _0n) return;\r\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\r\n      let normS = s;\r\n      if (lowS && isBiggerThanHalfOrder(s)) {\r\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\r\n        recovery ^= 1; // // in the bottom half of N\r\n      }\r\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\r\n    }\r\n    return { seed, k2sig };\r\n  }\r\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\r\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\r\n\r\n  /**\r\n   * Signs message hash with a private key.\r\n   * ```\r\n   * sign(m, d, k) where\r\n   *   (x, y) = G × k\r\n   *   r = x mod n\r\n   *   s = (m + dr)/k mod n\r\n   * ```\r\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\r\n   * @param privKey private key\r\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\r\n   * @returns signature with recovery param\r\n   */\r\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\r\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\r\n    const C = CURVE;\r\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\r\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\r\n  }\r\n\r\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\r\n  Point.BASE._setWindowSize(8);\r\n  // utils.precompute(8, ProjectivePoint.BASE)\r\n\r\n  /**\r\n   * Verifies a signature against message hash and public key.\r\n   * Rejects lowS signatures by default: to override,\r\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\r\n   *\r\n   * ```\r\n   * verify(r, s, h, P) where\r\n   *   U1 = hs^-1 mod n\r\n   *   U2 = rs^-1 mod n\r\n   *   R = U1⋅G - U2⋅P\r\n   *   mod(R.x, n) == r\r\n   * ```\r\n   */\r\n  function verify(\r\n    signature: Hex | SignatureLike,\r\n    msgHash: Hex,\r\n    publicKey: Hex,\r\n    opts = defaultVerOpts\r\n  ): boolean {\r\n    const sg = signature;\r\n    msgHash = ensureBytes('msgHash', msgHash);\r\n    publicKey = ensureBytes('publicKey', publicKey);\r\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\r\n    const { lowS, prehash } = opts;\r\n\r\n    let _sig: Signature | undefined = undefined;\r\n    let P: ProjPointType<bigint>;\r\n    try {\r\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\r\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\r\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\r\n        try {\r\n          _sig = Signature.fromDER(sg);\r\n        } catch (derError) {\r\n          if (!(derError instanceof DER.Err)) throw derError;\r\n          _sig = Signature.fromCompact(sg);\r\n        }\r\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\r\n        const { r, s } = sg;\r\n        _sig = new Signature(r, s);\r\n      } else {\r\n        throw new Error('PARSE');\r\n      }\r\n      P = Point.fromHex(publicKey);\r\n    } catch (error) {\r\n      if ((error as Error).message === 'PARSE')\r\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\r\n      return false;\r\n    }\r\n    if (lowS && _sig.hasHighS()) return false;\r\n    if (prehash) msgHash = CURVE.hash(msgHash);\r\n    const { r, s } = _sig;\r\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\r\n    const is = invN(s); // s^-1\r\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\r\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\r\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\r\n    if (!R) return false;\r\n    const v = modN(R.x);\r\n    return v === r;\r\n  }\r\n  return {\r\n    CURVE,\r\n    getPublicKey,\r\n    getSharedSecret,\r\n    sign,\r\n    verify,\r\n    ProjectivePoint: Point,\r\n    Signature,\r\n    utils,\r\n  };\r\n}\r\n\r\n/**\r\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\r\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\r\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\r\n * b = False and y = sqrt(Z * (u / v)) otherwise.\r\n * @param Fp\r\n * @param Z\r\n * @returns\r\n */\r\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\r\n  // Generic implementation\r\n  const q = Fp.ORDER;\r\n  let l = _0n;\r\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\r\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\r\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\r\n  // 2n ** c1 == 2n << (c1-1)\r\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\r\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\r\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\r\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\r\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\r\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\r\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\r\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\r\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\r\n    let tv1 = c6; // 1. tv1 = c6\r\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\r\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\r\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\r\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\r\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\r\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\r\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\r\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\r\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\r\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\r\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\r\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\r\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\r\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\r\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\r\n    // 17. for i in (c1, c1 - 1, ..., 2):\r\n    for (let i = c1; i > _1n; i--) {\r\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\r\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\r\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\r\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\r\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\r\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\r\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\r\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\r\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\r\n    }\r\n    return { isValid: isQR, value: tv3 };\r\n  };\r\n  if (Fp.ORDER % _4n === _3n) {\r\n    // sqrt_ratio_3mod4(u, v)\r\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\r\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\r\n    sqrtRatio = (u: T, v: T) => {\r\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\r\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\r\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\r\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\r\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\r\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\r\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\r\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\r\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\r\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\r\n    };\r\n  }\r\n  // No curves uses that\r\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\r\n  return sqrtRatio;\r\n}\r\n/**\r\n * Simplified Shallue-van de Woestijne-Ulas Method\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\r\n */\r\nexport function mapToCurveSimpleSWU<T>(\r\n  Fp: mod.IField<T>,\r\n  opts: {\r\n    A: T;\r\n    B: T;\r\n    Z: T;\r\n  }\r\n) {\r\n  mod.validateField(Fp);\r\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\r\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\r\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\r\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\r\n  // Input: u, an element of F.\r\n  // Output: (x, y), a point on E.\r\n  return (u: T): { x: T; y: T } => {\r\n    // prettier-ignore\r\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\r\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\r\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\r\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\r\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\r\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\r\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\r\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\r\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\r\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\r\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\r\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\r\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\r\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\r\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\r\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\r\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\r\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\r\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\r\n    y = Fp.mul(y, value); // 20.   y = y * y1\r\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\r\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\r\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\r\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\r\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\r\n    return { x, y };\r\n  };\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\r\nimport { mod, IField } from './modular.js';\r\nimport type { CHash } from './utils.js';\r\nimport { bytesToNumberBE, abytes, concatBytes, utf8ToBytes, validateObject } from './utils.js';\r\n\r\n/**\r\n * * `DST` is a domain separation tag, defined in section 2.2.5\r\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\r\n * * `m` is extension degree (1 for prime fields)\r\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\r\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\r\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\r\n */\r\ntype UnicodeOrBytes = string | Uint8Array;\r\nexport type Opts = {\r\n  DST: UnicodeOrBytes;\r\n  p: bigint;\r\n  m: number;\r\n  k: number;\r\n  expand: 'xmd' | 'xof';\r\n  hash: CHash;\r\n};\r\n\r\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\r\nconst os2ip = bytesToNumberBE;\r\n\r\n// Integer to Octet Stream (numberToBytesBE)\r\nfunction i2osp(value: number, length: number): Uint8Array {\r\n  if (value < 0 || value >= 1 << (8 * length)) {\r\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\r\n  }\r\n  const res = Array.from({ length }).fill(0) as number[];\r\n  for (let i = length - 1; i >= 0; i--) {\r\n    res[i] = value & 0xff;\r\n    value >>>= 8;\r\n  }\r\n  return new Uint8Array(res);\r\n}\r\n\r\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const arr = new Uint8Array(a.length);\r\n  for (let i = 0; i < a.length; i++) {\r\n    arr[i] = a[i] ^ b[i];\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction anum(item: unknown): void {\r\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\r\n}\r\n\r\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\r\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\r\nexport function expand_message_xmd(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  abytes(DST);\r\n  anum(lenInBytes);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\r\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\r\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\r\n  if (ell > 255) throw new Error('Invalid xmd length');\r\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\r\n  const Z_pad = i2osp(0, r_in_bytes);\r\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\r\n  const b = new Array<Uint8Array>(ell);\r\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\r\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\r\n  for (let i = 1; i <= ell; i++) {\r\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\r\n    b[i] = H(concatBytes(...args));\r\n  }\r\n  const pseudo_random_bytes = concatBytes(...b);\r\n  return pseudo_random_bytes.slice(0, lenInBytes);\r\n}\r\n\r\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\r\n// 1. The collision resistance of H MUST be at least k bits.\r\n// 2. H MUST be an XOF that has been proved indifferentiable from\r\n//    a random oracle under a reasonable cryptographic assumption.\r\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\r\nexport function expand_message_xof(\r\n  msg: Uint8Array,\r\n  DST: Uint8Array,\r\n  lenInBytes: number,\r\n  k: number,\r\n  H: CHash\r\n): Uint8Array {\r\n  abytes(msg);\r\n  abytes(DST);\r\n  anum(lenInBytes);\r\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\r\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\r\n  if (DST.length > 255) {\r\n    const dkLen = Math.ceil((2 * k) / 8);\r\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\r\n  }\r\n  if (lenInBytes > 65535 || DST.length > 255)\r\n    throw new Error('expand_message_xof: invalid lenInBytes');\r\n  return (\r\n    H.create({ dkLen: lenInBytes })\r\n      .update(msg)\r\n      .update(i2osp(lenInBytes, 2))\r\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\r\n      .update(DST)\r\n      .update(i2osp(DST.length, 1))\r\n      .digest()\r\n  );\r\n}\r\n\r\n/**\r\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\r\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\r\n * @param msg a byte string containing the message to hash\r\n * @param count the number of elements of F to output\r\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\r\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\r\n */\r\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\r\n  validateObject(options, {\r\n    DST: 'stringOrUint8Array',\r\n    p: 'bigint',\r\n    m: 'isSafeInteger',\r\n    k: 'isSafeInteger',\r\n    hash: 'hash',\r\n  });\r\n  const { p, k, m, hash, expand, DST: _DST } = options;\r\n  abytes(msg);\r\n  anum(count);\r\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\r\n  const log2p = p.toString(2).length;\r\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\r\n  const len_in_bytes = count * m * L;\r\n  let prb; // pseudo_random_bytes\r\n  if (expand === 'xmd') {\r\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\r\n  } else if (expand === 'xof') {\r\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\r\n  } else if (expand === '_internal_pass') {\r\n    // for internal tests only\r\n    prb = msg;\r\n  } else {\r\n    throw new Error('expand must be \"xmd\" or \"xof\"');\r\n  }\r\n  const u = new Array(count);\r\n  for (let i = 0; i < count; i++) {\r\n    const e = new Array(m);\r\n    for (let j = 0; j < m; j++) {\r\n      const elm_offset = L * (j + i * m);\r\n      const tv = prb.subarray(elm_offset, elm_offset + L);\r\n      e[j] = mod(os2ip(tv), p);\r\n    }\r\n    u[i] = e;\r\n  }\r\n  return u;\r\n}\r\n\r\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\r\n  // Make same order as in spec\r\n  const COEFF = map.map((i) => Array.from(i).reverse());\r\n  return (x: T, y: T) => {\r\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\r\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\r\n    );\r\n    x = field.div(xNum, xDen); // xNum / xDen\r\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\r\n    return { x, y };\r\n  };\r\n}\r\n\r\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\r\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\r\n  toAffine(iz?: bigint): AffinePoint<T>;\r\n  clearCofactor(): H2CPoint<T>;\r\n  assertValidity(): void;\r\n}\r\n\r\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\r\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\r\n}\r\n\r\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\r\n\r\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\r\n// (changing DST is ok!)\r\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\r\n\r\nexport function createHasher<T>(\r\n  Point: H2CPointConstructor<T>,\r\n  mapToCurve: MapToCurve<T>,\r\n  def: Opts & { encodeDST?: UnicodeOrBytes }\r\n) {\r\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\r\n  return {\r\n    // Encodes byte string to elliptic curve.\r\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\r\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\r\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\r\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\r\n      const P = u0.add(u1).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n\r\n    // Encodes byte string to elliptic curve.\r\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\r\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\r\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\r\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\r\n      P.assertValidity();\r\n      return P;\r\n    },\r\n  };\r\n}\r\n", "import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\r\nimport { Hash, CHash, Input, toBytes } from './utils.js';\r\n// HMAC (RFC 2104)\r\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\r\n  oHash: T;\r\n  iHash: T;\r\n  blockLen: number;\r\n  outputLen: number;\r\n  private finished = false;\r\n  private destroyed = false;\r\n\r\n  constructor(hash: CHash, _key: Input) {\r\n    super();\r\n    assertHash(hash);\r\n    const key = toBytes(_key);\r\n    this.iHash = hash.create() as T;\r\n    if (typeof this.iHash.update !== 'function')\r\n      throw new Error('Expected instance of class which extends utils.Hash');\r\n    this.blockLen = this.iHash.blockLen;\r\n    this.outputLen = this.iHash.outputLen;\r\n    const blockLen = this.blockLen;\r\n    const pad = new Uint8Array(blockLen);\r\n    // blockLen can be bigger than outputLen\r\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\r\n    this.iHash.update(pad);\r\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\r\n    this.oHash = hash.create() as T;\r\n    // Undo internal XOR && apply outer XOR\r\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\r\n    this.oHash.update(pad);\r\n    pad.fill(0);\r\n  }\r\n  update(buf: Input) {\r\n    assertExists(this);\r\n    this.iHash.update(buf);\r\n    return this;\r\n  }\r\n  digestInto(out: Uint8Array) {\r\n    assertExists(this);\r\n    assertBytes(out, this.outputLen);\r\n    this.finished = true;\r\n    this.iHash.digestInto(out);\r\n    this.oHash.update(out);\r\n    this.oHash.digestInto(out);\r\n    this.destroy();\r\n  }\r\n  digest() {\r\n    const out = new Uint8Array(this.oHash.outputLen);\r\n    this.digestInto(out);\r\n    return out;\r\n  }\r\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\r\n    // Create new instance without calling constructor since key already in state and we don't know it.\r\n    to ||= Object.create(Object.getPrototypeOf(this), {});\r\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\r\n    to = to as this;\r\n    to.finished = finished;\r\n    to.destroyed = destroyed;\r\n    to.blockLen = blockLen;\r\n    to.outputLen = outputLen;\r\n    to.oHash = oHash._cloneInto(to.oHash);\r\n    to.iHash = iHash._cloneInto(to.iHash);\r\n    return to;\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.oHash.destroy();\r\n    this.iHash.destroy();\r\n  }\r\n}\r\n\r\n/**\r\n * HMAC: RFC2104 message authentication code.\r\n * @param hash - function that would be used e.g. sha256\r\n * @param key - message key\r\n * @param message - message data\r\n */\r\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\r\n  new HMAC<any>(hash, key).update(message).digest();\r\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\r\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\r\nimport { CHash } from './abstract/utils.js';\r\n\r\n// connects noble-curves to noble-hashes\r\nexport function getHash(hash: CHash) {\r\n  return {\r\n    hash,\r\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\r\n    randomBytes,\r\n  };\r\n}\r\n// Same API as @noble/hashes, with ability to create curve with custom hash\r\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\r\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\r\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\r\n  return Object.freeze({ ...create(defHash), create });\r\n}\r\n", "/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { randomBytes } from '@noble/hashes/utils';\r\nimport { Field, mod, pow2 } from './abstract/modular.js';\r\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\r\nimport type { Hex, PrivKey } from './abstract/utils.js';\r\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\r\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\r\nimport { createCurve } from './_shortw_utils.js';\r\n\r\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\r\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\r\nconst _1n = BigInt(1);\r\nconst _2n = BigInt(2);\r\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\r\n\r\n/**\r\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\r\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\r\n */\r\nfunction sqrtMod(y: bigint): bigint {\r\n  const P = secp256k1P;\r\n  // prettier-ignore\r\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\r\n  // prettier-ignore\r\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\r\n  const b2 = (y * y * y) % P; // x^3, 11\r\n  const b3 = (b2 * b2 * y) % P; // x^7\r\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\r\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\r\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\r\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\r\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\r\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\r\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\r\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\r\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\r\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\r\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\r\n  const root = pow2(t2, _2n, P);\r\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\r\n  return root;\r\n}\r\n\r\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\r\n\r\nexport const secp256k1 = createCurve(\r\n  {\r\n    a: BigInt(0), // equation params: a, b\r\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\r\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\r\n    n: secp256k1N, // Curve order, total count of valid points in the field\r\n    // Base point (x, y) aka generator point\r\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\r\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\r\n    h: BigInt(1), // Cofactor\r\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\r\n    /**\r\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\r\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\r\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\r\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\r\n     */\r\n    endo: {\r\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\r\n      splitScalar: (k: bigint) => {\r\n        const n = secp256k1N;\r\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\r\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\r\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\r\n        const b2 = a1;\r\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\r\n\r\n        const c1 = divNearest(b2 * k, n);\r\n        const c2 = divNearest(-b1 * k, n);\r\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\r\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\r\n        const k1neg = k1 > POW_2_128;\r\n        const k2neg = k2 > POW_2_128;\r\n        if (k1neg) k1 = n - k1;\r\n        if (k2neg) k2 = n - k2;\r\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\r\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\r\n        }\r\n        return { k1neg, k1, k2neg, k2 };\r\n      },\r\n    },\r\n  },\r\n  sha256\r\n);\r\n\r\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\r\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\r\nconst _0n = BigInt(0);\r\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\r\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\r\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\r\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\r\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\r\n  let tagP = TAGGED_HASH_PREFIXES[tag];\r\n  if (tagP === undefined) {\r\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\r\n    tagP = concatBytes(tagH, tagH);\r\n    TAGGED_HASH_PREFIXES[tag] = tagP;\r\n  }\r\n  return sha256(concatBytes(tagP, ...messages));\r\n}\r\n\r\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\r\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\r\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\r\nconst modP = (x: bigint) => mod(x, secp256k1P);\r\nconst modN = (x: bigint) => mod(x, secp256k1N);\r\nconst Point = secp256k1.ProjectivePoint;\r\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\r\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\r\n\r\n// Calculate point, scalar and bytes\r\nfunction schnorrGetExtPubKey(priv: PrivKey) {\r\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\r\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\r\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\r\n  return { scalar: scalar, bytes: pointToBytes(p) };\r\n}\r\n/**\r\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\r\n * @returns valid point checked for being on-curve\r\n */\r\nfunction lift_x(x: bigint): PointType<bigint> {\r\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\r\n  const xx = modP(x * x);\r\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\r\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\r\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\r\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\r\n  p.assertValidity();\r\n  return p;\r\n}\r\n/**\r\n * Create tagged hash, convert it to bigint, reduce modulo-n.\r\n */\r\nfunction challenge(...args: Uint8Array[]): bigint {\r\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\r\n}\r\n\r\n/**\r\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\r\n */\r\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\r\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\r\n}\r\n\r\n/**\r\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\r\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\r\n */\r\nfunction schnorrSign(\r\n  message: Hex,\r\n  privateKey: PrivKey,\r\n  auxRand: Hex = randomBytes(32)\r\n): Uint8Array {\r\n  const m = ensureBytes('message', message);\r\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\r\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\r\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\r\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\r\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\r\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\r\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\r\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\r\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\r\n  sig.set(rx, 0);\r\n  sig.set(numTo32b(modN(k + e * d)), 32);\r\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\r\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\r\n  return sig;\r\n}\r\n\r\n/**\r\n * Verifies Schnorr signature.\r\n * Will swallow errors & return false except for initial type validation of arguments.\r\n */\r\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\r\n  const sig = ensureBytes('signature', signature, 64);\r\n  const m = ensureBytes('message', message);\r\n  const pub = ensureBytes('publicKey', publicKey, 32);\r\n  try {\r\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\r\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\r\n    if (!fe(r)) return false;\r\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\r\n    if (!ge(s)) return false;\r\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\r\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\r\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\r\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\r\n  } catch (error) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const schnorr = /* @__PURE__ */ (() => ({\r\n  getPublicKey: schnorrGetPublicKey,\r\n  sign: schnorrSign,\r\n  verify: schnorrVerify,\r\n  utils: {\r\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\r\n    lift_x,\r\n    pointToBytes,\r\n    numberToBytesBE,\r\n    bytesToNumberBE,\r\n    taggedHash,\r\n    mod,\r\n  },\r\n}))();\r\n\r\nconst isoMap = /* @__PURE__ */ (() =>\r\n  isogenyMap(\r\n    Fp,\r\n    [\r\n      // xNum\r\n      [\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\r\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\r\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\r\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\r\n      ],\r\n      // xDen\r\n      [\r\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\r\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n      // yNum\r\n      [\r\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\r\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\r\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\r\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\r\n      ],\r\n      // yDen\r\n      [\r\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\r\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\r\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\r\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\r\n      ],\r\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\r\n  ))();\r\nconst mapSWU = /* @__PURE__ */ (() =>\r\n  mapToCurveSimpleSWU(Fp, {\r\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\r\n    B: BigInt('1771'),\r\n    Z: Fp.create(BigInt('-11')),\r\n  }))();\r\nconst htf = /* @__PURE__ */ (() =>\r\n  createHasher(\r\n    secp256k1.ProjectivePoint,\r\n    (scalars: bigint[]) => {\r\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\r\n      return isoMap(x, y);\r\n    },\r\n    {\r\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\r\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\r\n      p: Fp.ORDER,\r\n      m: 1,\r\n      k: 128,\r\n      expand: 'xmd',\r\n      hash: sha256,\r\n    }\r\n  ))();\r\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\r\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\r\n"],
  "mappings": "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",
  "names": ["exports", "argsDefCode", "funcDefCode", "funcCallCode", "_a", "exports", "TaskCollection", "exports", "exports", "EventEmitter", "exports", "_a", "exports", "exports", "module", "parse", "exports", "module", "createDebug", "hash", "debug", "split", "exports", "module", "exports", "LRUCache", "exports", "exports", "require_lib", "exports", "assertNumber", "chain", "encode", "decode", "alphabet", "join", "padding", "normalize", "convertRadix", "gcd", "radix2carry", "convertRadix2", "radix", "bytes", "radix2", "unsafeWrapper", "checksum", "genBase58", "XMR_BLOCK_LEN", "base58check", "sha256", "BECH_ALPHABET", "POLYMOD_GENERATORS", "bech32Polymod", "bechChecksum", "genBech32", "_words", "CODERS", "coderTypeError", "exports", "module", "bech32", "hex", "utf8", "decode", "hash", "crypto", "bytes", "hex", "crypto", "isLE", "_32n", "bytesToHex", "concatBytes", "hexToBytes", "utf8ToBytes", "u8a", "hexes", "bytes", "hex", "_0n", "_1n", "_2n", "number", "gcd", "Fp", "ge", "f", "_0n", "_1n", "bitLen", "isLE", "_0n", "f", "_1n", "bytes", "hash", "isLE", "_1n", "_0n", "_1n", "window", "f", "Fp", "hex", "s", "_0n", "_1n", "_2n", "_3n", "_4n", "toBytes", "concatBytes", "bytes", "bytesToHex", "Point", "f", "a", "modN", "number", "hexToBytes", "utils", "getPublicKey", "hash", "randomBytes", "_a", "r", "tv5", "c1", "c2", "utf8ToBytes", "concatBytes", "hash", "expand", "Point", "hash", "hash", "_1n", "_2n", "_3n", "_0n", "concatBytes", "encode", "decode", "alphabet", "padding", "bytes", "encode", "decode", "_words", "number", "bool", "isBytes", "bytes", "hash", "exists", "output", "assert", "number", "bool", "bytes", "hash", "exists", "output", "assert_default", "crypto", "isBytes", "createView", "rotr", "isLE", "hexes", "utf8ToBytes", "toBytes", "isBytes", "Hash", "wrapConstructor", "toBytes", "randomBytes", "crypto", "HMAC", "Hash", "hash", "toBytes", "exists", "bytes", "hmac", "hash", "number", "toBytes", "salt", "hmac", "createView", "setBigUint64", "isLE", "_32n", "SHA2", "Hash", "createView", "exists", "toBytes", "output", "Chi", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA2", "rotr", "SHA224", "sha256", "wrapConstructor", "sha224", "SHA2", "wrapConstructor", "assertNumber", "isBytes", "chain", "encode", "decode", "alphabet", "join", "padding", "normalize", "convertRadix", "gcd", "radix2carry", "convertRadix2", "radix", "bytes", "radix2", "unsafeWrapper", "checksum", "base16", "base32", "base32hex", "base32crockford", "base64", "base64url", "genBase58", "base58", "base58flickr", "base58xrp", "sha256", "chain", "base58", "BECH_ALPHABET", "alphabet", "join", "POLYMOD_GENERATORS", "bech32Polymod", "bechChecksum", "convertRadix2", "genBech32", "radix2", "unsafeWrapper", "encode", "decode", "bech32", "bech32m", "hex", "chain", "radix2", "alphabet", "join", "normalize", "wordlist", "normalize", "assert_default", "randomBytes", "sha256", "normalize", "number", "isBytes", "bytes", "hash", "number", "exists", "output", "crypto", "isBytes", "createView", "rotr", "isLE", "hexes", "bytesToHex", "bytes", "hex", "hexToBytes", "utf8ToBytes", "toBytes", "isBytes", "concatBytes", "Hash", "toStr", "wrapConstructor", "toBytes", "HMAC", "Hash", "hash", "toBytes", "exists", "bytes", "hmac", "setBigUint64", "isLE", "_32n", "SHA2", "Hash", "createView", "exists", "toBytes", "output", "SHA2", "wrapConstructor", "Chi", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA2", "rotr", "SHA224", "sha256", "wrapConstructor", "sha224", "U32_MASK64", "_32n", "fromBig", "split", "toBig", "shrSH", "shrSL", "rotrSH", "rotrSL", "rotrBH", "rotrBL", "rotr32H", "rotr32L", "rotlSH", "rotlSL", "rotlBH", "rotlBL", "add", "add3L", "add3H", "add4L", "add4H", "add5L", "add5H", "u64", "fromBig", "split", "toBig", "shrSH", "shrSL", "rotrSH", "rotrSL", "rotrBH", "rotrBL", "rotr32H", "rotr32L", "rotlSH", "rotlSL", "rotlBH", "rotlBL", "add", "add3L", "add3H", "add4L", "add4H", "add5H", "add5L", "u64_default", "SHA512_Kh", "SHA512_Kl", "u64_default", "SHA512_W_H", "SHA512_W_L", "SHA512", "SHA2", "SHA512_224", "SHA512_256", "SHA384", "sha512", "wrapConstructor", "sha512_224", "sha512_256", "sha384", "number", "bool", "bytes", "hash", "exists", "output", "assert", "assert_default", "crypto", "u8a", "createView", "rotr", "isLE", "hexes", "utf8ToBytes", "toBytes", "u8a", "concatBytes", "Hash", "wrapConstructor", "toBytes", "randomBytes", "crypto", "setBigUint64", "isLE", "_32n", "SHA2", "Hash", "createView", "assert_default", "toBytes", "Chi", "Maj", "SHA256_K", "IV", "SHA256_W", "SHA256", "SHA2", "rotr", "SHA224", "sha256", "wrapConstructor", "sha224", "utils_exports", "bitGet", "bitLen", "bitMask", "bitSet", "bytesToHex", "bytesToNumberBE", "bytesToNumberLE", "concatBytes", "createHmacDrbg", "ensureBytes", "equalBytes", "hexToBytes", "hexToNumber", "numberToBytesBE", "numberToBytesLE", "numberToHexUnpadded", "numberToVarBytesBE", "utf8ToBytes", "validateObject", "_0n", "_1n", "_2n", "u8a", "hexes", "bytes", "hex", "u8n", "u8fr", "validatorFns", "_0n", "_1n", "_2n", "_3n", "_4n", "_5n", "_8n", "_9n", "_16n", "mod", "pow", "pow2", "invert", "number", "gcd", "tonelliShanks", "Fp", "ge", "FpSqrt", "FIELD_FIELDS", "validateField", "validateObject", "FpPow", "f", "_0n", "_1n", "FpInvertBatch", "nLength", "Field", "bitLen", "isLE", "_0n", "FpSqrt", "f", "bitMask", "_1n", "mod", "FpPow", "invert", "FpInvertBatch", "numberToBytesLE", "numberToBytesBE", "bytes", "bytesToNumberLE", "bytesToNumberBE", "hashToPrivateScalar", "hash", "isLE", "ensureBytes", "nLength", "bytesToNumberLE", "bytesToNumberBE", "mod", "_1n", "_0n", "_1n", "wNAF", "window", "f", "validateBasic", "validateField", "validateObject", "nLength", "validatePointOpts", "validateBasic", "validateObject", "Fp", "b2n", "h2b", "utils_exports", "DER", "DERErr", "hex", "s", "_0n", "_1n", "_2n", "_3n", "_4n", "weierstrassPoints", "toBytes", "concatBytes", "bytes", "bytesToHex", "bytesToNumberBE", "ensureBytes", "mod", "Point", "f", "a", "wNAF", "validateOpts", "weierstrass", "modN", "invert", "numberToBytesBE", "number", "hexToBytes", "utils", "hashToPrivateScalar", "getPublicKey", "bitMask", "hash", "randomBytes", "createHmacDrbg", "_a", "r", "SWUFpSqrtRatio", "tv5", "c1", "c2", "mapToCurveSimpleSWU", "validateField", "validateDST", "utf8ToBytes", "os2ip", "bytesToNumberBE", "i2osp", "strxor", "isBytes", "isNum", "expand_message_xmd", "concatBytes", "expand_message_xof", "hash_to_field", "validateObject", "hash", "expand", "mod", "isogenyMap", "createHasher", "Point", "HMAC", "Hash", "hash", "assert_default", "toBytes", "hmac", "getHash", "hash", "hmac", "concatBytes", "randomBytes", "createCurve", "weierstrass", "secp256k1P", "secp256k1N", "_1n", "_2n", "divNearest", "sqrtMod", "_3n", "pow2", "Fp", "Field", "secp256k1", "createCurve", "mod", "sha256", "_0n", "fe", "ge", "TAGGED_HASH_PREFIXES", "taggedHash", "concatBytes", "pointToBytes", "numTo32b", "numberToBytesBE", "modP", "modN", "Point", "GmulAdd", "schnorrGetExtPubKey", "lift_x", "challenge", "bytesToNumberBE", "schnorrGetPublicKey", "schnorrSign", "randomBytes", "ensureBytes", "schnorrVerify", "schnorr", "isoMap", "isogenyMap", "mapSWU", "mapToCurveSimpleSWU", "htf", "createHasher", "hashToCurve", "encodeToCurve", "Point", "secp256k1", "base58check", "sha256", "bytes", "bytesToHex", "hexToBytes", "utf8ToBytes", "createView", "concatBytes", "hmac", "sha512", "mod", "hash", "u8a", "createView", "isLE", "hexes", "utf8ToBytes", "toBytes", "utf8ToBytes", "u8a", "checkOpts", "ensureBytes", "equalBytes", "setBigUint64", "isLE", "_32n", "number", "bool", "bytes", "hash", "exists", "output", "assert", "number", "bool", "bytes", "hash", "exists", "output", "assert_default", "toBytes", "ensureBytes", "f", "assert_default", "utf8ToBytes", "checkOpts", "assert_default", "output", "rotl", "createView", "setBigUint64", "ensureBytes", "output", "equalBytes", "hash", "salt", "HMAC", "__defProp", "__export", "utils_exports", "_a", "hash", "f", "__export", "_a", "challenge", "__export", "number", "_a", "hex", "__export", "hex", "challenge", "utils", "salt", "ensureBytes", "equalBytes", "import_tseep", "import_tseep", "number", "isBytes", "bytes", "hash", "number", "exists", "output", "crypto", "createView", "rotr", "isLE", "hexes", "bytesToHex", "bytes", "hex", "utf8ToBytes", "toBytes", "bytes", "concatBytes", "Hash", "toStr", "wrapConstructor", "toBytes", "randomBytes", "crypto", "setBigUint64", "isLE", "_32n", "Chi", "Maj", "Hash", "createView", "exists", "toBytes", "output", "SHA256_K", "SHA256_W", "SHA256", "rotr", "Chi", "Maj", "SHA224", "sha256", "wrapConstructor", "sha224", "utils_exports", "bitGet", "bitLen", "bitMask", "bitSet", "bytesToHex", "bytesToNumberBE", "bytesToNumberLE", "concatBytes", "createHmacDrbg", "ensureBytes", "equalBytes", "hexToBytes", "hexToNumber", "isBytes", "numberToBytesBE", "numberToBytesLE", "numberToHexUnpadded", "numberToVarBytesBE", "utf8ToBytes", "validateObject", "_0n", "_1n", "_2n", "hexes", "bytes", "hex", "asciis", "asciiToBase16", "u8n", "u8fr", "validatorFns", "_0n", "_1n", "_2n", "_3n", "_4n", "_5n", "_8n", "_9n", "_16n", "mod", "pow", "pow2", "invert", "number", "gcd", "tonelliShanks", "Fp", "ge", "FpSqrt", "FIELD_FIELDS", "validateField", "validateObject", "FpPow", "f", "_0n", "_1n", "FpInvertBatch", "nLength", "Field", "bitLen", "isLE", "_0n", "FpSqrt", "f", "bitMask", "_1n", "mod", "FpPow", "invert", "FpInvertBatch", "numberToBytesLE", "numberToBytesBE", "bytes", "bytesToNumberLE", "bytesToNumberBE", "isLE", "bytesToNumberBE", "bytesToNumberLE", "mod", "_1n", "numberToBytesLE", "numberToBytesBE", "_0n", "_1n", "wNAF", "window", "f", "validateBasic", "validateField", "validateObject", "nLength", "validatePointOpts", "validateBasic", "validateObject", "Fp", "b2n", "h2b", "utils_exports", "DER", "DERErr", "hex", "s", "_0n", "_1n", "_2n", "_3n", "_4n", "weierstrassPoints", "toBytes", "concatBytes", "bytes", "isBytes", "bytesToHex", "bytesToNumberBE", "ensureBytes", "mod", "Point", "f", "a", "wNAF", "validateOpts", "weierstrass", "modN", "invert", "numberToBytesBE", "number", "hexToBytes", "utils", "getPublicKey", "bitMask", "hash", "randomBytes", "createHmacDrbg", "_a", "r", "SWUFpSqrtRatio", "tv5", "c1", "c2", "mapToCurveSimpleSWU", "validateField", "os2ip", "bytesToNumberBE", "i2osp", "strxor", "expand_message_xmd", "concatBytes", "utf8ToBytes", "expand_message_xof", "hash_to_field", "validateObject", "hash", "expand", "mod", "isogenyMap", "createHasher", "Point", "HMAC", "Hash", "hash", "toBytes", "exists", "bytes", "hmac", "getHash", "hash", "hmac", "concatBytes", "randomBytes", "createCurve", "weierstrass", "secp256k1P", "secp256k1N", "_1n", "_2n", "divNearest", "sqrtMod", "_3n", "pow2", "Fp", "Field", "secp256k1", "createCurve", "mod", "sha256", "_0n", "fe", "ge", "TAGGED_HASH_PREFIXES", "taggedHash", "concatBytes", "pointToBytes", "numTo32b", "numberToBytesBE", "modP", "modN", "Point", "GmulAdd", "schnorrGetExtPubKey", "lift_x", "challenge", "bytesToNumberBE", "schnorrGetPublicKey", "schnorrSign", "randomBytes", "ensureBytes", "schnorrVerify", "schnorr", "isoMap", "isogenyMap", "mapSWU", "mapToCurveSimpleSWU", "htf", "createHasher", "hashToCurve", "encodeToCurve", "import_tseep", "import_debug", "import_tseep", "import_debug", "import_tseep", "import_debug", "import_tseep", "import_typescript_lru_cache", "_a", "challenge", "BECH32_REGEX", "bech322", "hash", "normalize", "EventEmitter2", "debug", "encrypt", "decrypt", "verifySignature", "sha256", "schnorr", "getEventHash", "bytesToHex", "createDebug", "EventEmitter3", "bech32", "utf8Decoder", "_fetch", "EventEmitter4", "EventEmitter5", "f", "NIP05_REGEX", "parseNIP05Result", "process", "debug3", "debug4", "output", "EventEmitter6", "createDebug2", "debug5", "EventEmitter7", "decrypt2", "encrypt2", "EventEmitter8", "EventEmitter9", "LRUCache2", "EventEmitter10", "EventEmitter11", "debug6"]
}
